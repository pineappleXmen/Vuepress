import{_ as p,V as l,W as o,Y as s,Z as n,$ as t,a0 as e,D as c}from"./framework-3845b112.js";const i={},r=e('<h1 id="单调栈-monotone-stack" tabindex="-1"><a class="header-anchor" href="#单调栈-monotone-stack" aria-hidden="true">#</a> 单调栈 Monotone Stack</h1><p>举例：返回每个元素两侧严格大于它的元素位置（不存在则为 -1 或 n）</p><p>如何理解：把数组想象成一列山峰，站在 a[i] 的山顶仰望两侧的山峰，是看不到高山背后的矮山的，只能看到一座座更高的山峰</p><p>这就启发我们引入一个底大顶小的单调栈，入栈时不断比较栈顶元素直到找到一个比当前元素大的</p><p>技巧：事先压入一个边界元素到栈底，这样保证循环时栈一定不会为空，从而简化逻辑</p><p>一些转换：</p><ol><li>​ 若区间 [l,r] 的最大值等于 a[r]，则 l 必须 &gt; left[r]</li><li>​ 若区间 [l,r] 的最大值等于 a[l]，则 r 必须 &lt; right[l]</li><li>​ 这一结论可以用于思考一些双变量的题目</li></ol>',7),m={href:"https://oi-wiki.org/ds/monotonous-stack/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://cp-algorithms.com/data_structures/stack_queue_modification.html",target:"_blank",rel:"noopener noreferrer"},k=s("h2",{id:"模板题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#模板题","aria-hidden":"true"},"#"),n(" 模板题")],-1),h={href:"https://www.luogu.com.cn/problem/P5788",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.luogu.com.cn/problem/P2866",target:"_blank",rel:"noopener noreferrer"},g={href:"http://poj.org/problem?id=3250",target:"_blank",rel:"noopener noreferrer"},b={href:"https://leetcode-cn.com/problems/next-greater-element-i/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://leetcode-cn.com/problems/next-greater-element-ii/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=825&page=show_problem&problem=4494",target:"_blank",rel:"noopener noreferrer"},y=s("h2",{id:"计算贡献",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#计算贡献","aria-hidden":"true"},"#"),n(" 计算贡献")],-1),f={href:"https://leetcode.cn/problems/sum-of-subarray-minimums/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://leetcode.cn/problems/maximum-subarray-min-product/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://leetcode.cn/problems/sum-of-subarray-ranges/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/sum-of-total-strength-of-wizards/",target:"_blank",rel:"noopener noreferrer"},L=s("h2",{id:"与-dp-结合",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#与-dp-结合","aria-hidden":"true"},"#"),n(" 与 DP 结合")],-1),R={href:"https://codeforces.com/problemset/problem/5/E",target:"_blank",rel:"noopener noreferrer"},j={href:"https://codeforces.com/problemset/problem/1313/C2",target:"_blank",rel:"noopener noreferrer"},C={href:"https://codeforces.com/problemset/problem/1407/D",target:"_blank",rel:"noopener noreferrer"},M=s("h2",{id:"结合线段树-或者巧妙地在单调栈中去维护最值",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#结合线段树-或者巧妙地在单调栈中去维护最值","aria-hidden":"true"},"#"),n(" 结合线段树，或者巧妙地在单调栈中去维护最值")],-1),D={href:"https://codeforces.com/problemset/problem/1483/C",target:"_blank",rel:"noopener noreferrer"},E={href:"https://leetcode.cn/problems/maximum-number-of-books-you-can-take/",target:"_blank",rel:"noopener noreferrer"},I=s("h2",{id:"其他",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#其他","aria-hidden":"true"},"#"),n(" 其他")],-1),O={href:"https://leetcode-cn.com/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/",target:"_blank",rel:"noopener noreferrer"},S={href:"http://poj.org/problem?id=2559",target:"_blank",rel:"noopener noreferrer"},B={href:"http://poj.org/problem?id=2082",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode-cn.com/problems/maximal-rectangle/",target:"_blank",rel:"noopener noreferrer"},N={href:"http://poj.org/problem?id=3494",target:"_blank",rel:"noopener noreferrer"},q={href:"https://leetcode-cn.com/problems/count-submatrices-with-all-ones/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://codeforces.com/edu/course/2/lesson/2/5/practice/contest/269656/problem/D",target:"_blank",rel:"noopener noreferrer"},G={href:"https://codeforces.com/problemset/problem/875/D",target:"_blank",rel:"noopener noreferrer"},T={href:"https://codeforces.com/problemset/problem/1158/C",target:"_blank",rel:"noopener noreferrer"},H=s("h2",{id:"单调栈例题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#单调栈例题","aria-hidden":"true"},"#"),n(" 单调栈例题")],-1),K=s("thead",null,[s("tr",null,[s("th",null,"题号题目"),s("th",null,"题目类型"),s("th",null,"难度"),s("th",null,"说明")])],-1),U={href:"https://leetcode.cn/problems/next-greater-element-i/",title:"496. 下一个更大元素 I",target:"_blank",rel:"noopener noreferrer"},W=s("td",null,"模板题",-1),Y=s("td",null,"简单",-1),Z=s("td",null,"单调栈模板 从后往前维护一个单调递减栈",-1),$={href:"https://leetcode.cn/problems/next-greater-element-ii/",target:"_blank",rel:"noopener noreferrer"},F=s("td",null,"模板题",-1),J=s("td",null,"中等",-1),Q=s("td",null,"长度为2n-1 同496",-1),X={href:"https://leetcode.cn/problems/sum-of-subarray-minimums/",target:"_blank",rel:"noopener noreferrer"},ss=s("td",null,"计算贡献",-1),ns=s("td",null,"中等",-1),as=s("td",null,"从左往右遍历+从右往左遍历 计算贡献值",-1),ts={href:"https://leetcode.cn/problems/maximum-subarray-min-product/",target:"_blank",rel:"noopener noreferrer"},es=s("td",null,"计算贡献",-1),ps=s("td",null,"中等",-1),ls=s("td",null,"从左往右遍历+从右往左遍历 计算贡献值 区间和使用前缀和",-1),os={href:"https://leetcode.cn/problems/sum-of-subarray-ranges/",target:"_blank",rel:"noopener noreferrer"},cs=s("td",null,"计算贡献",-1),is=s("td",null,"中等",-1),rs=s("td",null,"维护一个最大值栈和一个最小值栈 同上",-1),ms={href:"https://leetcode.cn/problems/sum-of-total-strength-of-wizards/",target:"_blank",rel:"noopener noreferrer"},us=s("td",null,"计算贡献",-1),ks=s("td",null,"困难",-1),hs=s("td",null,"见下方题解",-1),ds={href:"https://leetcode.cn/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"},gs=s("td",null,"计算贡献",-1),bs=s("td",null,"困难",-1),_s=s("td",null,"从左往右 + 从右往左 记录最大值 答案为当前值-左右的最大值",-1),vs={href:"https://leetcode.cn/problems/next-greater-node-in-linked-list/",target:"_blank",rel:"noopener noreferrer"},ys=s("td",null,"模板题",-1),fs=s("td",null,"中等",-1),ws=s("td",null,"将链表遍历出来 再用496的方法",-1),xs={href:"https://leetcode.cn/problems/daily-temperatures/",target:"_blank",rel:"noopener noreferrer"},zs=s("td",null,"模板题",-1),Ls=s("td",null,"中等",-1),Rs=s("td",null,"存入下标而不是值",-1),js={href:"https://leetcode.cn/problems/remove-duplicate-letters/",target:"_blank",rel:"noopener noreferrer"},Cs=s("td",null,"模板题",-1),Ms=s("td",null,"中等",-1),Ds=s("td",null,"保持递增栈，如果之前的char不是最后一次出现，则被后面的pop掉",-1),Es={href:"https://leetcode.cn/problems/remove-k-digits/",target:"_blank",rel:"noopener noreferrer"},Is=s("td",null,"模板题",-1),Os=s("td",null,"中等",-1),Ps=s("td",null,"生成一个最小递增序列，如果出现更小的数则把前面的pop出去",-1),Ss={href:"https://leetcode.cn/problems/largest-rectangle-in-histogram/",target:"_blank",rel:"noopener noreferrer"},Bs=s("td",null,"计算贡献",-1),Vs=s("td",null,"困难",-1),Ns=s("td",null,"维护一个单调递增栈 递减的时候处理相应高度的矩形面积",-1),qs={href:"https://leetcode.cn/problems/maximal-rectangle/",target:"_blank",rel:"noopener noreferrer"},As=s("td",null,"计算贡献",-1),Gs=s("td",null,"困难",-1),Ts=s("td",null,"基于84 维护一个up down数组",-1),Hs={href:"https://leetcode.cn/problems/count-submatrices-with-all-ones/",target:"_blank",rel:"noopener noreferrer"},Ks=s("td",null,"计算贡献",-1),Us=s("td",null,"中等",-1),Ws=s("td",null,"计算每行的贡献 需要加一个单调栈来削减重复计算的",-1),Ys=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//下一个更大的元素（模板）</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#下一个更大的元素（模板）</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        greater_map <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> nums1<span class="token punctuation">}</span> 
        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>
            <span class="token keyword">while</span> stack <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>
                prev_num <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> prev_num <span class="token keyword">in</span> greater_map<span class="token punctuation">:</span>
                    greater_map<span class="token punctuation">[</span>prev_num<span class="token punctuation">]</span> <span class="token operator">=</span> num
            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
            
        <span class="token keyword">return</span> <span class="token punctuation">[</span>greater_map<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> nums1<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2281.巫师的总力量和</p><p>1.首先需要一个前缀和数组来简化查询区间内和</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//2281. 巫师的总力量和</span>

<span class="token comment">//1.首先需要一个前缀和数组来简化查询区间内和</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//例 1 3 2 7 5</span>
<span class="token comment">//sum：0 1 4 6 13 18</span>
<span class="token comment">//则查询[L,R]区间和为 sum[R+1] - sum[L] </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.如何求[L,R]范围所有子数组的和呢</p>`,6),Zs=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"r"),s("mo",null,"="),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"R"),s("mo",null,"+"),s("mn",null,"1")])]),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"l"),s("mo",null,"="),s("mi",null,"L")]),s("mi",null,"i")]),s("mo",{stretchy:"false"},"("),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"r"),s("mo",{stretchy:"false"},"]"),s("mo",null,"−"),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"\\sum_{r=i+1}^{R+1}\\sum_{l=L}^{i} (s[r]-s[l])")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3393em","vertical-align":"-0.358em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9812em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.358em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9646em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"L")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mclose"},"])")])])])],-1),$s=s("p",null,"取一个i∈L-1，R 对其求在i+1到R上的和 再求和即可",-1),Fs=s("p",null,"上式子可转化为",-1),Js=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"r"),s("mo",null,"="),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"R"),s("mo",null,"+"),s("mn",null,"1")])]),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"l"),s("mo",null,"="),s("mi",null,"L")]),s("mi",null,"i")]),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"r"),s("mo",{stretchy:"false"},"]"),s("mo",null,"−"),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"r"),s("mo",null,"="),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"R"),s("mo",null,"+"),s("mn",null,"1")])]),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"l"),s("mo",null,"="),s("mi",null,"L")]),s("mi",null,"i")]),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\sum_{r=i+1}^{R+1}\\sum_{l=L}^{i} s[r]-\\sum_{r=i+1}^{R+1}\\sum_{l=L}^{i}s[l]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3393em","vertical-align":"-0.358em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9812em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.358em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9646em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"L")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3393em","vertical-align":"-0.358em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9812em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.358em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9646em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"L")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mclose"},"]")])])])],-1),Qs=s("p",null,"再转化为",-1),Xs=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mi",null,"L"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"r"),s("mo",null,"="),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1")]),s("mrow",null,[s("mi",null,"R"),s("mo",null,"+"),s("mn",null,"1")])]),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"r"),s("mo",{stretchy:"false"},"]"),s("mo",null,"−"),s("mo",{stretchy:"false"},"("),s("mi",null,"R"),s("mo",null,"−"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"l"),s("mo",null,"="),s("mi",null,"L")]),s("mi",null,"i")]),s("mi",null,"s"),s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"(i-L+1)\\sum_{r=i+1}^{R+1} s[r]-(R-i+1)\\sum_{l=L}^{i}s[l]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.3393em","vertical-align":"-0.358em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9812em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.358em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.2643em","vertical-align":"-0.2997em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9646em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mathnormal mtight"},"L")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mclose"},"]")])])])],-1),sn=e(`<p>所以还需要求前缀和的前缀和</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ssum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ssum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//例0 1 4 6 13 18</span>
<span class="token comment">//ssum:0 1 5 11 24 42</span>
<span class="token comment">//则查询[L,R]区间的和为ssum[R+1]-ssum[L] </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以上式子可转化为</p>`,3),nn=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"i"),s("mo",null,"−"),s("mi",null,"L"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"("),s("mi",null,"s"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"m"),s("mo",{stretchy:"false"},"["),s("mi",null,"R"),s("mo",null,"+"),s("mn",null,"2"),s("mo",{stretchy:"false"},"]"),s("mo",null,"−"),s("mi",null,"s"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"m"),s("mo",{stretchy:"false"},"["),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},")"),s("mo",null,"−"),s("mo",{stretchy:"false"},"("),s("mi",null,"R"),s("mo",null,"−"),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},"("),s("mi",null,"s"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"m"),s("mo",{stretchy:"false"},"["),s("mi",null,"i"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]"),s("mo",null,"−"),s("mi",null,"s"),s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"m"),s("mo",{stretchy:"false"},"["),s("mi",null,"L"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(i-L+1)(ssum[R+2]-ssum[i+1])-(R-i+1)(ssum[i+1]-ssum[L])")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"ss"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"ss"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"])"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"ss"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"ss"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mopen"},"["),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mclose"},"])")])])])],-1),an=e(`<p>故结果为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">long</span> <span class="token constant">MOD</span> <span class="token operator">=</span> <span class="token number">1000000007L</span><span class="token punctuation">;</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ssum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//求前缀和的前缀和</span>
        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            ssum<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ssum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">MOD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//单调栈求left right 左侧为严格小于 右侧为小于等于都可 排除重复数字影响</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stack<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>nums<span class="token punctuation">.</span>length<span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//计算答案 前缀和中的left为区间L-1 right为R+1 故需要减掉</span>
        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> l <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> r <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ssum<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> ssum<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ssum<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> ssum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">MOD</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> tmp<span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">MOD</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//避免出现负数</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token operator">+</span><span class="token constant">MOD</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token constant">MOD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function tn(en,pn){const a=c("ExternalLinkIcon");return l(),o("div",null,[r,s("p",null,[s("a",m,[n("单调栈定义"),t(a)])]),s("p",null,[s("a",u,[n("C++单调栈实现"),t(a)])]),k,s("ul",null,[s("li",null,[s("a",h,[n("https://www.luogu.com.cn/problem/P5788"),t(a)])]),s("li",null,[s("a",d,[n("https://www.luogu.com.cn/problem/P2866"),t(a)]),n(),s("a",g,[n("http://poj.org/problem?id=3250"),t(a)])]),s("li",null,[s("a",b,[n("https://leetcode-cn.com/problems/next-greater-element-i/"),t(a)]),n(" LC496/周赛18BA")]),s("li",null,[s("a",_,[n("https://leetcode-cn.com/problems/next-greater-element-ii/"),t(a)]),n(" LC503/周赛18BB")]),s("li",null,[s("a",v,[n("https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=825&page=show_problem&problem=4494"),t(a)]),n(" NEERC05，UVa 1619")])]),y,s("ul",null,[s("li",null,[s("p",null,[n("LC907 "),s("a",f,[n("https://leetcode.cn/problems/sum-of-subarray-minimums/"),t(a)])])]),s("li",null,[s("p",null,[n("LC1856 "),s("a",w,[n("https://leetcode.cn/problems/maximum-subarray-min-product/"),t(a)])])]),s("li",null,[s("p",null,[n("LC2104 "),s("a",x,[n("https://leetcode.cn/problems/sum-of-subarray-ranges/"),t(a)])])]),s("li",null,[s("p",null,[n("LC2281 "),s("a",z,[n("https://leetcode.com/problems/sum-of-total-strength-of-wizards/"),t(a)])])])]),L,s("ul",null,[s("li",null,[s("p",null,[s("a",R,[n("https://codeforces.com/problemset/problem/5/E"),t(a)])])]),s("li",null,[s("p",null,[s("a",j,[n("https://codeforces.com/problemset/problem/1313/C2"),t(a)])])]),s("li",null,[s("p",null,[s("a",C,[n("https://codeforces.com/problemset/problem/1407/D"),t(a)])])])]),M,s("ul",null,[s("li",null,[s("a",D,[n("https://codeforces.com/problemset/problem/1483/C"),t(a)])]),s("li",null,[n("LC2355 "),s("a",E,[n("https://leetcode.cn/problems/maximum-number-of-books-you-can-take/"),t(a)])])]),I,s("ul",null,[s("li",null,[n("LC42 接雨水 "),s("a",O,[n("https://leetcode-cn.com/problems/trapping-rain-water/"),t(a)]),n(" 评注：接雨水有三种不同的解法（DP、单调栈和双指针），其中双指针是 DP 的空间优化写法 本质上是两种计算策略：计算每个下标处的接水量（纵向累加），计算一段高度对应的接水宽度（横向累加）")]),s("li",null,[n("LC84 柱状图中最大的矩形 "),s("a",P,[n("https://leetcode-cn.com/problems/largest-rectangle-in-histogram/"),t(a)]),n(),s("a",S,[n("http://poj.org/problem?id=2559"),t(a)]),n(),s("a",B,[n("http://poj.org/problem?id=2082"),t(a)])]),s("li",null,[n("LC85 最大全 1 矩形（实现见下面的 maximalRectangleArea）"),s("a",V,[n("https://leetcode-cn.com/problems/maximal-rectangle/"),t(a)]),n(" 原题为 "),s("a",N,[n("http://poj.org/problem?id=3494"),t(a)])]),s("li",null,[n("LC1504/周赛196C 全 1 矩形个数（实现见下面的 numSubmat）"),s("a",q,[n("https://leetcode-cn.com/problems/count-submatrices-with-all-ones/"),t(a)])]),s("li",null,[n("后缀数组+不同矩形对应方案数之和 "),s("a",A,[n("https://codeforces.com/edu/course/2/lesson/2/5/practice/contest/269656/problem/D"),t(a)])]),s("li",null,[n("与 bitOpTrickCnt 结合（见 bits.go）"),s("a",G,[n("https://codeforces.com/problemset/problem/875/D"),t(a)])]),s("li",null,[n("已知部分 right 还原全部 right；已知 right 还原 a "),s("a",T,[n("https://codeforces.com/problemset/problem/1158/C"),t(a)])])]),H,s("table",null,[K,s("tbody",null,[s("tr",null,[s("td",null,[s("a",U,[n("496. 下一个更大元素 I"),t(a)])]),W,Y,Z]),s("tr",null,[s("td",null,[s("a",$,[n("503. 下一个更大元素 II"),t(a)])]),F,J,Q]),s("tr",null,[s("td",null,[s("a",X,[n("907. 子数组的最小值之和"),t(a)])]),ss,ns,as]),s("tr",null,[s("td",null,[s("a",ts,[n("1856. 子数组最小乘积的最大值"),t(a)])]),es,ps,ls]),s("tr",null,[s("td",null,[s("a",os,[n("2104. 子数组范围和"),t(a)])]),cs,is,rs]),s("tr",null,[s("td",null,[s("a",ms,[n("2281. 巫师的总力量和"),t(a)])]),us,ks,hs]),s("tr",null,[s("td",null,[s("a",ds,[n("42. 接雨水"),t(a)])]),gs,bs,_s]),s("tr",null,[s("td",null,[s("a",vs,[n("1019. 链表中的下一个更大节点"),t(a)])]),ys,fs,ws]),s("tr",null,[s("td",null,[s("a",xs,[n("739. 每日温度"),t(a)])]),zs,Ls,Rs]),s("tr",null,[s("td",null,[s("a",js,[n("316. 去除重复字母"),t(a)])]),Cs,Ms,Ds]),s("tr",null,[s("td",null,[s("a",Es,[n("402. 移掉 K 位数字"),t(a)])]),Is,Os,Ps]),s("tr",null,[s("td",null,[s("a",Ss,[n("84. 柱状图中最大的矩形"),t(a)])]),Bs,Vs,Ns]),s("tr",null,[s("td",null,[s("a",qs,[n("85. 最大矩形"),t(a)])]),As,Gs,Ts]),s("tr",null,[s("td",null,[s("a",Hs,[n("1504. 统计全 1 子矩形"),t(a)])]),Ks,Us,Ws])])]),Ys,Zs,$s,Fs,Js,Qs,Xs,sn,nn,an])}const on=p(i,[["render",tn],["__file","单调栈.html.vue"]]);export{on as default};
