import{_ as n,V as s,W as a,a0 as e}from"./framework-3845b112.js";const t="/os/image-20221005160310792.png",p="/os/image-20221005210948015.png",o="/os/image-20221005214526462.png",c="/os/image-20221006203230816.png",i="/os/image-20221006210345024.png",l={},d=e('<p>Linux的设计哲学是「<strong>一切皆文件</strong>」。也就是说，Linux系统中的一切实体都可以抽象为文件这一概念。所以，先了解一下Linux是怎样实现<strong>文件</strong>这一概念是相对重要的。</p><p>接下来我们将从以下几点综观Linux的文件系统是进行如何工作的</p><h2 id="_1-文件系统的结构" tabindex="-1"><a class="header-anchor" href="#_1-文件系统的结构" aria-hidden="true">#</a> <strong>1.文件系统的结构</strong></h2><p>在文件系统中分配空间的基本单位是逻辑块，逻辑块是文件系统所在的磁盘设备上的多个连续物理存储区间。例如，在ext2文件系统上的逻辑块大小为1024、2048或4096字节。</p><figure><img src="'+t+`" alt="image-20221005160310792" tabindex="0" loading="lazy"><figcaption>image-20221005160310792</figcaption></figure><p><strong>Boot Block</strong>：启动块并没有被文件系统使用。其中包含的是用于引导操作系统的信息。尽管操作系统只需要一个引导块，但所有文件系统都有一个引导块(其中大多数是未使用的)。</p><p><strong>Superblock</strong>:这是一个单独的块，紧挨着引导块，它包含关于文件系统的参数信息，包括:</p><ul><li>inode表的总量、使用量、剩余量（通过位图标识）等;</li><li>data block的总量、使用量、剩余量（通过位图标识）等;</li><li>文件系统格式等。</li></ul><p>位于同一物理设备上的不同文件系统可以具有不同的类型和大小，并且具有不同的参数设置(例如，块大小)。这是将磁盘分割为多个分区的原因之一。</p><p><strong>I-node table</strong>:文件系统中的每个文件或目录在I-node表中都有一个唯一的条目。这个条目记录了关于文件的各种信息。</p><p><strong>Data block</strong>:文件系统中的绝大多数空间用于构成文件系统中的文件和目录的数据块。</p><h3 id="i-node-table" tabindex="-1"><a class="header-anchor" href="#i-node-table" aria-hidden="true">#</a> <strong>I-node table</strong></h3><p>文件系统的i-node table为文件系统中的每个文件保存一个i-node指针，指向该文件的地址。</p><p>i-node通过它们在i-node表中的顺序位置进行数字标识。</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/操作系统/文件系统/Unix 多级索引.png" alt="早期 Unix 文件系统" tabindex="0" loading="lazy"><figcaption>早期 Unix 文件系统</figcaption></figure><h3 id="虚拟文件系统-vfs" tabindex="-1"><a class="header-anchor" href="#虚拟文件系统-vfs" aria-hidden="true">#</a> <strong>虚拟文件系统 (VFS)</strong></h3><p>操作系统支持的文件系统有很多，如ext2、ext3、VFAT、NFS等。如果每次实现具体的文件保存需要考虑具体的文件系统的不同实现是相当麻烦的。</p><p>VFS为文件系统操作定义了一个通用接口。所有处理文件的程序都根据这个通用接口指定它们的操作。并且每个文件系统都提供VFS接口的实现。这样，应用程序就只需要和VFS打交道即可实现不同文件系统的操作了。</p><h2 id="_2-进程如何操作文件" tabindex="-1"><a class="header-anchor" href="#_2-进程如何操作文件" aria-hidden="true">#</a> 2.进程如何操作文件</h2><p>对于一个进程而言，对文件的操作一般分为三种类型打开文件、读/写文件、关闭文件。</p><p>操作文件的模式为：</p><p><code>打开文件-&gt;读/写文件-&gt;关闭文件</code></p><p>进程是如何进行这三个操作的呢？</p><p>在此之前，首先要看下在Linux内核中，进程是如何表示的。</p><h3 id="进程中的文件结构" tabindex="-1"><a class="header-anchor" href="#进程中的文件结构" aria-hidden="true">#</a> <strong>进程中的文件结构</strong></h3><p>进程在linux中用<code>task_struct</code>来进行抽象。在task_struct中，关于文件的定义是</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>//linux-master/linux-master/kernel/sched/sched.h
struct task_struct {
    // ...
    struct files_struct     *files;
    // ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是说 每个进程里都会保存一个files的指针 指向一个files_struct的结构体。</p><p>那么这个files_struct的结构体的构成又是什么呢</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//linux-master/linux-master/include/linux/fdtable.h</span>
<span class="token keyword">struct</span> <span class="token class-name">files_struct</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * read mostly part
   */</span>
	<span class="token class-name">atomic_t</span> count<span class="token punctuation">;</span>
	bool resize_in_progress<span class="token punctuation">;</span>
	<span class="token class-name">wait_queue_head_t</span> resize_wait<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">fdtable</span> __rcu <span class="token operator">*</span>fdt<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">fdtable</span> fdtab<span class="token punctuation">;</span>
  <span class="token comment">/*
   * written part on a separate cache line in SMP
   */</span>
	<span class="token class-name">spinlock_t</span> file_lock ____cacheline_aligned_in_smp<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> next_fd<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> close_on_exec_init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> open_fds_init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> full_fds_bits_init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">file</span> __rcu <span class="token operator">*</span> fd_array<span class="token punctuation">[</span>NR_OPEN_DEFAULT<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，有一个<code>fdtable</code>的指针 <code>fdt</code> 和一个<code>fdtable</code>的实例 <code>fdtab</code>。以及一个存储*file类型的数组<code>fd_array</code>以及其他一些与fd操作相关的字段。</p><p>在<code>fd_array</code>中存储的便是进程打开的文件的数组。数组存储的类型 struct *file的文件指针。但是这个数组是固定长度的，如果进程打开了超过该数目的文件，那么就需要通过fdtable对该数组进行动态管理了。</p><p>fdtable的结构如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//linux-master/linux-master/include/linux/fdtable.h</span>
<span class="token keyword">struct</span> <span class="token class-name">fdtable</span> <span class="token punctuation">{</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> max_fds<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">file</span> __rcu <span class="token operator">*</span><span class="token operator">*</span>fd<span class="token punctuation">;</span>      <span class="token comment">/* current fd array */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>close_on_exec<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>open_fds<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>full_fds_bits<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fd</code>字段的类型有点费解，拆开来看fd是一个指向file指针类型的指针。其实该字段指向的就是当前fd_array的地址。也就是说 fd其实就是fd_array这个数组的引用。当与用户态交互的时候，可以通过fdt-&gt;fd[fd]获取该*file指针。</p><p>当一个进程打开的文件数目没有达到max_fds的时候，直接从fdtable里申请新的位置，当超过时，通过申请一个新的fdt数组结构，并把当前打开的进行copy之后，将当前的指针指向新的table完成扩容。这就是fdt指针的作用。</p><figure><img src="`+p+`" alt="image-20221005210948015" tabindex="0" loading="lazy"><figcaption>image-20221005210948015</figcaption></figure><p>了解了这些之后，再尝试看一下内核在打开文件时做的操作</p><h3 id="进程打开文件" tabindex="-1"><a class="header-anchor" href="#进程打开文件" aria-hidden="true">#</a> <strong>进程打开文件</strong></h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">do_sys_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> dfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">umode_t</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">open_flags</span> op<span class="token punctuation">;</span>
        <span class="token comment">/*flag是用户传递的参数，检查合法性并根据mode生成新的flags*/</span>
        <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">build_open_flags</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">filename</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
                <span class="token keyword">return</span> fd<span class="token punctuation">;</span>

        tmp <span class="token operator">=</span> <span class="token function">getname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*申请新的fd*/</span>
        fd <span class="token operator">=</span> <span class="token function">get_unused_fd_flags</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token function">do_filp_open</span><span class="token punctuation">(</span>dfd<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">put_unused_fd</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        fd <span class="token operator">=</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">/*产生打开文件的通知事件*/</span>
                        <span class="token function">fsnotify_open</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">/*将fd和文件管理结构对应起来*/</span>
                        <span class="token function">fd_install</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">putname</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//申请fd的函数</span>
<span class="token comment">/*do_sys_open-&gt;get_unused_fd_flags-&gt;alloc_fd(0, (flags))*/</span>
<span class="token keyword">int</span> <span class="token function">__alloc_fd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">files_struct</span> <span class="token operator">*</span>files<span class="token punctuation">,</span>
               <span class="token keyword">unsigned</span> start<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> end<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
        <span class="token keyword">int</span> error<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">fdtable</span> <span class="token operator">*</span>fdt<span class="token punctuation">;</span>

        <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>files<span class="token operator">-&gt;</span>file_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
repeat<span class="token operator">:</span>
        fdt <span class="token operator">=</span> <span class="token function">files_fdtable</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fd <span class="token operator">=</span> start<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> files<span class="token operator">-&gt;</span>next_fd<span class="token punctuation">)</span>
                fd <span class="token operator">=</span> files<span class="token operator">-&gt;</span>next_fd<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> fdt<span class="token operator">-&gt;</span>max_fds<span class="token punctuation">)</span>
                fd <span class="token operator">=</span> <span class="token function">find_next_fd</span><span class="token punctuation">(</span>fdt<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*
         * N.B. For clone tasks sharing a files structure, this test
         * will limit the total number of files that can be opened.
         */</span>
        error <span class="token operator">=</span> <span class="token operator">-</span>EMFILE<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span>
                <span class="token keyword">goto</span> out<span class="token punctuation">;</span>

        error <span class="token operator">=</span> <span class="token function">expand_files</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">goto</span> out<span class="token punctuation">;</span>

        <span class="token comment">/*
         * If we needed to expand the fs array we
         * might have blocked - try again.
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>
                <span class="token keyword">goto</span> repeat<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> files<span class="token operator">-&gt;</span>next_fd<span class="token punctuation">)</span>
                files<span class="token operator">-&gt;</span>next_fd <span class="token operator">=</span> fd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token function">__set_open_fd</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> fdt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> O_CLOEXEC<span class="token punctuation">)</span>
                <span class="token function">__set_close_on_exec</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> fdt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
                <span class="token function">__clear_close_on_exec</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> fdt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        error <span class="token operator">=</span> fd<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span></span>
        <span class="token comment">/* Sanity check */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rcu_access_pointer</span><span class="token punctuation">(</span>fdt<span class="token operator">-&gt;</span>fd<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">printk</span><span class="token punctuation">(</span>KERN_WARNING <span class="token string">&quot;alloc_fd: slot %d not NULL!\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>fdt<span class="token operator">-&gt;</span>fd<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

out<span class="token operator">:</span>
        <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>files<span class="token operator">-&gt;</span>file_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//将fd和files在fdtable中相关联</span>
<span class="token keyword">void</span> <span class="token function">__fd_install</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">files_struct</span> <span class="token operator">*</span>files<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span>
                <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">fdtable</span> <span class="token operator">*</span>fdt<span class="token punctuation">;</span>

        <span class="token function">might_sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rcu_read_lock_sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>files<span class="token operator">-&gt;</span>resize_in_progress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">rcu_read_unlock_sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">wait_event</span><span class="token punctuation">(</span>files<span class="token operator">-&gt;</span>resize_wait<span class="token punctuation">,</span> <span class="token operator">!</span>files<span class="token operator">-&gt;</span>resize_in_progress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">rcu_read_lock_sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">/* coupled with smp_wmb() in expand_fdtable() */</span>
        <span class="token function">smp_rmb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fdt <span class="token operator">=</span> <span class="token function">rcu_dereference_sched</span><span class="token punctuation">(</span>files<span class="token operator">-&gt;</span>fdt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">BUG_ON</span><span class="token punctuation">(</span>fdt<span class="token operator">-&gt;</span>fd<span class="token punctuation">[</span>fd<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>fdt<span class="token operator">-&gt;</span>fd<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rcu_read_unlock_sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，操作系统通过fdt-&gt;fd[fd]来获取该打开文件的*file指针</p><p>所以说明fd本质上就是fd_array的下标或者说是索引。</p><p>此时也便有了打开文件的系统调用</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">/* mode_t mode */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
								Returns file descriptor on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该系统调用返回的就是文件描述符 也就是fd</p><h3 id="文件的结构" tabindex="-1"><a class="header-anchor" href="#文件的结构" aria-hidden="true">#</a> 文件的结构</h3><p>在前面讲到fd就是fd_array的索引，fd_array中存储的变量为*file结构体，那么这个 *file结构体又是什么样子的结构呢？</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token punctuation">{</span>
	<span class="token keyword">union</span> <span class="token punctuation">{</span>
		<span class="token keyword">struct</span> <span class="token class-name">llist_node</span>	f_llist<span class="token punctuation">;</span>
		<span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> 	f_rcuhead<span class="token punctuation">;</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">int</span> 		f_iocb_flags<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    
	<span class="token keyword">struct</span> <span class="token class-name">path</span>		f_path<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">inode</span>		<span class="token operator">*</span>f_inode<span class="token punctuation">;</span>	<span class="token comment">/* cached value */</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span>	<span class="token operator">*</span>f_op<span class="token punctuation">;</span>

	<span class="token comment">/*
	 * Protects f_ep, f_flags.
	 * Must not be taken from IRQ context.
	 */</span>
	<span class="token class-name">spinlock_t</span>		f_lock<span class="token punctuation">;</span>
	<span class="token class-name">atomic_long_t</span>		f_count<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> 		f_flags<span class="token punctuation">;</span>
	<span class="token class-name">fmode_t</span>			f_mode<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">mutex</span>		f_pos_lock<span class="token punctuation">;</span>
	<span class="token class-name">loff_t</span>			f_pos<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">fown_struct</span>	f_owner<span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span>	<span class="token operator">*</span>f_cred<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">file_ra_state</span>	f_ra<span class="token punctuation">;</span>

	u64			f_version<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SECURITY</span></span>
	<span class="token keyword">void</span>			<span class="token operator">*</span>f_security<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	<span class="token comment">/* needed for tty driver, and maybe others */</span>
	<span class="token keyword">void</span>			<span class="token operator">*</span>private_data<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_EPOLL</span></span>
	<span class="token comment">/* Used by fs/eventpoll.c to link all the hooks to this file */</span>
	<span class="token keyword">struct</span> <span class="token class-name">hlist_head</span>	<span class="token operator">*</span>f_ep<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* #ifdef CONFIG_EPOLL */</span></span>
	<span class="token keyword">struct</span> <span class="token class-name">address_space</span>	<span class="token operator">*</span>f_mapping<span class="token punctuation">;</span>
	<span class="token class-name">errseq_t</span>		f_wb_err<span class="token punctuation">;</span>
	<span class="token class-name">errseq_t</span>		f_sb_err<span class="token punctuation">;</span> <span class="token comment">/* for syncfs */</span>
<span class="token punctuation">}</span> __randomize_layout
  <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>f_path</code>：标识该文件地址，也就是文件名</p><p><code>f_inode</code>：VFS系统的inode指针</p><p><code>f_pos</code>：文件的偏移量</p><p>首先需要明确，这个*file类型的指针不是只属于某个进程的，而是在全局对所有的进程共享的。</p><p>试想一种情况，如果一个进程对某个文件进行写操作，而另一个也进行写操作，这样是会导致错误的发生的。所以需要用一些同步锁的手段保证不会产生同时写的操作。所以*file 应该是全局所有进程共享的。</p><p>那么，我们如何通过file结构体找到我们想要打开的文件呢？</p><p>答案在inode结构体当中，inode保存了一些文件的基本信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文件相关的基本信息（权限，模式，uid，gid等）</span>
    <span class="token class-name">umode_t</span>             i_mode<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>      i_opflags<span class="token punctuation">;</span>
    <span class="token class-name">kuid_t</span>              i_uid<span class="token punctuation">;</span>
    <span class="token class-name">kgid_t</span>              i_gid<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>        i_flags<span class="token punctuation">;</span>
    <span class="token comment">// 回调函数</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">inode_operations</span>   <span class="token operator">*</span>i_op<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">super_block</span>              <span class="token operator">*</span>i_sb<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">address_space</span>            <span class="token operator">*</span>i_mapping<span class="token punctuation">;</span>
    <span class="token comment">// 文件大小，atime，ctime，mtime等</span>
    <span class="token class-name">loff_t</span>              i_size<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec64</span>   i_atime<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec64</span>   i_mtime<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec64</span>   i_ctime<span class="token punctuation">;</span>
    <span class="token comment">// 回调函数</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span>    <span class="token operator">*</span>i_fop<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">address_space</span>            i_data<span class="token punctuation">;</span>
    <span class="token comment">// 指向后端具体文件系统的特殊数据</span>
    <span class="token keyword">void</span>    <span class="token operator">*</span>i_private<span class="token punctuation">;</span>     <span class="token comment">/* fs or device private pointer */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何通过VFS的inode拿到具体实现的文件系统的inode呢？</p><p>以ext4举例</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">ext4_inode_info</span> <span class="token punctuation">{</span>
    <span class="token comment">// ext4 inode 特色字段</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">struct</span> <span class="token class-name">inode</span>    vfs_inode<span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在ext4的inode info结构体里已经包含了inode字段</p><p>那么已知该字段在该结构体中的偏移量，我们就可以通过类型强制转换的方式拿到ext4结构体的地址</p><p>假设偏移量为64 vfs inode 的地址为0xa89be0</p><p>那么具体文件系统的结构体地址就为</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext4_inode_info</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xa89be0</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="image-20221005214526462" tabindex="0" loading="lazy"><figcaption>image-20221005214526462</figcaption></figure><p>通过这样的方式，我们就找到了具体文件管理系统下面的具体的文件的结构体。</p><h3 id="进程读文件" tabindex="-1"><a class="header-anchor" href="#进程读文件" aria-hidden="true">#</a> 进程读文件</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
							Returns number of bytes read<span class="token punctuation">,</span> <span class="token number">0</span> on <span class="token constant">EOF</span><span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Count参数指定要读取的最大字节数。(SIZE_T数据类型是无符号整数类型。)。BUFFER参数提供要放置输入数据的内存缓冲区的地址。此缓冲区必须至少有计数字节长。</p><p>系统调用不会为用于向调用方返回信息的缓冲区分配内存。相反，我们必须传递一个指向先前分配的正确大小的内存缓冲区的指针。这与一些库函数不同，这些库函数确实会分配内存缓冲区，以便向调用方返回信息。</p><h3 id="进程写文件" tabindex="-1"><a class="header-anchor" href="#进程写文件" aria-hidden="true">#</a> 进程写文件</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
									Returns number of bytes written<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>write尝试从buf写入count个字节到文件描述符fd所指的文件，并返回成功写入的字节数，同时将文件偏移向前移动相同字节数。write有可能写入比指定count少的字节数。</p><p>write本质上是把用户态缓存区的数据写入内核态缓存。</p><h3 id="进程关闭文件" tabindex="-1"><a class="header-anchor" href="#进程关闭文件" aria-hidden="true">#</a> 进程关闭文件</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
 												Returns <span class="token number">0</span> on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件的偏移量" tabindex="-1"><a class="header-anchor" href="#文件的偏移量" aria-hidden="true">#</a> 文件的偏移量</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token class-name">off_t</span> <span class="token function">lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
							   Returns new file offset <span class="token keyword">if</span> successful<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在写入和读取的文件的时候，是通过偏移量所在的位置进行读和写的。</p><h2 id="_3-特殊文件的封装" tabindex="-1"><a class="header-anchor" href="#_3-特殊文件的封装" aria-hidden="true">#</a> <strong>3.特殊文件的封装</strong></h2><p>Linux秉持「<strong>一切皆文件</strong>」的设计哲学，对于所有的文件都可以按照这个模式进行操作</p><p><code>打开文件-&gt;读/写文件-&gt;关闭文件</code></p><p>对于一些特殊的文件，Linux是如何进行封装的呢？</p><h2 id="对socket的封装" tabindex="-1"><a class="header-anchor" href="#对socket的封装" aria-hidden="true">#</a> 对Socket的封装</h2><p>我们知道，在Linux中 Socket也被抽象成了文件的方式处理。那么Linux是如何做到的呢？</p><p>对于一个C/S体系而言，一般对于服务端和客户端，所使用的socket模式一般是这样</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>服务端
socket = socket()
socket.bind()
socket.listen()
socket.accept()
wirte/read
socket.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>客户端
socket = socket()
socket.connect()
write/read
socket.close()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个过程中，服务端的socket是被动等待连接的，而客户端的socket是要主动发送连接请求的。这个区别主要是在系统调用中实现的</p><p>socket也能像一个文件一样进行打开、读写、关闭的操作。</p><h3 id="打开一个socket" tabindex="-1"><a class="header-anchor" href="#打开一个socket" aria-hidden="true">#</a> 打开一个socket</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
									   Returns file descriptor on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用该方法会创建一个主动的普通socket</p><p>具体而言</p><p>首先调用 <code>socket_create</code> 函数创建好 <code>struct socket</code> ，还有与之关联的 <code>socket sock</code> 结构，再往下就是具体网络协议对应的结构体</p><p>调用 <code>sock_map_fd</code> 函数创建好 <code>struct file</code> 这个结构体，并与第一步创建出的 <code>struct socket</code> 关联起来；</p><p>这个struct file结构体在之前的结构中有讲到 在fd_array中存储的就是指向该结构体的指针 而fd就为该数组的索引也就是下标，这样，我们就把file结构体和实际的socket相关联了起来。</p><p><code>sock_create</code> 函数里，会根据协议族查找对应的操作表，以 AF_INET 协议族举例，<code>pf-&gt;create</code> 是 <code>inet_create</code> ，主要做两件事：</p><ol><li>把 <code>sock-&gt;ops</code> 按照协议类型赋值成<strong>具体的函数操作表</strong>，比如 tcp 的就是 <code>inet_stream_ops</code> ；</li><li>创建了 <code>struct sock</code> 对象，并且把 <code>struct sock</code> 初始化，并和 <code>struct socket</code> 进行关联；</li></ol><p>着重提一点，<code>sock_init_data</code> 函数（ <code>net/core/sock.c</code> ）主要是初始化 <code>struct sock</code> 结构体的，提两点最关键的：</p><p><strong>第一步：初始化接收队列和发送队列</strong></p><p>每个socket包含一个接收队列和一个发送队列，也就是在内核中开辟一篇缓存供发送和接收数据使用。</p><ul><li>sk_receive_queue：socket接收到的数据（sk_buff 里面是纯粹的用户数据哦，没有 header 啥信息）；</li><li>sk_write_queue：socket要发送的数据；</li><li>sk_error_queue：挂接一些 pengding 的 error 信息；</li></ul><p><strong>第二步：设置socket 的唤醒回调方式</strong>；</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>   sk-&gt;sk_data_ready   =   sock_def_readable;
   sk-&gt;sk_write_space  =   sock_def_write_space;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么这里很重要，因为这个跟 socket fd 可读可写的判断逻辑，数据到了之后的唤醒路径息息相关。简述下回调链路（以套接字层为主干，其他的流程简略描述）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sk-&gt;sk_data_ready（数据到了，该通知留下过联系方式的人了）
tcp_v4_rcv（具体协议栈处理函数）
软中断
硬中断
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>再说下结构体：</strong></p><p>继续说 <code>struct sock</code> ，这个对象有意思了，这个也是以组合的方式往下兼容的，同一个地址强转类型得到不同层面的结构体。原理就在于：他们是一块连续的内存空间，起始地址相同。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sock -&gt; inet_sock -&gt; inet_connection_sock-&gt; tcp_sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><code>struct socket</code> 和 <code>struct sock</code> 是两个不同的结构体</strong>属于<strong>套接字层</strong>的两个维度的描述，一个面向上层，一个面向下层。</p><p><code>struct socket</code> 在内核的注释为：</p><blockquote><p>struct socket - general BSD socket</p></blockquote><p><code>struct sock</code> 在内核的注释为：</p><blockquote><p>struct sock_common - minimal network layer representation of sockets</p></blockquote><p><code>struct socket</code> 是内核抽象出的一个通用结构体，主要作用是放置了一些跟 fs 相关的字段，而真正跟网络通信相关的字段结构体是 <code>struct sock</code> 。它们内部有相互的指针，可以获取到对方的地址。</p><p><code>struct socket</code> 这个字段出生的时候其实就和一个 inode 结构体伴生出来的，由 socketfs 的 <code>sock_alloc_inode</code> 函数分配。</p><p><code>struct sock</code> 这个结构体是 socket 套阶字核心的结构（注意，还有个结构是 <code>struct socket</code>，这两个是不同的结构体哦）。这个是对底下具体协议做的一层抽象封装，比如在分配 <code>struct sock</code> 的时候，如果是 tcp 协议，那么 <code>sk-&gt;sk_prot</code> 会赋值为 <code>tcp_prot</code> ，udp 协议赋值的是 <code>udp_prot</code> ，之后的一系列协议解析和处理就是调用到对应协议的回调函数。</p><p>**为什么socketfd 可以像文件一样调用 <code>write(fd,args)</code> **</p><p><code>write(fd, args)</code> 进到内核首先是到 vfs 层，也就是调用到 <code>vfs_write</code> ，在这个里面首先获取到 <code>file</code> 这个结构体，然后调用下层注册的回调，比如 <code>file-&gt;f_op-&gt;write_iter</code> ，<code>file-&gt;f_op-&gt;write</code> ，所以，关键在如何调用的<code>file-&gt;f_op</code> 这个字段。</p><p>该字段赋值是根据所谓file的类型决定的，不同的类型的file会被赋予不同的值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>vfs_write    <span class="token operator">=</span><span class="token operator">&gt;</span>  
                <span class="token operator">-&gt;</span> socket_file_ops （sockfs）
                <span class="token operator">-&gt;</span> ext2_file_operations （ext2）
                <span class="token operator">-&gt;</span> ext4_file_operations （ext4）
                <span class="token operator">-&gt;</span> eventfd_fops 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这个socket_file_ops结构体就是</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> socket_file_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>llseek <span class="token operator">=</span>   no_llseek<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>read_iter <span class="token operator">=</span>    sock_read_iter<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write_iter <span class="token operator">=</span>   sock_write_iter<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>poll <span class="token operator">=</span>     sock_poll<span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以调用write方法时，通过vfs系统，实际调用的是sock_write_iter这个方法，而这个方法直接接入网络处理的方向去了。</p><h3 id="给socket绑定端口" tabindex="-1"><a class="header-anchor" href="#给socket绑定端口" aria-hidden="true">#</a> 给socket绑定端口</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
													 Returns <span class="token number">0</span> on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sockfd</code>参数是从先前对Socket()的调用中获得的文件描述符。</p><p><code>addr</code>参数是指向指定此套接字要绑定到的地址的结构的指针。</p><p>内核通过sockfd找到对应的struct socket结构体</p><p>通过内部的sock-&gt;ops-&gt;bind函数把addr和socket进行绑定</p><h3 id="监听socket绑定的端口" tabindex="-1"><a class="header-anchor" href="#监听socket绑定的端口" aria-hidden="true">#</a> 监听socket绑定的端口</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
 													Returns <span class="token number">0</span> on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时操作系统会将普通的socket转化为监听socket</p><p>首先通过fd找到该struct socket结构体 并且调用sock-&gt;ops中的listen函数</p><p>而该listen函数做了几件事</p><p><strong>初始化请求队列</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">reqsk_queue_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">request_sock_queue</span> <span class="token operator">*</span>queue<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-&gt;</span>rskq_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token operator">-&gt;</span>fastopenq<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
	queue<span class="token operator">-&gt;</span>fastopenq<span class="token punctuation">.</span>rskq_rst_head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	queue<span class="token operator">-&gt;</span>fastopenq<span class="token punctuation">.</span>rskq_rst_tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	queue<span class="token operator">-&gt;</span>fastopenq<span class="token punctuation">.</span>qlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	queue<span class="token operator">-&gt;</span>rskq_accept_head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 全连接队列</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>套接字状态设置成 <code>TCP_LISTEN</code>；</strong></p><p><strong>获取到之前socket绑定的端口，如果没有设置，那么就会用个临时的端口；</strong></p><p><strong>把监听套接字加入到全局 hash 表中；</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">inet_hash</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment">// 刚才状态已经是TCP_LISTEN了</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token operator">-&gt;</span>sk_state <span class="token operator">!=</span> TCP_CLOSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">local_bh_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		err <span class="token operator">=</span> <span class="token function">__inet_hash</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">local_bh_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">__inet_hash</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>osk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">inet_hashinfo</span> <span class="token operator">*</span>hashinfo <span class="token operator">=</span> sk<span class="token operator">-&gt;</span>sk_prot<span class="token operator">-&gt;</span>h<span class="token punctuation">.</span>hashinfo<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">inet_listen_hashbucket</span> <span class="token operator">*</span>ilb<span class="token punctuation">;</span>
	<span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token comment">// TCP状态一定是TCP_LISTEN，不满足此条件</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token operator">-&gt;</span>sk_state <span class="token operator">!=</span> TCP_LISTEN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">inet_ehash_nolisten</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> osk<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">WARN_ON</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sk_unhashed</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ilb <span class="token operator">=</span> <span class="token operator">&amp;</span>hashinfo<span class="token operator">-&gt;</span>listening_hash<span class="token punctuation">[</span><span class="token function">inet_sk_listen_hashfn</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ilb<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token operator">-&gt;</span>sk_reuseport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> <span class="token function">inet_reuseport_add_sock</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> ilb<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token keyword">goto</span> unlock<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
        <span class="token comment">// 加入全局hash表</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_IPV6<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sk<span class="token operator">-&gt;</span>sk_reuseport <span class="token operator">&amp;&amp;</span>
		sk<span class="token operator">-&gt;</span>sk_family <span class="token operator">==</span> AF_INET6<span class="token punctuation">)</span>
		<span class="token function">__sk_nulls_add_node_tail_rcu</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ilb<span class="token operator">-&gt;</span>nulls_head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token function">__sk_nulls_add_node_rcu</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ilb<span class="token operator">-&gt;</span>nulls_head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">inet_hash2</span><span class="token punctuation">(</span>hashinfo<span class="token punctuation">,</span> sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
	ilb<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">sock_set_flag</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> SOCK_RCU_FREE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sock_prot_inuse_add</span><span class="token punctuation">(</span><span class="token function">sock_net</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">,</span> sk<span class="token operator">-&gt;</span>sk_prot<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
unlock<span class="token operator">:</span>
	<span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ilb<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与客户端的socket建立连接" tabindex="-1"><a class="header-anchor" href="#与客户端的socket建立连接" aria-hidden="true">#</a> 与客户端的socket建立连接</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
									   Returns file descriptor on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>inet_accept （ <code>net/ipv4/af_inet.c</code> ）注释：</p><blockquote><p>Accept a pending connection. The TCP layer now gives BSD semantics.</p></blockquote><p>这个主要是从队列 <code>icsk-&gt;icsk_accept_queue</code> 中取请求，如果队列为空，就看 socket 是否设置了非阻塞标识，非阻塞的就直接报错 EAGAIN，否则阻塞线程等待。</p><p>所以，监听套接字的可读事件是啥？</p><p>icsk_accept_queue 队列非空。</p><p>这个队列什么时候被填充的？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tcp_child_process
    -&gt; tcp_rcv_state_process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个也是底层网络协议回调往上调用的，tcp 三次握手之后，建立好的连接就在一个队列中 accept_queue ，队列非空则为只读。由 tcp 的协议栈往上调用，对应到 socket 层，还是会调用到 <code>sk-&gt;sk_data_ready</code> 。</p><p>这里还是以 epoll 管理监听套接字来举例。这个跟上面讲的数据来了一样，都是把挂接在 socket 本身上的 wait 对象进行唤醒（调用回调），这样就会到 <code>ep_poll_callback</code> ，<code>ep_poll_callback</code> 就会把监听套接字对应的 ep_item 挂到 epoll 的 ready 队列中，并且唤醒阻塞在 epoll_wait 的线程，从而实现了监听套接字的读事件的触发的流程。</p><p>关于accept()需要理解的关键点是它创建了一个新的socket，并且正是这个新socket与客户端的Connect()的对等socket相连接。accept的返回值即为该socket的fd。而此时，之前监听的socket(Sockfd)仍然保持打开状态，可用于接受进一步的连接。</p><p>所以在服务端建立连接的过程中，实际上创建了两个socket，一个负责监听来自于客户端的连接，通过bind/listen创建并使用，另一个是与客户端建立端口对端口的连接的socket，其fd由accept系统调用返回。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>1.在Linux中 socket也能像文件一样通过fd调用，并且可以open-&gt;read/write-&gt;close，这得益于vfs中的file结构体中做得处理，将read&amp;write等操作转移</p><p>2.socket分为监听socket和普通socket，调用socket()时创建的是普通socket，在进行listen之后，转变为监听socket。监听套接字一般只监听可读事件，关注连接的建立，普通套接字走数据流，关注数据的读写事件；</p><p>3.因为socket实现了poll接口，所以socket文件可以用epoll管理socketfd，这也是之后实现多路复用的重要原理。</p><h2 id="对目录的封装" tabindex="-1"><a class="header-anchor" href="#对目录的封装" aria-hidden="true">#</a> 对目录的封装</h2><p>在Linux中，目录以与常规文件类似的方式存储在文件系统中。</p><p>但是目录与常规文件有两个区别：</p><p>在全局的inode表中，目录被标记为不同的文件类型，</p><p>目录在本质上是一个由文件名和inode编号组成的文件</p><figure><img src="`+c+'" alt="image-20221006203230816" tabindex="0" loading="lazy"><figcaption>image-20221006203230816</figcaption></figure><p>尽管进程可以打开目录，但它不能使用Read()来读取目录的内容。若要检索目录的内容，进程必须改用本章后面讨论的系统调用和库函数。(在某些UNIX实现中，可以对目录执行Read()，但这是不可移植的。)。进程也不能使用WRITE()直接更改目录的内容；它只能使用诸如Open()(创建新文件)、link()、mkdir()、symlink()、unlink()和rmdir()等系统调用间接(即请求内核)更改内容。I-node表从1开始编号，而不是从0开始编号，因为目录条目的i-node字段中的0表示该条目未使用。I节点1用于在文件系统中记录坏块。文件系统的根目录(/)总是存储在i-node条目2中，因此内核在解析路径名时知道从哪里开始。</p><p>只有当i节点的链接计数降至0时，即当文件的所有名称都已删除时，才会删除(释放)文件的inode条目和数据块。总而言之：rm命令从目录列表中删除文件名，将相应i-node的链接计数减1，并且如果链接计数因此而降至0，则释放i-node及其引用的数据块。文件的所有名称(链接)都是等价的--没有一个名称(例如，第一个)的优先级高于任何其他名称。正如我们在上面的示例中看到的，在删除了与文件相关联的第一个名称之后，物理文件仍然存在，但随后只能通过另一个名称访问它。</p><h3 id="软连接和硬连接" tabindex="-1"><a class="header-anchor" href="#软连接和硬连接" aria-hidden="true">#</a> 软连接和硬连接</h3><p>有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过<strong>硬链接（*Hard Link*）</strong> 和<strong>软链接（*Symbolic Link*）</strong> 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。</p><p>硬链接是<strong>多个目录项中的「索引节点」指向一个文件</strong>，也就是指向同一个 inode，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode 数据结构和列表，所以<strong>硬链接是不可用于跨文件系统的</strong>。由于多个目录项都是指向一个 inode，那么<strong>只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。</strong></p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/操作系统/文件系统/硬链接-2.png" alt="硬链接" tabindex="0" loading="lazy"><figcaption>硬链接</figcaption></figure><p>软链接相当于重新创建一个文件，这个文件有<strong>独立的 inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以<strong>软链接是可以跨文件系统的</strong>，甚至<strong>目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</strong></p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/操作系统/文件系统/软链接.png" alt="软链接" tabindex="0" loading="lazy"><figcaption>软链接</figcaption></figure><h2 id="_4-文件i-o" tabindex="-1"><a class="header-anchor" href="#_4-文件i-o" aria-hidden="true">#</a> 4.文件I/O</h2><h2 id="i-o-buffer" tabindex="-1"><a class="header-anchor" href="#i-o-buffer" aria-hidden="true">#</a> I/O buffer</h2><p>为了速度和效率，当操作磁盘文件时，I/O系统调用和标准C库的I/O函数会对磁盘数据进行缓冲。这两种类型的缓冲究竟是如何实现的，它们如何影响应用程序性能？如果禁用这两种类型的缓冲的各种技术会造成什么影响，直接I/O又有什么作用？</p><h3 id="内核缓存区" tabindex="-1"><a class="header-anchor" href="#内核缓存区" aria-hidden="true">#</a> 内核缓存区</h3><p>当进行write()和read()操作磁盘文件的时候，该系统调用并不会直接从磁盘进行访问。</p><p>write操作只会将用户态缓存区的数据copy到内核态中的缓存区，之后某个时刻，内核才会将缓存区的数据写入磁盘。也就是说系统调用和磁盘的操作并不是同步的。如果在此时，有进程尝试读取这些字节，内核会直接从缓存区提供数据。</p><p>对于read操作，内核从硬盘中读取数据后会存储在内核缓存区中，调用read时，从缓冲区提供数据，直到内核缓冲区耗尽。</p><p>这种设计的目的是使读写很快，因为它们不需要等待(慢的)磁盘操作。这种设计也很高效，因为它减少了内核必须执行的磁盘传输次数。</p><h3 id="用户态缓存区" tabindex="-1"><a class="header-anchor" href="#用户态缓存区" aria-hidden="true">#</a> 用户态缓存区</h3><p>用户态缓存区是由编程语言的标准库方法提供的，以C语言来说明。</p><p>将数据缓冲到内存中以减少系统调用正是C库I/O函数(例如，fprint tf()、fscanf()、fget()、flets()、fputc()、fgetc())在操作磁盘文件时所做的事情。因此，使用stdio库使我们摆脱了缓冲数据以通过WRITE()输出或通过READ()输入的任务。</p><figure><img src="'+i+`" alt="image-20221006210345024" tabindex="0" loading="lazy"><figcaption>image-20221006210345024</figcaption></figure><h3 id="直接i-o" tabindex="-1"><a class="header-anchor" href="#直接i-o" aria-hidden="true">#</a> 直接I/O</h3><p>通过禁用缓存的方式，将用户态的信息直接拷贝到内核态或者磁盘的方式。</p><ul><li>缓存文件 I/O：用户空间要读写一个文件并<strong>不直接</strong>与磁盘交互，而是中间夹了一层缓存，即 page cache；</li><li>直接文件 I/O：用户空间读取的文件<strong>直接</strong>与磁盘交互，没有中间 page cache 层；</li></ul><p>“直接”在这里还有另一层语义：其他所有技术中，数据至少需要在内核空间存储一份，但是在 Direct I/O 技术中，数据直接存储在用户空间中，绕过了内核。</p><p>使用DMA技术可以实现直接IO，直接IO在Netty等软件中发挥的很大的作用，将在后面部分进行说明。</p><h2 id="i-o模型" tabindex="-1"><a class="header-anchor" href="#i-o模型" aria-hidden="true">#</a> I/O模型</h2><p>主要有BIO/NIO/AIO等</p><p>将在之后的篇幅介绍</p><h2 id="_5-fd-文件描述符" tabindex="-1"><a class="header-anchor" href="#_5-fd-文件描述符" aria-hidden="true">#</a> 5.fd(文件描述符)</h2><h3 id="普通fd" tabindex="-1"><a class="header-anchor" href="#普通fd" aria-hidden="true">#</a> 普通fd</h3><p>在前面的部分里，提到过fd的本质。</p><p>fd就是定义在fd_array中，用于管理file数组的索引，fd会指向一个file指针，表示一个Linux 文件，这个文件可能是普通文件，可能是socket，也可能是目录项等。fd在Linux文件系统里起到很重要的作用。这里对fd做出总结。</p><p>当打开一个文件时，内核向进程返回一个文件描述符（ <code>open</code> 系统调用得到 ），后续 <code>read</code>、<code>write</code> 这个文件时，则只需要用这个<strong>文件描述符</strong>fd来标识该文件，将其作为参数传入 <code>read</code>、<code>write</code> 。</p><p><strong>什么时候会出现多个进程的 <code>fd</code> 指向同一个 <code>file</code> 结构体？</strong></p><p>在子进程fork父进程时，如果父进程打开了文件，那么就会出现这种情况。</p><p><strong>什么时候，在同一个进程中，多个 <code>fd</code> 指向同一个 file 结构？</strong></p><p>在使用系统调用dup的时候，可能出现</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
 	                             <span class="token function">Returns</span> <span class="token punctuation">(</span>new<span class="token punctuation">)</span> file descriptor on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dup系统调用用于获取一个新的fd指向该file结构体</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">dup2</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldfd<span class="token punctuation">,</span> <span class="token keyword">int</span> newfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                 <span class="token function">Returns</span> <span class="token punctuation">(</span>new<span class="token punctuation">)</span> file descriptor on success<span class="token punctuation">,</span> or –<span class="token number">1</span> on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dup2可以指定获取的新的fd</p><p>进程 <code>open</code> 文件得到一个非负数 <code>fd</code>，之后针对该文件的 I/O 操作都是基于这个 <code>fd</code> ；</p><p>文件描述符 <code>fd</code> 本质上来讲就是数组索引，<code>fd</code> 等于 5 ，那对应array__fd的第 5 个元素而已，该数组是进程打开的所有文件的数组，数组元素类型为 <code>struct file</code>；</p><p>结构体 <code>task_struct</code> 对应一个抽象的进程，<code>files_struct</code> 是这个进程管理<strong>该进程打开的文件</strong>数组管理器。<code>fd</code> 则对应了这个数组的编号，每一个打开的文件用 <code>file</code> 结构体表示，内含当前偏移等信息；</p><p><code>file</code> 结构体可以为进程间共享，属于系统级资源，同一个文件可能对应多个 <code>file</code> 结构体，<code>file</code> 内部有个 <code>inode</code> 指针，指向文件系统的 <code>inode</code>；</p><p><code>inode</code> 是虚拟文件系统级别的概念，只由文件系统管理维护，不因进程改变（ <code>file</code> 是进程出发创建的，进程 <code>open</code> 同一个文件会导致多个 <code>file</code> ，指向同一个 <code>inode</code> ）</p><h3 id="匿名-fd" tabindex="-1"><a class="header-anchor" href="#匿名-fd" aria-hidden="true">#</a> 匿名 fd</h3><p>在 <code>/proc/\${pid}/fd/</code> 下面能看到 <code>anon_inode :</code> 前缀的句柄，如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>root@ubuntu:~/temp# ll /proc/5398/fd

lr-x------ 1 root root 64 Aug 24 09:39 11 -&gt; anon_inode:inotify
lrwx------ 1 root root 64 Aug 24 09:39 4 -&gt; anon_inode:[eventpoll]
lrwx------ 1 root root 64 Aug 24 09:39 5 -&gt; anon_inode:[signalfd]
lrwx------ 1 root root 64 Aug 24 09:39 7 -&gt; anon_inode:[timerfd]
lrwx------ 1 root root 64 Aug 24 09:39 9 -&gt; anon_inode:[eventpoll]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是正常的文件句柄，一般显式的是一个路径：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>root@ubuntu:~/temp# ll /proc/5398/fd

lr-x------ 1 root root 64 Aug 24 09:39 10 -&gt; /proc/5398/mountinfo
lr-x------ 1 root root 64 Aug 24 09:39 12 -&gt; /proc/swaps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然 path 只是一个浅层次的感官，因为对于 socket 句柄来说也不算有 path ，所以这个匿名其实<strong>匿的是 inode</strong> 。</p><p>在 Linux 里一切皆文件，你理解的常见“文件”有什么特性？是<strong>路径</strong>，也就是 path ，<strong>匿名</strong>的意思说的就是没有路径（ 在内核里面说的就是没有有效的 dentry ）。</p><p>在 Linux 的文件体系中，一个文件句柄，对应一个 file 结构体，关联一个 inode 。 <code>file/dentry/inode</code> 这三驾马车是一定要配齐的，就算是匿名的（无 path，无效 dentry），对于 file 结构体来说，一定要绑定 inode 和 dentry ，<strong>哪怕是伪造的、不完整的 inode</strong>。</p><p><strong>anon_inodefs</strong> 就应运而生了，内核就帮你搞出来一个公共的 inode ，这就节省了所有<strong>有这样需求的内核模块</strong>，避免了内存的浪费，省了冗余重复的 inode 初始化代码。</p><p>匿名 fd 背后的是一个叫做 anon_inodefs 的内核文件系统（ 位于 <code>fs/anon_inodes.c</code> ），这个文件系统极其简单，整个文件系统只有一个 inode ，这个 inode 是文件系统初始化的时候创建好的。之后，所有需要一个匿名 inode 的句柄都直接跟这个 inode 关联即可。</p><ol><li>anon_inodefs 是为了公共需求抽离出来的一个内核文件系统，只有一个 inode ，为了节省内存，抽象重复代码之用；</li><li>匿名句柄是因为 fd 对应的 file 实例背靠着的是匿名 inode ，anon_inodefs 提供了两个功能函数，都是用来获取匿名 fd 的；</li><li>inode 上可以挂多个 dentry 节点，换句话说，<strong>一个 inode 可以出现在 Linux 目录树的多个位置</strong>；</li><li>dentry 对应目录树的一个节点位置，最直观的是对应 path 路径的一个位置；</li><li>一个挂载路径可以挂多个文件系统实例，后面的覆盖前面的，所以光靠 dentry 无法唯一定位一个“文件”，Linux 内核才用两元组 &lt; vfsmount, dentry &gt; 来唯一定位一个“文件”；</li></ol><h3 id="socket-fd" tabindex="-1"><a class="header-anchor" href="#socket-fd" aria-hidden="true">#</a> Socket fd</h3><p>vfs 下有一个 sockfs 的抽象层，是把 socket 抽象成“文件” fd 的关键之一；</p><p>socket fd 能够和文件 IO 一样，使用 write/read 等系统调用，就得益于 vfs 帮你做的转接。那 <code>socket()</code> 函数调用是不是就和 open 文件 fd 的效果是一样的呀？是的，都是构建并关联各种内核结构体；</p><h3 id="event-fd" tabindex="-1"><a class="header-anchor" href="#event-fd" aria-hidden="true">#</a> Event fd</h3><p>从内核2.6.22开始，Linux通过Eventfd()系统调用提供了额外的非标准同步机制。此系统调用创建一个Eventfd对象，该对象具有由内核维护的关联8字节无符号整数。系统调用返回引用该对象的文件描述符。</p><p>将整数写入此文件描述符会将该整数与对象的值相加。</p><p>如果对象的值为0，则从文件描述符中读取()会阻塞。如果对象具有非零值，则Read()返回该值并将其重置为0。</p><p>此外，Poll()、SELECT()或EPOLL可用于测试对象是否具有非零值；如果具有非零值，则文件描述符指示为可读。希望使用Eventfd对象进行同步的应用程序必须首先使用Eventfd()创建对象，然后调用fork()以创建继承引用该对象的文件描述符的相关进程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/eventfd.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">eventfd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> initval<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
																		returns eventfd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有实现了 <code>file_operation-&gt;poll</code> 的调用的“文件” fd 才能被 epoll 管理。eventfd 刚好就实现了这个接口。</p><p>eventfd 是专门用来传递事件的 fd ，而 epoll 池则是专门用来管理事件的池子，它们两结合就妙了。</p><p>我们知道 epoll 监听的是<strong>可读可写事件</strong>。那么你想过 eventfd 的可读可写事件是啥吗？</p><p>“<strong>可读可写事件</strong>”这是个有趣的问题，我们可以去发散下，对比思考下 socket fd，文件 fd：</p><ul><li>socket fd：缓存区可以写入发送数据，那么触发可写事件，网卡中来自其他网络的数据来了，可以读，触发可读事件；</li><li>文件 fd：文件 fd 的可读可写事件就更有意思了，因为文件一直是可写的，所以一直都触发可写事件，文件里的数据也一直是可读的，所以一直触发可读事件。这个也是为什么类似 ext4 这种文件不实现 poll 接口的原因。<strong>因为文件 fd 一直是可读可写的，poll 监听没有任何意义；</strong></li></ul><p>eventfd 实现的是计数的功能。所以 eventfd 计数不为 0 ，那么 fd 是可读的。</p><p>由于 eventfd 一直可写（可以一直累计计数），所以一直有可写事件。</p><p>所以，这里有个什么隐藏知识点呢？</p><p><strong>eventfd 如果用 epoll 监听事件，那么都是监听读事件，因为监听写事件无意义。</strong></p><p>最简单的例子，一个消费者和多个生产者，这种就可以借助 eventfd 优雅的完成事件通知。</p><p>生产者：</p><p>是多个线程，会把请求投递到一个 list 中，然后唤醒生产者。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>producer:
    // 投递请求到链表
    list_add( global_list, request )
    // 唤醒消费者处理
    write(eventfd, &amp;cnt /* 1 */ , 8)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者：</p><p>是一个线程，后台 loop 处理。使用 epoll 监听 eventfd 的可读事件，这样能做到一旦有请求入队，消费者就立马唤醒处理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>consumer 
    <span class="token comment">// 添加 eventfd 到监听池</span>
    <span class="token function">epoll_ctl</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> EPOLL_CTL_ADD<span class="token punctuation">,</span> eventfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ee<span class="token punctuation">)</span><span class="token punctuation">;</span>

loop<span class="token operator">:</span>
    <span class="token comment">// 等待唤醒</span>
    <span class="token function">epoll_wait</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 读取新添加到列表里的元素个数，并且进行处理；</span>
    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>eventfd<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
    <span class="token comment">// 遍历链表处理</span>
    <span class="token keyword">for</span> each global_list<span class="token operator">:</span>
        <span class="token comment">// do something</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>eventfd 实现了 read/write 的接口，本质是一个计数器的实现；</p><p>eventfd 实现了 poll 接口，所以可以和 epoll 双剑合璧，实现事件的通知管理；</p><p>eventfd 可以和 libaio &amp; epoll 一起，实现 Linux 下的纯异步 IO；</p><p>eventfd 监听可读事件才有意义；</p><p>ext4 这种文件 fd 一直可读可写，所以实现 poll 毫无意义。eventfd 一直可写，所以监听可写毫无意义；</p><p>eventfd 可以结合业务，做一个事件通知的通信机制，非常巧妙；</p><h3 id="signal-fd" tabindex="-1"><a class="header-anchor" href="#signal-fd" aria-hidden="true">#</a> Signal fd</h3><p>信号（ signal ）本质是 Linux 进程间通信的一种机制，也叫<strong>软中断信号</strong>。既然是通信机制，那么就是传递信息用的，信号传递的信息很简单，就是一个整数，一般用于配合系统管理任务，比如进程的终结、恢复、热加载等。</p><p>信号都用整数常量表示，命名以 SIG 未前缀，比如 SIGINT（ ctrl-c 触发），SIGKILL（ kill -9 触发 ）。</p><p><strong>信号一般怎么产生？</strong></p><ul><li>由内核产生，比如内存错误，除 0 等错误，内核通过信号通知到相应的进程；</li><li>可以由其他进程传递给目标进程，比如 kill 命令就是专门干这个事情的；</li></ul><p><strong>信号处理分为两个阶段</strong>：</p><ul><li>发送阶段：内核将信号（signal）放到对应的 pending 队列中；</li><li>传递阶段：也叫做处理阶段，内核将信号从 pending 队列中取出来，并且进行处理，一般是调用相应的回调函数（处理方式有三种：用户定义、内核默认定义 SIG_DEL、忽略 SIG_IGN）；</li></ul><p>了解了什么是信号（ signal ），那 signalfd 又会是什么呢？</p><p>是一个跟信号关联的<strong>文件描述符</strong>，能够以 io 的行为获取到系统信号，属性上来讲 signalfd 也是一个匿名 fd 类型。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/signalfd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">signalfd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>mask<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回该信号调用的fd</p><p>读一个 signalfd 的操作非常简单，主要逻辑：</p><ol><li>查看当前队列中是否有信号，有的话就取出来，填充到用户给的结构体中；</li><li>如果句柄是阻塞类型的，在没有信号的时候，会切走 cpu，等到有信号的时候切回来。如果是非阻塞类型的，直接报错，返回 EAGAIN ；</li></ol><p><strong>进程有信号的时候，signalfd 句柄就是可读的</strong>。</p><p>信号也实现了poll语句，因此可以和epoll进行关联</p><p><code>epoll_ctl</code> 注册 signalfd 的时候，调用 <code>signalfd_poll</code> ，<code>signalfd_poll</code> 会把 epoll 创建的 wait entry 挂到 <code>current-&gt;sighand</code> 上。唤醒的时候调用这个 wait 链表的回调。</p><p>所有的信号发送都会调用到 <code>send_signal</code> ，在这个里面实现了唤醒 <code>sighand-&gt;signalfd_wqh</code> 链表的操作。从而使得 epoll 感知到 signalfd 可读了（因为来信号了），使得 epoll 从 epoll_wait 出唤醒，然后调用 read 操作，把信号的相关信息从句柄中读出来。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>signalfd_notify
    -&gt; wake_up （唤醒等待队列，也就是 epoll）
        -&gt; ep_poll_callback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>wait唤醒的时机在<strong>信号发送</strong>的过程。</p><p><strong>总结</strong></p><ol><li>信号能够像文件一样 read 出来，这种优雅的信号处理方式得益于 signalfd 的封装；</li><li>信号是挂在在进程 task_struct 结构体上的，信号队列非空的时候 signalfd 句柄可读；</li><li>和 epoll 池的配合同样还是老套路，epoll_ctl 注册的时候调用 <code>.poll</code> 接口挂载 epoll 的 wait entry 到 <code>sighand-&gt;signalfd_wqh</code> 之上，信号发送时（）唤醒 epoll ；</li><li>signalfd 是一种匿名 fd 类型；</li></ol><h3 id="timer-fd" tabindex="-1"><a class="header-anchor" href="#timer-fd" aria-hidden="true">#</a> **Timer fd **</h3><p>什么是 timerfd ？这是一个跟时间有关系的 fd 类型，通常叫做定时器 fd ，先去看一下 timerfd 的样子吧。奇伢在 Linux 的机器上找了一个 open 了 timerfd 的进程，如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>root@ubuntu:~# ll /proc/6997/fd/
...
lrwx------ 1 root root 64 Aug 10 14:13 3 -&gt; anon_inode:[timerfd]

root@ubuntu:~# cat /proc/6997/fdinfo/3 
pos: 0
flags: 02
mnt_id: 11
clockid: 0
ticks: 0
settime flags: 01
it_value: (0, 969820149)
it_interval: (1, 0)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 proc fs 通过 <code>/proc/\${pid}/fd/</code> 可以看到进程打开的句柄。这里看到挺关键的信息：<code>anon_inode:[timerfd]</code>，说明 <strong>timerfd 绑定的是匿名 inode</strong>。</p><p>通过 <code>/proc/\${pid}/fdinfo/</code> 可以看到句柄的展示信息。</p><ul><li>clockid：时钟类型；</li><li>ticks：超时次数；</li><li>settime flags：这个是 <code>timerfd_settime</code> 的参数；</li><li>it_value：定时器到期还剩多少时间；</li><li>it_interval：超时间隔；</li></ul><p>timerfd 这个名字拆开来看，就是 timer fd，所谓定时器 fd 类型，那么它的可读可写事件一定是跟时间有关系。timerfd 被 new 出来之后 （ <code>timerfd_create</code> ），可以设置超时时间（ <code>timerfd_setting</code> ），超时之后，该句柄可读，读出来的是<strong>超时的次数</strong>。</p><p>文件句柄，网络句柄都是可以 <code>read</code>/<code>write</code>/<code>close</code> 的，timerfd 可以做什么？</p><p>timerfd 可以 <code>read</code>，<code>poll</code>，<code>close</code> ，这个从内核实现的接口可知：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// fs/timerfd.c
static const struct file_operations timerfd_fops = { 
    .release    = timerfd_release,
    .poll       = timerfd_poll,
    .read       = timerfd_read,
    .show_fdinfo    = timerfd_show,
    // ...
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定时器句柄 timerfd 的实现就内聚在 <code>fs/timerfd.c</code> 一个文件。</p><p>还记得上面 <code>cat /proc/\${pid}/fdinfo/</code> 里面展示的信息吗？就是 <code>timerfd_show</code> 负责展示的。</p><p>timerfd 常用来做定时器的使用，设置超时时间之后，每隔一段时间 timerfd 就是可读的。</p><ol><li>procfs 是内核提供给用户探视进程细节的接口，非常重要，<code>/proc/\${pid}/fd/</code> 下有所有打开的句柄， <code>/proc/\${pid}/fdinfo/</code> 下能看到句柄的详细信息，挂钩的是 <code>.show_fdinfo</code> 回调实现；</li><li>timerfd 的核心结构是 <code>timerfd_ctx</code> ，通过 fd 先找到 file 结构体，它就藏在 <code>file-&gt;private_data</code> 这里；</li><li>timerfd 是直接复用的 hrtimer 或者 alarm 类型的定时器，timerfd 本身只是对<strong>定时器</strong>做的<strong>文件接口</strong>的封装；</li><li>内核提供了一套名叫 <strong>anon_inodefs 的匿名文件系统</strong>。对于想实现文件接口，但又不想实现完整的 inode 功能的句柄类型是福音，timerfd ，eventfd，eventpoll 等类型的 fd 都得益于此；</li><li>timerfd 句柄 <code>timerfd_create</code> 创建的时候准备好等待队列 <code>ctx-&gt;wqh</code> ，<code>timerfd_settime</code> 设置定时回调 <code>timerfd_tmrproc</code>，<code>epoll_ctl</code> 注册句柄的时候把 <code>ep_poll_back</code> 装进 wait 对象并挂到 <code>ctx-&gt;wqh</code> 链表之上。定时器超时的时候，由 timerfd_tmrproc 遍历 <code>ctx-&gt;wqh</code> ，调用 <code>ep_poll_callback</code> 从而完成事件触发；</li></ol>`,288),r=[d];function u(k,v){return s(),a("div",null,r)}const f=n(l,[["render",u],["__file","filesystem.html.vue"]]);export{f as default};
