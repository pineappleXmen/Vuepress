const n=JSON.parse(`{"key":"v-5032bb0f","path":"/article/javastack/juc/JUC-03.html","title":"ReentantLock","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"ReentantLock","description":"Java","category":["Java"],"tag":["JUC"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/article/javastack/juc/JUC-03.html"}],["meta",{"property":"og:site_name","content":"Pineapple Coding"}],["meta",{"property":"og:title","content":"ReentantLock"}],["meta",{"property":"og:description","content":"Java"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"JUC"}]]},"headers":[],"git":{},"readingTime":{"minutes":10.03,"words":3009},"filePathRelative":"article/javastack/juc/JUC-03.md","excerpt":"<h1> ReentantLock</h1>\\n<ul>\\n<li>可以中断</li>\\n<li>可以设置超时时间</li>\\n<li>可以设置为公平锁</li>\\n<li>支持多个条件变量</li>\\n<li>可重入</li>\\n</ul>\\n<h4> AQS结构</h4>\\n<figure><figcaption>image-20220829181059334</figcaption></figure>\\n<h4> 源码</h4>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ReentrantLock</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Lock</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>Serializable</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">long</span> serialVersionUID <span class=\\"token operator\\">=</span> <span class=\\"token number\\">7373984872572414699L</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token doc-comment comment\\">/** Synchronizer providing all implementation mechanics */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Sync</span> sync<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//锁对象</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Base of synchronization control for this lock. Subclassed\\n     * into fair and nonfair versions below. Uses AQS state to\\n     * represent the number of holds on the lock.\\n     */</span>\\n    <span class=\\"token keyword\\">abstract</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Sync</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">AbstractQueuedSynchronizer</span> <span class=\\"token punctuation\\">{</span>   <span class=\\"token comment\\">//抽象类 继承了AQS</span>\\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">long</span> serialVersionUID <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">5179523762034025860L</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token doc-comment comment\\">/**\\n         * Performs non-fair tryLock.\\n         */</span>\\n        <span class=\\"token annotation punctuation\\">@ReservedStackAccess</span>\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Thread</span> current <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> c <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> \\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//如果state为0 表示没有锁 </span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">compareAndSetState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\t   <span class=\\"token comment\\">//那么通过cas将0改为1 表示当前线程占有锁</span>\\n                    <span class=\\"token function\\">setExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span>current<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">//将owner设置为当前线程</span>\\n                    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> current<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">//可重入实现</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">++</span>c <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// overflow      //如果加到了Integer.maxvalue 可能变为负数</span>\\n                    <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Maximum lock count exceeded\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">setState</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>                 <span class=\\"token comment\\">//cas设置state</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t<span class=\\"token comment\\">//获取锁成功 返回true</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token doc-comment comment\\">/**\\n         * Checks for reentrancy and acquires if lock immediately\\n         * available under fair vs nonfair rules. Locking methods\\n         * perform initialTryLock check before relaying to\\n         * corresponding AQS acquire methods.\\n         */</span>\\n        <span class=\\"token keyword\\">abstract</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">initialTryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token annotation punctuation\\">@ReservedStackAccess</span>\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token function\\">initialTryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token function\\">acquire</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token annotation punctuation\\">@ReservedStackAccess</span>\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">lockInterruptibly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">interrupted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InterruptedException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token function\\">initialTryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token function\\">acquireInterruptibly</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token annotation punctuation\\">@ReservedStackAccess</span>\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryLockNanos</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span> nanos<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">interrupted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">InterruptedException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">initialTryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token function\\">tryAcquireNanos</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> nanos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token annotation punctuation\\">@ReservedStackAccess</span>\\n        <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryRelease</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> releases<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> c <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> releases<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalMonitorStateException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">boolean</span> free <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>free<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token function\\">setExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">setState</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> free<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isHeldExclusively</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// While we must in general read state before owner,</span>\\n            <span class=\\"token comment\\">// we don't need to do so to check if current thread is owner</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">ConditionObject</span> <span class=\\"token function\\">newCondition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConditionObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// Methods relayed from outer class</span>\\n\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token function\\">getOwner</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">getExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getHoldCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">isHeldExclusively</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> <span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isLocked</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token doc-comment comment\\">/**\\n         * Reconstitutes the instance from a stream (that is, deserializes it).\\n         */</span>\\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">readObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>ObjectInputStream</span> s<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>IOException</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ClassNotFoundException</span> <span class=\\"token punctuation\\">{</span>\\n            s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">defaultReadObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">setState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// reset to unlocked state</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Sync object for non-fair locks\\n     */</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">NonfairSync</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Sync</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">long</span> serialVersionUID <span class=\\"token operator\\">=</span> <span class=\\"token number\\">7316153563782823691L</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">initialTryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Thread</span> current <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">compareAndSetState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// first attempt is unguarded</span>\\n                <span class=\\"token function\\">setExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span>current<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> current<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">int</span> c <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// overflow</span>\\n                    <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Maximum lock count exceeded\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">setState</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token doc-comment comment\\">/**\\n         * Acquire for non-reentrant cases after initialTryLock prescreen\\n         */</span>\\n        <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryAcquire</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> acquires<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">compareAndSetState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> acquires<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token function\\">setExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Sync object for fair locks\\n     */</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">FairSync</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Sync</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">long</span> serialVersionUID <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">3000897897090466540L</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token doc-comment comment\\">/**\\n         * Acquires only if reentrant or queue is empty.\\n         */</span>\\n        <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">initialTryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">Thread</span> current <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> c <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token function\\">hasQueuedThreads</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">compareAndSetState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token function\\">setExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span>current<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> current<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">++</span>c <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// overflow</span>\\n                    <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Maximum lock count exceeded\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">setState</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token doc-comment comment\\">/**\\n         * Acquires only if thread is first waiter or empty\\n         */</span>\\n        <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryAcquire</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> acquires<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span><span class=\\"token function\\">hasQueuedPredecessors</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span>\\n                <span class=\\"token function\\">compareAndSetState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> acquires<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token function\\">setExclusiveOwnerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ReentrantLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        sync <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NonfairSync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Creates an instance of <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token class-name\\">ReentrantLock</span></span></span><span class=\\"token punctuation\\">}</span> with the\\n     * given fairness policy.\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">fair</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if this lock should use a fair ordering policy\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ReentrantLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">boolean</span> fair<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        sync <span class=\\"token operator\\">=</span> fair <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FairSync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NonfairSync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Acquires the lock.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Acquires the lock if it is not held by another thread and returns\\n     * immediately, setting the lock hold count to one.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the current thread already holds the lock then the hold\\n     * count is incremented by one and the method returns immediately.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the lock is held by another thread then the\\n     * current thread becomes disabled for thread scheduling\\n     * purposes and lies dormant until the lock has been acquired,\\n     * at which time the lock hold count is set to one.\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Acquires the lock unless the current thread is\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">interrupt</span></span> interrupted<span class=\\"token punctuation\\">}</span>.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Acquires the lock if it is not held by another thread and returns\\n     * immediately, setting the lock hold count to one.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the current thread already holds this lock then the hold count\\n     * is incremented by one and the method returns immediately.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the lock is held by another thread then the\\n     * current thread becomes disabled for thread scheduling\\n     * purposes and lies dormant until one of two things happens:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>The lock is acquired by the current thread; or\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>Some other thread <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">interrupt</span></span> interrupts<span class=\\"token punctuation\\">}</span> the\\n     * current thread.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the lock is acquired by the current thread then the lock hold\\n     * count is set to one.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the current thread:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>has its interrupted status set on entry to this method; or\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>is <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">interrupt</span></span> interrupted<span class=\\"token punctuation\\">}</span> while acquiring\\n     * the lock,\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * then <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">InterruptedException</span></span><span class=\\"token punctuation\\">}</span> is thrown and the current thread's\\n     * interrupted status is cleared.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>In this implementation, as this method is an explicit\\n     * interruption point, preference is given to responding to the\\n     * interrupt over normal or reentrant acquisition of the lock.\\n     *\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">InterruptedException</span></span> if the current thread is interrupted\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">lockInterruptibly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lockInterruptibly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Acquires the lock only if it is not held by another thread at the time\\n     * of invocation.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Acquires the lock if it is not held by another thread and\\n     * returns immediately with the value <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span>, setting the\\n     * lock hold count to one. Even when this lock has been set to use a\\n     * fair ordering policy, a call to <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">}</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>em</span><span class=\\"token punctuation\\">&gt;</span></span>will<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>em</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * immediately acquire the lock if it is available, whether or not\\n     * other threads are currently waiting for the lock.\\n     * This <span class=\\"token entity named-entity\\" title=\\"&quot;\\">&amp;quot;</span>barging<span class=\\"token entity named-entity\\" title=\\"&quot;\\">&amp;quot;</span> behavior can be useful in certain\\n     * circumstances, even though it breaks fairness. If you want to honor\\n     * the fairness setting for this lock, then use\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">)</span></span> tryLock(0, TimeUnit.SECONDS)<span class=\\"token punctuation\\">}</span>\\n     * which is almost equivalent (it also detects interruption).\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the current thread already holds this lock then the hold\\n     * count is incremented by one and the method returns <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span>.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the lock is held by another thread then this method will return\\n     * immediately with the value <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">false</span></span></span><span class=\\"token punctuation\\">}</span>.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if the lock was free and was acquired by the\\n     *         current thread, or the lock was already held by the current\\n     *         thread; and <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">false</span></span></span><span class=\\"token punctuation\\">}</span> otherwise\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Acquires the lock if it is not held by another thread within the given\\n     * waiting time and the current thread has not been\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">interrupt</span></span> interrupted<span class=\\"token punctuation\\">}</span>.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Acquires the lock if it is not held by another thread and returns\\n     * immediately with the value <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span>, setting the lock hold count\\n     * to one. If this lock has been set to use a fair ordering policy then\\n     * an available lock <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>em</span><span class=\\"token punctuation\\">&gt;</span></span>will not<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>em</span><span class=\\"token punctuation\\">&gt;</span></span> be acquired if any other threads\\n     * are waiting for the lock. This is in contrast to the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span>\\n     * method. If you want a timed <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">tryLock</span></span><span class=\\"token punctuation\\">}</span> that does permit barging on\\n     * a fair lock then combine the timed and un-timed forms together:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span>\\n     <span class=\\"token code-section\\">* <span class=\\"token code language-java\\"><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span></span>\\n     *     <span class=\\"token code language-java\\">lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">,</span> unit<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span></span>\\n     * <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span></span><span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the current thread\\n     * already holds this lock then the hold count is incremented by one and\\n     * the method returns <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span>.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the lock is held by another thread then the\\n     * current thread becomes disabled for thread scheduling\\n     * purposes and lies dormant until one of three things happens:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>The lock is acquired by the current thread; or\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>Some other thread <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">interrupt</span></span> interrupts<span class=\\"token punctuation\\">}</span>\\n     * the current thread; or\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>The specified waiting time elapses\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the lock is acquired then the value <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> is returned and\\n     * the lock hold count is set to one.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the current thread:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>has its interrupted status set on entry to this method; or\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>is <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">interrupt</span></span> interrupted<span class=\\"token punctuation\\">}</span> while\\n     * acquiring the lock,\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     * then <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">InterruptedException</span></span><span class=\\"token punctuation\\">}</span> is thrown and the current thread's\\n     * interrupted status is cleared.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the specified waiting time elapses then the value <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">false</span></span></span><span class=\\"token punctuation\\">}</span>\\n     * is returned.  If the time is less than or equal to zero, the method\\n     * will not wait at all.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>In this implementation, as this method is an explicit\\n     * interruption point, preference is given to responding to the\\n     * interrupt over normal or reentrant acquisition of the lock, and\\n     * over reporting the elapse of the waiting time.\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">timeout</span> the time to wait for the lock\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">unit</span> the time unit of the timeout argument\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if the lock was free and was acquired by the\\n     *         current thread, or the lock was already held by the current\\n     *         thread; and <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">false</span></span></span><span class=\\"token punctuation\\">}</span> if the waiting time elapsed before\\n     *         the lock could be acquired\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">InterruptedException</span></span> if the current thread is interrupted\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">NullPointerException</span></span> if the time unit is null\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span> timeout<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span> unit<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">tryLockNanos</span><span class=\\"token punctuation\\">(</span>unit<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toNanos</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Attempts to release this lock.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>If the current thread is the holder of this lock then the hold\\n     * count is decremented.  If the hold count is now zero then the lock\\n     * is released.  If the current thread is not the holder of this\\n     * lock then <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalMonitorStateException</span></span><span class=\\"token punctuation\\">}</span> is thrown.\\n     *\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalMonitorStateException</span></span> if the current thread does not\\n     *         hold this lock\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">release</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns a <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Condition</span></span><span class=\\"token punctuation\\">}</span> instance for use with this\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Lock</span></span><span class=\\"token punctuation\\">}</span> instance.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>The returned <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Condition</span></span><span class=\\"token punctuation\\">}</span> instance supports the same\\n     * usages as do the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Object</span></span><span class=\\"token punctuation\\">}</span> monitor methods (<span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span>\\n     * <span class=\\"token reference\\"><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">wait</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span> wait<span class=\\"token punctuation\\">}</span>, <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">notify</span></span> notify<span class=\\"token punctuation\\">}</span>, and <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span>\\n     * <span class=\\"token reference\\"><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">notifyAll</span></span> notifyAll<span class=\\"token punctuation\\">}</span>) when used with the built-in\\n     * monitor lock.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>If this lock is not held when any of the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Condition</span></span><span class=\\"token punctuation\\">}</span>\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Condition</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">await</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span> waiting<span class=\\"token punctuation\\">}</span> or <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span>\\n     * <span class=\\"token reference\\"><span class=\\"token class-name\\">Condition</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">signal</span></span> signalling<span class=\\"token punctuation\\">}</span> methods are called, then an <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span>\\n     * <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalMonitorStateException</span></span><span class=\\"token punctuation\\">}</span> is thrown.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>When the condition <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Condition</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">await</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span> waiting<span class=\\"token punctuation\\">}</span>\\n     * methods are called the lock is released and, before they\\n     * return, the lock is reacquired and the lock hold count restored\\n     * to what it was when the method was called.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>If a thread is <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">interrupt</span></span> interrupted<span class=\\"token punctuation\\">}</span>\\n     * while waiting then the wait will terminate, an <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span>\\n     * <span class=\\"token reference\\"><span class=\\"token class-name\\">InterruptedException</span></span><span class=\\"token punctuation\\">}</span> will be thrown, and the thread's\\n     * interrupted status will be cleared.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>Waiting threads are signalled in FIFO order.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">&gt;</span></span>The ordering of lock reacquisition for threads returning\\n     * from waiting methods is the same as for threads initially\\n     * acquiring the lock, which is in the default case not specified,\\n     * but for <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>em</span><span class=\\"token punctuation\\">&gt;</span></span>fair<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>em</span><span class=\\"token punctuation\\">&gt;</span></span> locks favors those threads that have been\\n     * waiting the longest.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token keyword\\">@return</span> the Condition object\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Condition</span> <span class=\\"token function\\">newCondition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newCondition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Queries the number of holds on this lock by the current thread.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>A thread has a hold on a lock for each lock action that is not\\n     * matched by an unlock action.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>The hold count information is typically only used for testing and\\n     * debugging purposes. For example, if a certain section of code should\\n     * not be entered with the lock already held then we can assert that\\n     * fact:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span>\\n     <span class=\\"token code-section\\">* <span class=\\"token code language-java\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">X</span> <span class=\\"token punctuation\\">{</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">ReentrantLock</span> lock <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ReentrantLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token comment\\">// ...</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">m</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n     *     <span class=\\"token code language-java\\"><span class=\\"token keyword\\">assert</span> lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getHoldCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span></span>\\n     *     <span class=\\"token code language-java\\">lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *     <span class=\\"token code language-java\\"><span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span></span>\\n     *       <span class=\\"token code language-java\\"><span class=\\"token comment\\">// ... method body</span></span>\\n     *     <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span></span>\\n     *       <span class=\\"token code language-java\\">lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *     <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span>\\n     * <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span></span><span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token keyword\\">@return</span> the number of holds on this lock by the current thread,\\n     *         or zero if this lock is not held by the current thread\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getHoldCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getHoldCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Queries if this lock is held by the current thread.\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>Analogous to the <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@link</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token function\\">holdsLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">}</span> method for\\n     * built-in monitor locks, this method is typically used for\\n     * debugging and testing. For example, a method that should only be\\n     * called while a lock is held can assert that this is the case:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span>\\n     <span class=\\"token code-section\\">* <span class=\\"token code language-java\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">X</span> <span class=\\"token punctuation\\">{</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">ReentrantLock</span> lock <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ReentrantLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token comment\\">// ...</span></span>\\n     *\\n     *   <span class=\\"token code language-java\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">m</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n     *       <span class=\\"token code language-java\\"><span class=\\"token keyword\\">assert</span> lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isHeldByCurrentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *       <span class=\\"token code language-java\\"><span class=\\"token comment\\">// ... method body</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span>\\n     * <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span></span><span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span>It can also be used to ensure that a reentrant lock is used\\n     * in a non-reentrant manner, for example:\\n     *\\n     * <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span>\\n     <span class=\\"token code-section\\">* <span class=\\"token code language-java\\"><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">X</span> <span class=\\"token punctuation\\">{</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">ReentrantLock</span> lock <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ReentrantLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token comment\\">// ...</span></span>\\n     *\\n     *   <span class=\\"token code language-java\\"><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">m</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n     *       <span class=\\"token code language-java\\"><span class=\\"token keyword\\">assert</span> <span class=\\"token operator\\">!</span>lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isHeldByCurrentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *       <span class=\\"token code language-java\\">lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *       <span class=\\"token code language-java\\"><span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span></span>\\n     *           <span class=\\"token code language-java\\"><span class=\\"token comment\\">// ... method body</span></span>\\n     *       <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span></span>\\n     *           <span class=\\"token code language-java\\">lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n     *       <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span>\\n     *   <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span>\\n     * <span class=\\"token code language-java\\"><span class=\\"token punctuation\\">}</span></span></span><span class=\\"token punctuation\\">}</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>pre</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     *\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if current thread holds this lock and\\n     *         <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">false</span></span></span><span class=\\"token punctuation\\">}</span> otherwise\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isHeldByCurrentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isHeldExclusively</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Queries if this lock is held by any thread. This method is\\n     * designed for use in monitoring of the system state,\\n     * not for synchronization control.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if any thread holds this lock and\\n     *         <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">false</span></span></span><span class=\\"token punctuation\\">}</span> otherwise\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isLocked</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isLocked</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if this lock has fairness set true.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if this lock has fairness set true\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isFair</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">FairSync</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns the thread that currently owns this lock, or\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token keyword\\">null</span></span></span><span class=\\"token punctuation\\">}</span> if not owned. When this method is called by a\\n     * thread that is not the owner, the return value reflects a\\n     * best-effort approximation of current lock status. For example,\\n     * the owner may be momentarily <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token keyword\\">null</span></span></span><span class=\\"token punctuation\\">}</span> even if there are\\n     * threads trying to acquire the lock but have not yet done so.\\n     * This method is designed to facilitate construction of\\n     * subclasses that provide more extensive lock monitoring\\n     * facilities.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> the owner, or <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token keyword\\">null</span></span></span><span class=\\"token punctuation\\">}</span> if not owned\\n     */</span>\\n    <span class=\\"token keyword\\">protected</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token function\\">getOwner</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOwner</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Queries whether any threads are waiting to acquire this lock. Note that\\n     * because cancellations may occur at any time, a <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span>\\n     * return does not guarantee that any other thread will ever\\n     * acquire this lock.  This method is designed primarily for use in\\n     * monitoring of the system state.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if there may be other threads waiting to\\n     *         acquire the lock\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">hasQueuedThreads</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasQueuedThreads</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Queries whether the given thread is waiting to acquire this\\n     * lock. Note that because cancellations may occur at any time, a\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> return does not guarantee that this thread\\n     * will ever acquire this lock.  This method is designed primarily for use\\n     * in monitoring of the system state.\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">thread</span> the thread\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if the given thread is queued waiting for this lock\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">NullPointerException</span></span> if the thread is null\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">hasQueuedThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span> thread<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isQueued</span><span class=\\"token punctuation\\">(</span>thread<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns an estimate of the number of threads waiting to acquire\\n     * this lock.  The value is only an estimate because the number of\\n     * threads may change dynamically while this method traverses\\n     * internal data structures.  This method is designed for use in\\n     * monitoring system state, not for synchronization control.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> the estimated number of threads waiting for this lock\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getQueueLength</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getQueueLength</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns a collection containing threads that may be waiting to\\n     * acquire this lock.  Because the actual set of threads may change\\n     * dynamically while constructing this result, the returned\\n     * collection is only a best-effort estimate.  The elements of the\\n     * returned collection are in no particular order.  This method is\\n     * designed to facilitate construction of subclasses that provide\\n     * more extensive monitoring facilities.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> the collection of threads\\n     */</span>\\n    <span class=\\"token keyword\\">protected</span> <span class=\\"token class-name\\">Collection</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getQueuedThreads</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getQueuedThreads</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Queries whether any threads are waiting on the given condition\\n     * associated with this lock. Note that because timeouts and\\n     * interrupts may occur at any time, a <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> return does\\n     * not guarantee that a future <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\">signal</span></span><span class=\\"token punctuation\\">}</span> will awaken any\\n     * threads.  This method is designed primarily for use in\\n     * monitoring of the system state.\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">condition</span> the condition\\n     * <span class=\\"token keyword\\">@return</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token boolean\\">true</span></span></span><span class=\\"token punctuation\\">}</span> if there are any waiting threads\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalMonitorStateException</span></span> if this lock is not held\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalArgumentException</span></span> if the given condition is\\n     *         not associated with this lock\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">NullPointerException</span></span> if the condition is null\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">hasWaiters</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Condition</span> condition<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>condition <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NullPointerException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span>condition <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">AbstractQueuedSynchronizer<span class=\\"token punctuation\\">.</span>ConditionObject</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"not owner\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasWaiters</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">AbstractQueuedSynchronizer<span class=\\"token punctuation\\">.</span>ConditionObject</span><span class=\\"token punctuation\\">)</span>condition<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns an estimate of the number of threads waiting on the\\n     * given condition associated with this lock. Note that because\\n     * timeouts and interrupts may occur at any time, the estimate\\n     * serves only as an upper bound on the actual number of waiters.\\n     * This method is designed for use in monitoring of the system\\n     * state, not for synchronization control.\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">condition</span> the condition\\n     * <span class=\\"token keyword\\">@return</span> the estimated number of waiting threads\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalMonitorStateException</span></span> if this lock is not held\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalArgumentException</span></span> if the given condition is\\n     *         not associated with this lock\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">NullPointerException</span></span> if the condition is null\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getWaitQueueLength</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Condition</span> condition<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>condition <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NullPointerException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span>condition <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">AbstractQueuedSynchronizer<span class=\\"token punctuation\\">.</span>ConditionObject</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"not owner\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getWaitQueueLength</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">AbstractQueuedSynchronizer<span class=\\"token punctuation\\">.</span>ConditionObject</span><span class=\\"token punctuation\\">)</span>condition<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns a collection containing those threads that may be\\n     * waiting on the given condition associated with this lock.\\n     * Because the actual set of threads may change dynamically while\\n     * constructing this result, the returned collection is only a\\n     * best-effort estimate. The elements of the returned collection\\n     * are in no particular order.  This method is designed to\\n     * facilitate construction of subclasses that provide more\\n     * extensive condition monitoring facilities.\\n     *\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">condition</span> the condition\\n     * <span class=\\"token keyword\\">@return</span> the collection of threads\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalMonitorStateException</span></span> if this lock is not held\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">IllegalArgumentException</span></span> if the given condition is\\n     *         not associated with this lock\\n     * <span class=\\"token keyword\\">@throws</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">NullPointerException</span></span> if the condition is null\\n     */</span>\\n    <span class=\\"token keyword\\">protected</span> <span class=\\"token class-name\\">Collection</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getWaitingThreads</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Condition</span> condition<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>condition <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NullPointerException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">(</span>condition <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">AbstractQueuedSynchronizer<span class=\\"token punctuation\\">.</span>ConditionObject</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"not owner\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getWaitingThreads</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">AbstractQueuedSynchronizer<span class=\\"token punctuation\\">.</span>ConditionObject</span><span class=\\"token punctuation\\">)</span>condition<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * Returns a string identifying this lock, as well as its lock state.\\n     * The state, in brackets, includes either the String <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token string\\">\\"Unlocked\\"</span></span></span><span class=\\"token punctuation\\">}</span>\\n     * or the String <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@code</span> <span class=\\"token code-section\\"><span class=\\"token code language-java\\"><span class=\\"token string\\">\\"Locked by\\"</span></span></span><span class=\\"token punctuation\\">}</span> followed by the\\n     * <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">@linkplain</span> <span class=\\"token reference\\"><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">#</span><span class=\\"token field\\">getName</span></span> name<span class=\\"token punctuation\\">}</span> of the owning thread.\\n     *\\n     * <span class=\\"token keyword\\">@return</span> a string identifying this lock, as well as its lock state\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Thread</span> o <span class=\\"token operator\\">=</span> sync<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOwner</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>o <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span>\\n                                   <span class=\\"token string\\">\\"[Unlocked]\\"</span> <span class=\\"token operator\\">:</span>\\n                                   <span class=\\"token string\\">\\"[Locked by thread \\"</span> <span class=\\"token operator\\">+</span> o<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"]\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
