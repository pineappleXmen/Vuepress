const e=JSON.parse('{"key":"v-692e1d3f","path":"/article/os/memory.html","title":"内存管理","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"内存管理","description":"Linux操作系统","category":["Linux"],"tag":["OS"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/article/os/memory.html"}],["meta",{"property":"og:site_name","content":"Pineapple Coding"}],["meta",{"property":"og:title","content":"内存管理"}],["meta",{"property":"og:description","content":"Linux操作系统"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"OS"}]]},"headers":[{"level":2,"title":"1.虚拟内存概述","slug":"_1-虚拟内存概述","link":"#_1-虚拟内存概述","children":[]},{"level":2,"title":"2.为什么要有虚拟内存（虚拟内存的优点）","slug":"_2-为什么要有虚拟内存-虚拟内存的优点","link":"#_2-为什么要有虚拟内存-虚拟内存的优点","children":[]},{"level":2,"title":"3.内存管理方式","slug":"_3-内存管理方式","link":"#_3-内存管理方式","children":[{"level":3,"title":"3.1内存分段式管理","slug":"_3-1内存分段式管理","link":"#_3-1内存分段式管理","children":[]},{"level":3,"title":"3.2 内存分页式处理","slug":"_3-2-内存分页式处理","link":"#_3-2-内存分页式处理","children":[]},{"level":3,"title":"多级页表","slug":"多级页表","link":"#多级页表","children":[]},{"level":3,"title":"TLB Cache","slug":"tlb-cache","link":"#tlb-cache","children":[]},{"level":3,"title":"段页式内存管理","slug":"段页式内存管理","link":"#段页式内存管理","children":[]},{"level":3,"title":"3.3 Linux 内存管理方法","slug":"_3-3-linux-内存管理方法","link":"#_3-3-linux-内存管理方法","children":[]}]},{"level":2,"title":"4.如何分配内存","slug":"_4-如何分配内存","link":"#_4-如何分配内存","children":[{"level":3,"title":"4.1 brk()和sbrk()","slug":"_4-1-brk-和sbrk","link":"#_4-1-brk-和sbrk","children":[]},{"level":3,"title":"4.2 在堆上分配内存：malloc() 和 free()","slug":"_4-2-在堆上分配内存-malloc-和-free","link":"#_4-2-在堆上分配内存-malloc-和-free","children":[]}]},{"level":2,"title":"malloc分配的是什么内存？","slug":"malloc分配的是什么内存","link":"#malloc分配的是什么内存","children":[]},{"level":2,"title":"malloc(1) 会分配多大的虚拟内存？","slug":"malloc-1-会分配多大的虚拟内存","link":"#malloc-1-会分配多大的虚拟内存","children":[]},{"level":2,"title":"free 释放内存，会归还给操作系统吗？","slug":"free-释放内存-会归还给操作系统吗","link":"#free-释放内存-会归还给操作系统吗","children":[]},{"level":2,"title":"为什么不全部使用 mmap 来分配内存？","slug":"为什么不全部使用-mmap-来分配内存","link":"#为什么不全部使用-mmap-来分配内存","children":[]},{"level":2,"title":"free() 函数只传入一个内存地址，为什么能知道要释放多大的内存？","slug":"free-函数只传入一个内存地址-为什么能知道要释放多大的内存","link":"#free-函数只传入一个内存地址-为什么能知道要释放多大的内存","children":[]},{"level":2,"title":"5.内存紧张了怎么办","slug":"_5-内存紧张了怎么办","link":"#_5-内存紧张了怎么办","children":[]},{"level":2,"title":"6.如何降低预先读取失效和缓存污染问题","slug":"_6-如何降低预先读取失效和缓存污染问题","link":"#_6-如何降低预先读取失效和缓存污染问题","children":[]}],"git":{},"readingTime":{"minutes":27.16,"words":8148},"filePathRelative":"article/os/memory.md","excerpt":"<h2> 1.虚拟内存概述</h2>\\n<p>像大多数现代内核一样，Linux 采用了一种称为虚拟内存管理的技术。该技术的目的是通过利用大多数程序的典型属性：引用局部性来有效利用 CPU 和 RAM（物理内存）。大多数程序展示了两种局部性：</p>\\n<p><strong>空间局部性</strong></p>\\n<p>是程序引用最近访问的内存地址附近的内存地址的趋势（因为指令的顺序处理，有时还有数据结构的顺序处理）。</p>\\n<p><strong>时间局部性</strong></p>\\n<p>是程序引用会在未来一段时间内访问最近访问过的区域的趋势。因为循环所导致。</p>\\n<figure><figcaption>image-20220906160641064</figcaption></figure>"}');export{e as data};
