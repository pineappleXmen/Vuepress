const e=JSON.parse('{"key":"v-475847e3","path":"/article/os/process.html","title":"进程","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"进程","description":"Linux操作系统","category":["Linux"],"tag":["OS"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/article/os/process.html"}],["meta",{"property":"og:site_name","content":"Pineapple Coding"}],["meta",{"property":"og:title","content":"进程"}],["meta",{"property":"og:description","content":"Linux操作系统"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"OS"}]]},"headers":[{"level":2,"title":"1. 进程基础概念","slug":"_1-进程基础概念","link":"#_1-进程基础概念","children":[]},{"level":2,"title":"2. 进程的内存结构","slug":"_2-进程的内存结构","link":"#_2-进程的内存结构","children":[]},{"level":2,"title":"3. 进程的创建","slug":"_3-进程的创建","link":"#_3-进程的创建","children":[]},{"level":2,"title":"4. 运行新进程","slug":"_4-运行新进程","link":"#_4-运行新进程","children":[]},{"level":2,"title":"5. 进程终止","slug":"_5-进程终止","link":"#_5-进程终止","children":[]},{"level":2,"title":"6. 监控子进程","slug":"_6-监控子进程","link":"#_6-监控子进程","children":[]},{"level":2,"title":"7. 孤儿进程和僵尸进程","slug":"_7-孤儿进程和僵尸进程","link":"#_7-孤儿进程和僵尸进程","children":[]},{"level":2,"title":"8. 进程组","slug":"_8-进程组","link":"#_8-进程组","children":[]},{"level":2,"title":"9. 进程的状态","slug":"_9-进程的状态","link":"#_9-进程的状态","children":[]},{"level":2,"title":"10. 进程的控制结构","slug":"_10-进程的控制结构","link":"#_10-进程的控制结构","children":[]},{"level":2,"title":"11. 进程的上下文切换","slug":"_11-进程的上下文切换","link":"#_11-进程的上下文切换","children":[]},{"level":2,"title":"12. 进程间的通信方式","slug":"_12-进程间的通信方式","link":"#_12-进程间的通信方式","children":[{"level":3,"title":"消息队列","slug":"消息队列","link":"#消息队列","children":[]},{"level":3,"title":"共享内存","slug":"共享内存","link":"#共享内存","children":[]},{"level":3,"title":"信号量","slug":"信号量","link":"#信号量","children":[]},{"level":3,"title":"信号","slug":"信号","link":"#信号","children":[]},{"level":3,"title":"Socket","slug":"socket","link":"#socket","children":[]}]},{"level":2,"title":"13.进程调度","slug":"_13-进程调度","link":"#_13-进程调度","children":[]},{"level":2,"title":"14.进程的底层实现","slug":"_14-进程的底层实现","link":"#_14-进程的底层实现","children":[]}],"git":{},"readingTime":{"minutes":80.72,"words":24215},"filePathRelative":"article/os/process.md","excerpt":"<h2> 1. 进程基础概念</h2>\\n<p>**最简单地说，进程是正在执行的程序的一个实例。**程序执行时，内核将程序的代码加载到虚拟内存中，为程序变量分配空间，并建立内核簿记数据结构来记录各种信息（如进程ID、终止状态、用户ID和组ID） ) 关于过程。从内核的角度来看，进程是内核必须共享计算机各种资源的实体。对于有限的资源，例如内存，内核最初会为进程分配一些资源，并在进程的生命周期内根据进程的需求和对该资源的整体系统需求调整此分配。当进程终止时，所有这些资源都会被释放以供其他进程重用。其他资源，例如 CPU 和网络带宽，是可再生的，但必须在所有进程之间公平共享。</p>\\n<p><strong>进程的创建</strong></p>"}');export{e as data};
