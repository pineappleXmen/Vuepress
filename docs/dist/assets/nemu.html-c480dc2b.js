import{_ as r,V as a,W as s,Y as e,Z as n,$ as i,a0 as o,D as d}from"./framework-3845b112.js";const l={},c={class:"custom-container tip"},u=e("p",{class:"custom-container-title"},"关于NEMU",-1),p=e("p",null,"NEMU是NJU的开放课程《计算机系统基础》课程中实现的模拟计算机运行的软件。",-1),_=e("p",null,"该软件实现 Intel 80386 体系框架的CPU运算逻辑，运行在32位Linux操作系统。",-1),h=e("p",null,"按照该课程要求，本文不会对该Pa的代码进行任何公开，只对其如何实现进行概括，以便理解本模块内容。",-1),v=e("p",null,[e("strong",null,"2020年版本")],-1),m=e("p",null,"该课程公开视频以及配置参考：",-1),b={href:"https://www.bilibili.com/video/BV1a7411w7tC/",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"课程指导的仓库及其镜像地址：",-1),g={href:"http://github.com/ics-nju-wl/icspa-public-guide",target:"_blank",rel:"noopener noreferrer"},x={href:"https://gitee.com/wlicsnju/icspa-public-guide",target:"_blank",rel:"noopener noreferrer"},E=e("p",null,"实验框架代码及其镜像地址：",-1),k={href:"http://github.com/ics-nju-wl/icspa-public",target:"_blank",rel:"noopener noreferrer"},w={href:"https://gitee.com/wlicsnju/icspa-public",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,[e("strong",null,"2021年版本")],-1),A=e("p",null,"操作指南",-1),j={href:"https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html",target:"_blank",rel:"noopener noreferrer"},M=e("p",null,[e("strong",null,"2022版本")],-1),U=e("p",null,"操作指南",-1),B={href:"https://nju-projectn.github.io/ics-pa-gitbook/ics2022/",target:"_blank",rel:"noopener noreferrer"},P=o(`<h2 id="pa-1-1-数据的表示和存取" tabindex="-1"><a class="header-anchor" href="#pa-1-1-数据的表示和存取" aria-hidden="true">#</a> PA-1-1 数据的表示和存取</h2><h3 id="对主存的模拟" tabindex="-1"><a class="header-anchor" href="#对主存的模拟" aria-hidden="true">#</a> 对主存的模拟</h3><p>定义在<code>nemu/src/memory/memory.c</code>中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>uint8_t hw_mem[MEM_SIZE_B];
uint32_t vaddr_read(vaddr_t vaddr, uint8_t sreg, size_t len)
{
	assert(len == 1 || len == 2 || len == 4);
	return laddr_read(vaddr, len);
}

void vaddr_write(vaddr_t vaddr, uint8_t sreg, size_t len, uint32_t data)
{
	assert(len == 1 || len == 2 || len == 4);
	laddr_write(vaddr, len, data);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过uint_8类型数组模拟主存 共128MB</p><p>提供读写接口</p><h3 id="对通用寄存器的模拟" tabindex="-1"><a class="header-anchor" href="#对通用寄存器的模拟" aria-hidden="true">#</a> 对通用寄存器的模拟</h3><p>通用寄存器定义在<code>nemu/include/cpu/cpu.h</code>结构体CPU_STATE中 按照手册顺序定义</p><p>可以通过cpu.eax直接访问</p><h2 id="pa-1-1-解决思路" tabindex="-1"><a class="header-anchor" href="#pa-1-1-解决思路" aria-hidden="true">#</a> PA-1-1 解决思路</h2><div class="custom-container note"><p class="custom-container-title">C语言中 union 与 struct区别</p><p><code>struct</code>中的每一项单独占据一块内存</p><p>而对于<code>union</code>来说 每一项是共享内存的</p><p>对于通用寄存器EAX来说 AL AH是EAX的低位和高位 与EAX是共享的 因此应该使用</p><p><code>union</code>来表示</p></div><h2 id="pa1-2-整数的表示和读取" tabindex="-1"><a class="header-anchor" href="#pa1-2-整数的表示和读取" aria-hidden="true">#</a> PA1-2 整数的表示和读取</h2>`,12);function V(C,G){const t=d("ExternalLinkIcon");return a(),s("div",null,[e("div",c,[u,p,_,h,v,m,e("p",null,[e("a",b,[n("NEMU"),i(t)])]),f,e("p",null,[e("a",g,[n("Github"),i(t)]),n(),e("a",x,[n("Gitee"),i(t)])]),E,e("p",null,[e("a",k,[n("GitHub"),i(t)]),n(),e("a",w,[n("Gitee"),i(t)])]),N,A,e("p",null,[e("a",j,[n("NEMU 2021"),i(t)])]),M,U,e("p",null,[e("a",B,[n("NEMU 2022"),i(t)])])]),P])}const L=r(l,[["render",V],["__file","nemu.html.vue"]]);export{L as default};
