import{_ as o,V as p,W as c,Y as n,Z as s,$ as e,a0 as t,D as i}from"./framework-3845b112.js";const l={},r=n("h2",{id:"内联汇编",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内联汇编","aria-hidden":"true"},"#"),s(),n("strong",null,"内联汇编")],-1),u={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"内联汇编",-1),k=n("p",null,[n("strong",null,"内联汇编"),s("（"),n("strong",null,"Inline assembly"),s("）是"),n("strong",null,"部分编译器"),s("支持的一种功能。可以将"),n("strong",null,"汇编语言"),s("内嵌在高级语言源代码中。")],-1),v=n("p",null,"编译器GCC(GNU Compiler for Linux) 提供C语言的汇编功能。",-1),m={href:"http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#s4",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="基本内联汇编" tabindex="-1"><a class="header-anchor" href="#基本内联汇编" aria-hidden="true">#</a> <strong>基本内联汇编</strong></h3><p>基本内联汇编语法</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">asm</span> <span class="token punctuation">[</span><span class="token keyword">volatile</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token string">&quot;opcode&quot;</span><span class="token punctuation">)</span>        <span class="token comment">//opcode 采用 AT&amp;T/UNIX assembly syntax.</span>
__asm__ <span class="token punctuation">[</span><span class="token keyword">volatile</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token string">&quot;opcode&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>asm</code>和<code>__asm__</code>均可以使用，当asm与其他关键字发生冲突时使用第二个。</p><p>如果有超过一个汇编命令在同一个命令中，需要在结尾加上<code>\\n</code> 和 <code>\\t</code>，这是因为每一条命令是用字符串的形式发送给编译器（GAS），需要保证一定的格式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">__asm__</span> <span class="token punctuation">(</span><span class="token string">&quot;movl %eax, %ebx\\n\\t&quot;</span>
          <span class="token string">&quot;movl $56, %esi\\n\\t&quot;</span>
          <span class="token string">&quot;movl %ecx, $label(%edx,%ebx,$4)\\n\\t&quot;</span>
          <span class="token string">&quot;movb %ah, (%ebx)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展内联汇编" tabindex="-1"><a class="header-anchor" href="#扩展内联汇编" aria-hidden="true">#</a> <strong>扩展内联汇编</strong></h3>`,7),g={href:"http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#s5",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>扩展内联汇编语法</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">asm</span> <span class="token punctuation">[</span><span class="token keyword">volatile</span><span class="token punctuation">]</span> <span class="token punctuation">(</span> assembler template 
           <span class="token operator">:</span> output operands                  
           <span class="token operator">:</span> input operands                   
           <span class="token operator">:</span> list of clobbered registers      
           <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">asm</span> <span class="token punctuation">[</span><span class="token keyword">volatile</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token string">&quot;汇编指令&quot;</span> 
                <span class="token operator">:</span> <span class="token string">&quot;输出操作数列表&quot;</span> 
                <span class="token operator">:</span> <span class="token string">&quot;输入操作数列表&quot;</span> 
                <span class="token operator">:</span> <span class="token string">&quot;破坏清单&quot;</span>
               <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作数格式-operand-format" tabindex="-1"><a class="header-anchor" href="#操作数格式-operand-format" aria-hidden="true">#</a> 操作数格式(operand format)</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token string">&quot;[Constraint Modifiers](Constraint)&quot;</span> <span class="token punctuation">(</span>Addr<span class="token punctuation">)</span>
<span class="token string">&quot;[约束修饰符]约束&quot;</span> <span class="token punctuation">(</span>寄存器或内存地址<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要用多个操作数，需要用逗号隔开。每个操作数可以用数字标识，如果一共有n个操作数，那么输出列表中的第一个为&quot;0&quot;，依次排序，到输入列表的最后一个为&quot;n-1&quot;。</p><p>输出操作数必须为左值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">asm</span> <span class="token punctuation">(</span><span class="token string">&quot;leal (%1,%1,4), %0&quot;</span>
             <span class="token operator">:</span> <span class="token string">&quot;=r&quot;</span> <span class="token punctuation">(</span>five_times_x<span class="token punctuation">)</span>
             <span class="token operator">:</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> 
             <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述的例子中，输入的操作数存入<code>x</code>中，这里并没有指定具体的寄存器，GCC编译器会帮助我们选择使用的寄存器。上述通过<code>lea</code>命令将存在x中的数字乘以5。</p><h3 id="破坏清单-clobber-list" tabindex="-1"><a class="header-anchor" href="#破坏清单-clobber-list" aria-hidden="true">#</a> 破坏清单 （Clobber List）</h3><p>由于内联汇编命令可能会破坏某些寄存器中的值，而这不会被GCC编译器知道，可能会引起一些错误，所以我们需要将**&quot;被破坏的寄存器&quot;**通知给编译器。</p><h3 id="lock-关键字" tabindex="-1"><a class="header-anchor" href="#lock-关键字" aria-hidden="true">#</a> <strong>lock 关键字</strong></h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>__asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
                      <span class="token string">&quot;   lock       ;\\n&quot;</span>
                      <span class="token string">&quot;   addl %1,%0 ;\\n&quot;</span>
                      <span class="token operator">:</span> <span class="token string">&quot;=m&quot;</span>  <span class="token punctuation">(</span>my_var<span class="token punctuation">)</span>
                      <span class="token operator">:</span> <span class="token string">&quot;ir&quot;</span>  <span class="token punctuation">(</span>my_int<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;m&quot;</span> <span class="token punctuation">(</span>my_var<span class="token punctuation">)</span>
                      <span class="token operator">:</span>                <span class="token comment">/* no clobber-list */</span>
                      <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加上了lock命令，表示这一条汇编命令为一条原子性的命令。</p><p>上述的命令是一条原子加法命令</p>`,14);function _(q,x){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,n("div",u,[d,k,v,n("p",null,[n("a",m,[s("GCC内联汇编文档"),e(a)])])]),b,n("p",null,[n("a",g,[s("扩展内联汇编文档"),e(a)])]),h])}const C=o(l,[["render",_],["__file","cadv.html.vue"]]);export{C as default};
