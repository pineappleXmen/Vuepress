import{_ as i,V as l,W as o,$ as s,a0 as e,Y as n,Z as t,D as p}from"./framework-3845b112.js";const r={},c=e('<h2 id="web" tabindex="-1"><a class="header-anchor" href="#web" aria-hidden="true">#</a> WEB</h2><h3 id="_20-requestmappinghandlermapping-与-requestmappinghandleradapter" tabindex="-1"><a class="header-anchor" href="#_20-requestmappinghandlermapping-与-requestmappinghandleradapter" aria-hidden="true">#</a> 20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter</h3><p>RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 俩是一对，分别用来</p><ul><li>处理 @RequestMapping 映射</li><li>调用控制器方法、并处理方法参数与方法返回值</li></ul><h4 id="演示1-dispatcherservlet-初始化" tabindex="-1"><a class="header-anchor" href="#演示1-dispatcherservlet-初始化" aria-hidden="true">#</a> 演示1 - DispatcherServlet 初始化</h4><h4 id="收获💡" tabindex="-1"><a class="header-anchor" href="#收获💡" aria-hidden="true">#</a> 收获💡</h4><ol><li>DispatcherServlet 是在第一次被访问时执行初始化, 也可以通过配置修改为 Tomcat 启动后就初始化</li><li>在初始化时会从 Spring 容器中找一些 Web 需要的组件, 如 HandlerMapping、HandlerAdapter 等，并逐一调用它们的初始化</li><li>RequestMappingHandlerMapping 初始化时，会收集所有 @RequestMapping 映射信息，封装为 Map，其中 <ul><li>key 是 RequestMappingInfo 类型，包括请求路径、请求方法等信息</li><li>value 是 HandlerMethod 类型，包括控制器方法对象、控制器对象</li><li>有了这个 Map，就可以在请求到达时，快速完成映射，找到 HandlerMethod 并与匹配的拦截器一起返回给 DispatcherServlet</li></ul></li><li>RequestMappingHandlerAdapter 初始化时，会准备 HandlerMethod 调用时需要的各个组件，如： <ul><li>HandlerMethodArgumentResolver 解析控制器方法参数</li><li>HandlerMethodReturnValueHandler 处理控制器方法返回值</li></ul></li></ol><h4 id="演示2-自定义参数与返回值处理器" tabindex="-1"><a class="header-anchor" href="#演示2-自定义参数与返回值处理器" aria-hidden="true">#</a> 演示2 - 自定义参数与返回值处理器</h4><h5 id="代码参考" tabindex="-1"><a class="header-anchor" href="#代码参考" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a20.TokenArgumentResolver</strong> ，<strong>com.itheima.a20.YmlReturnValueHandler</strong></p><h4 id="收获💡-1" tabindex="-1"><a class="header-anchor" href="#收获💡-1" aria-hidden="true">#</a> 收获💡</h4><ol><li>体会参数解析器的作用</li><li>体会返回值处理器的作用</li></ol><h3 id="_21-参数解析器" tabindex="-1"><a class="header-anchor" href="#_21-参数解析器" aria-hidden="true">#</a> 21) 参数解析器</h3><h4 id="演示-常见参数解析器" tabindex="-1"><a class="header-anchor" href="#演示-常见参数解析器" aria-hidden="true">#</a> 演示 - 常见参数解析器</h4><h5 id="代码参考-1" tabindex="-1"><a class="header-anchor" href="#代码参考-1" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a21</strong> 包</p><h4 id="收获💡-2" tabindex="-1"><a class="header-anchor" href="#收获💡-2" aria-hidden="true">#</a> 收获💡</h4><ol><li>初步了解 RequestMappingHandlerAdapter 的调用过程 <ol><li>控制器方法被封装为 HandlerMethod</li><li>准备对象绑定与类型转换</li><li>准备 ModelAndViewContainer 用来存储中间 Model 结果</li><li>解析每个参数值</li></ol></li><li>解析参数依赖的就是各种参数解析器，它们都有两个重要方法 <ul><li>supportsParameter 判断是否支持方法参数</li><li>resolveArgument 解析方法参数</li></ul></li><li>常见参数的解析 <ul><li>@RequestParam</li><li>省略 @RequestParam</li><li>@RequestParam(defaultValue)</li><li>MultipartFile</li><li>@PathVariable</li><li>@RequestHeader</li><li>@CookieValue</li><li>@Value</li><li>HttpServletRequest 等</li><li>@ModelAttribute</li><li>省略 @ModelAttribute</li><li>@RequestBody</li></ul></li><li>组合模式在 Spring 中的体现</li><li>@RequestParam, @CookieValue 等注解中的参数名、默认值, 都可以写成活的, 即从 ${ } #{ }中获取</li></ol><h3 id="_22-参数名解析" tabindex="-1"><a class="header-anchor" href="#_22-参数名解析" aria-hidden="true">#</a> 22) 参数名解析</h3><h4 id="演示-两种方法获取参数名" tabindex="-1"><a class="header-anchor" href="#演示-两种方法获取参数名" aria-hidden="true">#</a> 演示 - 两种方法获取参数名</h4><h5 id="代码参考-2" tabindex="-1"><a class="header-anchor" href="#代码参考-2" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a22.A22</strong></p><h4 id="收获💡-3" tabindex="-1"><a class="header-anchor" href="#收获💡-3" aria-hidden="true">#</a> 收获💡</h4><ol><li>如果编译时添加了 -parameters 可以生成参数表, 反射时就可以拿到参数名</li><li>如果编译时添加了 -g 可以生成调试信息, 但分为两种情况 <ul><li>普通类, 会包含局部变量表, 用 asm 可以拿到参数名</li><li>接口, 不会包含局部变量表, 无法获得参数名 <ul><li>这也是 MyBatis 在实现 Mapper 接口时为何要提供 @Param 注解来辅助获得参数名</li></ul></li></ul></li></ol><h3 id="_23-对象绑定与类型转换" tabindex="-1"><a class="header-anchor" href="#_23-对象绑定与类型转换" aria-hidden="true">#</a> 23) 对象绑定与类型转换</h3><h4 id="底层第一套转换接口与实现" tabindex="-1"><a class="header-anchor" href="#底层第一套转换接口与实现" aria-hidden="true">#</a> 底层第一套转换接口与实现</h4>',26),d=n("ul",null,[n("li",null,"Printer 把其它类型转为 String"),n("li",null,"Parser 把 String 转为其它类型"),n("li",null,"Formatter 综合 Printer 与 Parser 功能"),n("li",null,"Converter 把类型 S 转为类型 T"),n("li",null,"Printer、Parser、Converter 经过适配转换成 GenericConverter 放入 Converters 集合"),n("li",null,"FormattingConversionService 利用其它们实现转换")],-1),u=n("h4",{id:"底层第二套转换接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#底层第二套转换接口","aria-hidden":"true"},"#"),t(" 底层第二套转换接口")],-1),h=n("ul",null,[n("li",null,"PropertyEditor 把 String 与其它类型相互转换"),n("li",null,"PropertyEditorRegistry 可以注册多个 PropertyEditor 对象"),n("li",null,"与第一套接口直接可以通过 FormatterPropertyEditorAdapter 来进行适配")],-1),k=n("h4",{id:"高层接口与实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#高层接口与实现","aria-hidden":"true"},"#"),t(" 高层接口与实现")],-1),v=e('<ul><li>它们都实现了 TypeConverter 这个高层转换接口，在转换时，会用到 TypeConverter Delegate 委派ConversionService 与 PropertyEditorRegistry 真正执行转换（Facade 门面模式） <ul><li>首先看是否有自定义转换器, @InitBinder 添加的即属于这种 (用了适配器模式把 Formatter 转为需要的 PropertyEditor)</li><li>再看有没有 ConversionService 转换</li><li>再利用默认的 PropertyEditor 转换</li><li>最后有一些特殊处理</li></ul></li><li>SimpleTypeConverter 仅做类型转换</li><li>BeanWrapperImpl 为 bean 的属性赋值，当需要时做类型转换，走 Property</li><li>DirectFieldAccessor 为 bean 的属性赋值，当需要时做类型转换，走 Field</li><li>ServletRequestDataBinder 为 bean 的属性执行绑定，当需要时做类型转换，根据 directFieldAccess 选择走 Property 还是 Field，具备校验与获取校验结果功能</li></ul><h4 id="演示1-类型转换与数据绑定" tabindex="-1"><a class="header-anchor" href="#演示1-类型转换与数据绑定" aria-hidden="true">#</a> 演示1 - 类型转换与数据绑定</h4><h5 id="代码参考-3" tabindex="-1"><a class="header-anchor" href="#代码参考-3" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a23</strong> 包</p><h4 id="收获💡-4" tabindex="-1"><a class="header-anchor" href="#收获💡-4" aria-hidden="true">#</a> 收获💡</h4><p>基本的类型转换与数据绑定用法</p><ul><li>SimpleTypeConverter</li><li>BeanWrapperImpl</li><li>DirectFieldAccessor</li><li>ServletRequestDataBinder</li></ul><h4 id="演示2-数据绑定工厂" tabindex="-1"><a class="header-anchor" href="#演示2-数据绑定工厂" aria-hidden="true">#</a> 演示2 - 数据绑定工厂</h4><h5 id="代码参考-4" tabindex="-1"><a class="header-anchor" href="#代码参考-4" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a23.TestServletDataBinderFactory</strong></p><h4 id="收获💡-5" tabindex="-1"><a class="header-anchor" href="#收获💡-5" aria-hidden="true">#</a> 收获💡</h4><p>ServletRequestDataBinderFactory 的用法和扩展点</p><ol><li>可以解析控制器的 @InitBinder 标注方法作为扩展点，添加自定义转换器 <ul><li>控制器私有范围</li></ul></li><li>可以通过 ConfigurableWebBindingInitializer 配置 ConversionService 作为扩展点，添加自定义转换器 <ul><li>公共范围</li></ul></li><li>同时加了 @InitBinder 和 ConversionService 的转换优先级 <ol><li>优先采用 @InitBinder 的转换器</li><li>其次使用 ConversionService 的转换器</li><li>使用默认转换器</li><li>特殊处理（例如有参构造）</li></ol></li></ol><h4 id="演示3-获取泛型参数" tabindex="-1"><a class="header-anchor" href="#演示3-获取泛型参数" aria-hidden="true">#</a> 演示3 - 获取泛型参数</h4><h5 id="代码参考-5" tabindex="-1"><a class="header-anchor" href="#代码参考-5" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a23.sub</strong> 包</p><h4 id="收获💡-6" tabindex="-1"><a class="header-anchor" href="#收获💡-6" aria-hidden="true">#</a> 收获💡</h4><ol><li>java api 获取泛型参数</li><li>spring api 获取泛型参数</li></ol><h3 id="_24-controlleradvice-之-initbinder" tabindex="-1"><a class="header-anchor" href="#_24-controlleradvice-之-initbinder" aria-hidden="true">#</a> 24) @ControllerAdvice 之 @InitBinder</h3><h4 id="演示-准备-initbinder" tabindex="-1"><a class="header-anchor" href="#演示-准备-initbinder" aria-hidden="true">#</a> 演示 - 准备 @InitBinder</h4><p><strong>准备 @InitBinder</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>',21),m=e('<ul><li>RequestMappingHandlerAdapter 在图中缩写为 HandlerAdapter</li><li>HandlerMethodArgumentResolverComposite 在图中缩写为 ArgumentResolvers</li><li>HandlerMethodReturnValueHandlerComposite 在图中缩写为 ReturnValueHandlers</li></ul><h4 id="收获💡-7" tabindex="-1"><a class="header-anchor" href="#收获💡-7" aria-hidden="true">#</a> 收获💡</h4><ol><li>RequestMappingHandlerAdapter 初始化时会解析 @ControllerAdvice 中的 @InitBinder 方法</li><li>RequestMappingHandlerAdapter 会以类为单位，在该类首次使用时，解析此类的 @InitBinder 方法</li><li>以上两种 @InitBinder 的解析结果都会缓存来避免重复解析</li><li>控制器方法调用时，会综合利用本类的 @InitBinder 方法和 @ControllerAdvice 中的 @InitBinder 方法创建绑定工厂</li></ol><h3 id="_25-控制器方法执行流程" tabindex="-1"><a class="header-anchor" href="#_25-控制器方法执行流程" aria-hidden="true">#</a> 25) 控制器方法执行流程</h3><h4 id="图1" tabindex="-1"><a class="header-anchor" href="#图1" aria-hidden="true">#</a> 图1</h4>',5),b=e('<p>HandlerMethod 需要</p><ul><li>bean 即是哪个 Controller</li><li>method 即是 Controller 中的哪个方法</li></ul><p>ServletInvocableHandlerMethod 需要</p><ul><li>WebDataBinderFactory 负责对象绑定、类型转换</li><li>ParameterNameDiscoverer 负责参数名解析</li><li>HandlerMethodArgumentResolverComposite 负责解析参数</li><li>HandlerMethodReturnValueHandlerComposite 负责处理返回值</li></ul><h4 id="图2" tabindex="-1"><a class="header-anchor" href="#图2" aria-hidden="true">#</a> 图2</h4>',5),g=n("h4",{id:"图3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#图3","aria-hidden":"true"},"#"),t(" 图3")],-1),f=e('<h3 id="_26-controlleradvice-之-modelattribute" tabindex="-1"><a class="header-anchor" href="#_26-controlleradvice-之-modelattribute" aria-hidden="true">#</a> 26) @ControllerAdvice 之 @ModelAttribute</h3><h4 id="演示-准备-modelattribute" tabindex="-1"><a class="header-anchor" href="#演示-准备-modelattribute" aria-hidden="true">#</a> 演示 - 准备 @ModelAttribute</h4><h5 id="代码参考-6" tabindex="-1"><a class="header-anchor" href="#代码参考-6" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a26</strong> 包</p><p><strong>准备 @ModelAttribute</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>',5),x=e('<h4 id="收获💡-8" tabindex="-1"><a class="header-anchor" href="#收获💡-8" aria-hidden="true">#</a> 收获💡</h4><ol><li>RequestMappingHandlerAdapter 初始化时会解析 @ControllerAdvice 中的 @ModelAttribute 方法</li><li>RequestMappingHandlerAdapter 会以类为单位，在该类首次使用时，解析此类的 @ModelAttribute 方法</li><li>以上两种 @ModelAttribute 的解析结果都会缓存来避免重复解析</li><li>控制器方法调用时，会综合利用本类的 @ModelAttribute 方法和 @ControllerAdvice 中的 @ModelAttribute 方法创建模型工厂</li></ol><h3 id="_27-返回值处理器" tabindex="-1"><a class="header-anchor" href="#_27-返回值处理器" aria-hidden="true">#</a> 27) 返回值处理器</h3><h4 id="演示-常见返回值处理器" tabindex="-1"><a class="header-anchor" href="#演示-常见返回值处理器" aria-hidden="true">#</a> 演示 - 常见返回值处理器</h4><h5 id="代码参考-7" tabindex="-1"><a class="header-anchor" href="#代码参考-7" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a27</strong> 包</p><h4 id="收获💡-9" tabindex="-1"><a class="header-anchor" href="#收获💡-9" aria-hidden="true">#</a> 收获💡</h4><ol><li>常见的返回值处理器 <ul><li>ModelAndView，分别获取其模型和视图名，放入 ModelAndViewContainer</li><li>返回值类型为 String 时，把它当做视图名，放入 ModelAndViewContainer</li><li>返回值添加了 @ModelAttribute 注解时，将返回值作为模型，放入 ModelAndViewContainer <ul><li>此时需找到默认视图名</li></ul></li><li>返回值省略 @ModelAttribute 注解且返回非简单类型时，将返回值作为模型，放入 ModelAndViewContainer <ul><li>此时需找到默认视图名</li></ul></li><li>返回值类型为 ResponseEntity 时 <ul><li>此时走 MessageConverter，并设置 ModelAndViewContainer.requestHandled 为 true</li></ul></li><li>返回值类型为 HttpHeaders 时 <ul><li>会设置 ModelAndViewContainer.requestHandled 为 true</li></ul></li><li>返回值添加了 @ResponseBody 注解时 <ul><li>此时走 MessageConverter，并设置 ModelAndViewContainer.requestHandled 为 true</li></ul></li></ul></li><li>组合模式在 Spring 中的体现 + 1</li></ol><h3 id="_28-messageconverter" tabindex="-1"><a class="header-anchor" href="#_28-messageconverter" aria-hidden="true">#</a> 28) MessageConverter</h3><h4 id="演示-messageconverter-的作用" tabindex="-1"><a class="header-anchor" href="#演示-messageconverter-的作用" aria-hidden="true">#</a> 演示 - MessageConverter 的作用</h4><h5 id="代码参考-8" tabindex="-1"><a class="header-anchor" href="#代码参考-8" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a28.A28</strong></p><h4 id="收获💡-10" tabindex="-1"><a class="header-anchor" href="#收获💡-10" aria-hidden="true">#</a> 收获💡</h4><ol><li>MessageConverter 的作用 <ul><li>@ResponseBody 是返回值处理器解析的</li><li>但具体转换工作是 MessageConverter 做的</li></ul></li><li>如何选择 MediaType <ul><li>首先看 @RequestMapping 上有没有指定</li><li>其次看 request 的 Accept 头有没有指定</li><li>最后按 MessageConverter 的顺序, 谁能谁先转换</li></ul></li></ol><h3 id="_29-controlleradvice-之-responsebodyadvice" tabindex="-1"><a class="header-anchor" href="#_29-controlleradvice-之-responsebodyadvice" aria-hidden="true">#</a> 29) @ControllerAdvice 之 ResponseBodyAdvice</h3><h4 id="演示-responsebodyadvice-增强" tabindex="-1"><a class="header-anchor" href="#演示-responsebodyadvice-增强" aria-hidden="true">#</a> 演示 - ResponseBodyAdvice 增强</h4><h5 id="代码参考-9" tabindex="-1"><a class="header-anchor" href="#代码参考-9" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a29</strong> 包</p><p><strong>ResponseBodyAdvice 增强</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>',19),H=e(`<h4 id="收获💡-11" tabindex="-1"><a class="header-anchor" href="#收获💡-11" aria-hidden="true">#</a> 收获💡</h4><ol><li>ResponseBodyAdvice 返回响应体前包装</li></ol><h3 id="_30-异常解析器" tabindex="-1"><a class="header-anchor" href="#_30-异常解析器" aria-hidden="true">#</a> 30) 异常解析器</h3><h4 id="演示-exceptionhandlerexceptionresolver" tabindex="-1"><a class="header-anchor" href="#演示-exceptionhandlerexceptionresolver" aria-hidden="true">#</a> 演示 - ExceptionHandlerExceptionResolver</h4><h5 id="代码参考-10" tabindex="-1"><a class="header-anchor" href="#代码参考-10" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a30.A30</strong></p><h4 id="收获💡-12" tabindex="-1"><a class="header-anchor" href="#收获💡-12" aria-hidden="true">#</a> 收获💡</h4><ol><li>它能够重用参数解析器、返回值处理器，实现组件重用</li><li>它能够支持嵌套异常</li></ol><h3 id="_31-controlleradvice-之-exceptionhandler" tabindex="-1"><a class="header-anchor" href="#_31-controlleradvice-之-exceptionhandler" aria-hidden="true">#</a> 31) @ControllerAdvice 之 @ExceptionHandler</h3><h4 id="演示-准备-exceptionhandler" tabindex="-1"><a class="header-anchor" href="#演示-准备-exceptionhandler" aria-hidden="true">#</a> 演示 - 准备 @ExceptionHandler</h4><h5 id="代码参考-11" tabindex="-1"><a class="header-anchor" href="#代码参考-11" aria-hidden="true">#</a> 代码参考</h5><p><strong>com.itheima.a31</strong> 包</p><h4 id="收获💡-13" tabindex="-1"><a class="header-anchor" href="#收获💡-13" aria-hidden="true">#</a> 收获💡</h4><ol><li>ExceptionHandlerExceptionResolver 初始化时会解析 @ControllerAdvice 中的 @ExceptionHandler 方法</li><li>ExceptionHandlerExceptionResolver 会以类为单位，在该类首次处理异常时，解析此类的 @ExceptionHandler 方法</li><li>以上两种 @ExceptionHandler 的解析结果都会缓存来避免重复解析</li></ol><h3 id="_32-tomcat-异常处理" tabindex="-1"><a class="header-anchor" href="#_32-tomcat-异常处理" aria-hidden="true">#</a> 32) Tomcat 异常处理</h3><ul><li><p>我们知道 @ExceptionHandler 只能处理发生在 mvc 流程中的异常，例如控制器内、拦截器内，那么如果是 Filter 出现了异常，如何进行处理呢？</p></li><li><p>在 Spring Boot 中，是这么实现的：</p><ol><li>因为内嵌了 Tomcat 容器，因此可以配置 Tomcat 的错误页面，Filter 与 错误页面之间是通过请求转发跳转的，可以在这里做手脚</li><li>先通过 ErrorPageRegistrarBeanPostProcessor 这个后处理器配置错误页面地址，默认为 <code>/error</code> 也可以通过 <code>\${server.error.path}</code> 进行配置</li><li>当 Filter 发生异常时，不会走 Spring 流程，但会走 Tomcat 的错误处理，于是就希望转发至 <code>/error</code> 这个地址 <ul><li>当然，如果没有 @ExceptionHandler，那么最终也会走到 Tomcat 的错误处理</li></ul></li><li>Spring Boot 又提供了一个 BasicErrorController，它就是一个标准 @Controller，@RequestMapping 配置为 <code>/error</code>，所以处理异常的职责就又回到了 Spring</li><li>异常信息由于会被 Tomcat 放入 request 作用域，因此 BasicErrorController 里也能获取到</li><li>具体异常信息会由 DefaultErrorAttributes 封装好</li><li>BasicErrorController 通过 Accept 头判断需要生成哪种 MediaType 的响应 <ul><li>如果要的不是 text/html，走 MessageConverter 流程</li><li>如果需要 text/html，走 mvc 流程，此时又分两种情况 <ul><li>配置了 ErrorViewResolver，根据状态码去找 View</li><li>没配置或没找到，用 BeanNameViewResolver 根据一个固定为 error 的名字找到 View，即所谓的 WhitelabelErrorView</li></ul></li></ul></li></ol></li></ul><blockquote><p><em><strong>评价</strong></em></p><ul><li>一个错误处理搞得这么复杂，就问恶心不？</li></ul></blockquote><h4 id="演示1-错误页处理" tabindex="-1"><a class="header-anchor" href="#演示1-错误页处理" aria-hidden="true">#</a> 演示1 - 错误页处理</h4><h5 id="关键代码" tabindex="-1"><a class="header-anchor" href="#关键代码" aria-hidden="true">#</a> 关键代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span> <span class="token comment">// ⬅️修改了 Tomcat 服务器默认错误地址, 出错时使用请求转发方式跳转</span>
<span class="token keyword">public</span> <span class="token class-name">ErrorPageRegistrar</span> <span class="token function">errorPageRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> webServerFactory <span class="token operator">-&gt;</span> webServerFactory<span class="token punctuation">.</span><span class="token function">addErrorPages</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorPage</span><span class="token punctuation">(</span><span class="token string">&quot;/error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span> <span class="token comment">// ⬅️TomcatServletWebServerFactory 初始化前用它增强, 注册所有 ErrorPageRegistrar</span>
<span class="token keyword">public</span> <span class="token class-name">ErrorPageRegistrarBeanPostProcessor</span> <span class="token function">errorPageRegistrarBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorPageRegistrarBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收获💡-14" tabindex="-1"><a class="header-anchor" href="#收获💡-14" aria-hidden="true">#</a> 收获💡</h4><ol><li>Tomcat 的错误页处理手段</li></ol><h4 id="演示2-basicerrorcontroller" tabindex="-1"><a class="header-anchor" href="#演示2-basicerrorcontroller" aria-hidden="true">#</a> 演示2 - BasicErrorController</h4><h5 id="关键代码-1" tabindex="-1"><a class="header-anchor" href="#关键代码-1" aria-hidden="true">#</a> 关键代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span> <span class="token comment">// ⬅️ErrorProperties 封装环境键值, ErrorAttributes 控制有哪些错误信息</span>
<span class="token keyword">public</span> <span class="token class-name">BasicErrorController</span> <span class="token function">basicErrorController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ErrorProperties</span> errorProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    errorProperties<span class="token punctuation">.</span><span class="token function">setIncludeException</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BasicErrorController</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultErrorAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span> <span class="token comment">// ⬅️名称为 error 的视图, 作为 BasicErrorController 的 text/html 响应结果</span>
<span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> model<span class="token punctuation">,</span> 
            <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> 
            <span class="token class-name">HttpServletResponse</span> response
        <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
                    &lt;h3&gt;服务器内部错误&lt;/h3&gt;
                    &quot;&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span> <span class="token comment">// ⬅️收集容器中所有 View 对象, bean 的名字作为视图名</span>
<span class="token keyword">public</span> <span class="token class-name">ViewResolver</span> <span class="token function">viewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanNameViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收获💡-15" tabindex="-1"><a class="header-anchor" href="#收获💡-15" aria-hidden="true">#</a> 收获💡</h4><ol><li>Spring Boot 中 BasicErrorController 如何工作</li></ol><h3 id="_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter" tabindex="-1"><a class="header-anchor" href="#_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter" aria-hidden="true">#</a> 33) BeanNameUrlHandlerMapping 与 SimpleControllerHandlerAdapter</h3><h4 id="演示-本组映射器和适配器" tabindex="-1"><a class="header-anchor" href="#演示-本组映射器和适配器" aria-hidden="true">#</a> 演示 - 本组映射器和适配器</h4><h5 id="关键代码-2" tabindex="-1"><a class="header-anchor" href="#关键代码-2" aria-hidden="true">#</a> 关键代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">BeanNameUrlHandlerMapping</span> <span class="token function">beanNameUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanNameUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SimpleControllerHandlerAdapter</span> <span class="token function">simpleControllerHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleControllerHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;/c3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Controller</span> <span class="token function">controller3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;this is c3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收获💡-16" tabindex="-1"><a class="header-anchor" href="#收获💡-16" aria-hidden="true">#</a> 收获💡</h4><ol><li>BeanNameUrlHandlerMapping，以 / 开头的 bean 的名字会被当作映射路径</li><li>这些 bean 本身当作 handler，要求实现 Controller 接口</li><li>SimpleControllerHandlerAdapter，调用 handler</li><li>模拟实现这组映射器和适配器</li></ol><h3 id="_34-routerfunctionmapping-与-handlerfunctionadapter" tabindex="-1"><a class="header-anchor" href="#_34-routerfunctionmapping-与-handlerfunctionadapter" aria-hidden="true">#</a> 34) RouterFunctionMapping 与 HandlerFunctionAdapter</h3><h4 id="演示-本组映射器和适配器-1" tabindex="-1"><a class="header-anchor" href="#演示-本组映射器和适配器-1" aria-hidden="true">#</a> 演示 - 本组映射器和适配器</h4><h5 id="关键代码-3" tabindex="-1"><a class="header-anchor" href="#关键代码-3" aria-hidden="true">#</a> 关键代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RouterFunctionMapping</span> <span class="token function">routerFunctionMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RouterFunctionMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">HandlerFunctionAdapter</span> <span class="token function">handlerFunctionAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HandlerFunctionAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">r1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//           ⬇️映射条件   ⬇️handler</span>
    <span class="token keyword">return</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/r1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request <span class="token operator">-&gt;</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;this is r1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收获💡-17" tabindex="-1"><a class="header-anchor" href="#收获💡-17" aria-hidden="true">#</a> 收获💡</h4><ol><li>RouterFunctionMapping, 通过 RequestPredicate 条件映射</li><li>handler 要实现 HandlerFunction 接口</li><li>HandlerFunctionAdapter, 调用 handler</li></ol><h3 id="_35-simpleurlhandlermapping-与-httprequesthandleradapter" tabindex="-1"><a class="header-anchor" href="#_35-simpleurlhandlermapping-与-httprequesthandleradapter" aria-hidden="true">#</a> 35) SimpleUrlHandlerMapping 与 HttpRequestHandlerAdapter</h3><h4 id="演示1-本组映射器和适配器" tabindex="-1"><a class="header-anchor" href="#演示1-本组映射器和适配器" aria-hidden="true">#</a> 演示1 - 本组映射器和适配器</h4><h5 id="代码参考-12" tabindex="-1"><a class="header-anchor" href="#代码参考-12" aria-hidden="true">#</a> 代码参考</h5><p><strong>org.springframework.boot.autoconfigure.web.servlet.A35</strong></p><h5 id="关键代码-4" tabindex="-1"><a class="header-anchor" href="#关键代码-4" aria-hidden="true">#</a> 关键代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SimpleUrlHandlerMapping</span> <span class="token function">simpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleUrlHandlerMapping</span> handlerMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">&gt;</span></span> map 
        <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handlerMapping<span class="token punctuation">.</span><span class="token function">setUrlMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> handlerMapping<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">HttpRequestHandlerAdapter</span> <span class="token function">httpRequestHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResourceHttpRequestHandler</span> <span class="token function">handler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ResourceHttpRequestHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;static/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;/img/**&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResourceHttpRequestHandler</span> <span class="token function">handler2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ResourceHttpRequestHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;images/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收获💡-18" tabindex="-1"><a class="header-anchor" href="#收获💡-18" aria-hidden="true">#</a> 收获💡</h4><ol><li>SimpleUrlHandlerMapping 不会在初始化时收集映射信息，需要手动收集</li><li>SimpleUrlHandlerMapping 映射路径</li><li>ResourceHttpRequestHandler 作为静态资源 handler</li><li>HttpRequestHandlerAdapter, 调用此 handler</li></ol><h4 id="演示2-静态资源解析优化" tabindex="-1"><a class="header-anchor" href="#演示2-静态资源解析优化" aria-hidden="true">#</a> 演示2 - 静态资源解析优化</h4><h5 id="关键代码-5" tabindex="-1"><a class="header-anchor" href="#关键代码-5" aria-hidden="true">#</a> 关键代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResourceHttpRequestHandler</span> <span class="token function">handler1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ResourceHttpRequestHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;static/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span><span class="token function">setResourceResolvers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
        	<span class="token comment">// ⬇️缓存优化</span>
            <span class="token keyword">new</span> <span class="token class-name">CachingResourceResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentMapCache</span><span class="token punctuation">(</span><span class="token string">&quot;cache1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        	<span class="token comment">// ⬇️压缩优化</span>
            <span class="token keyword">new</span> <span class="token class-name">EncodedResourceResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        	<span class="token comment">// ⬇️原始资源解析</span>
            <span class="token keyword">new</span> <span class="token class-name">PathResourceResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收获💡-19" tabindex="-1"><a class="header-anchor" href="#收获💡-19" aria-hidden="true">#</a> 收获💡</h4><ol><li>责任链模式体现</li><li>压缩文件需要手动生成</li></ol><h4 id="演示3-欢迎页" tabindex="-1"><a class="header-anchor" href="#演示3-欢迎页" aria-hidden="true">#</a> 演示3 - 欢迎页</h4><h5 id="关键代码-6" tabindex="-1"><a class="header-anchor" href="#关键代码-6" aria-hidden="true">#</a> 关键代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">WelcomePageHandlerMapping</span> <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:static/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> <span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SimpleControllerHandlerAdapter</span> <span class="token function">simpleControllerHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleControllerHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收获💡-20" tabindex="-1"><a class="header-anchor" href="#收获💡-20" aria-hidden="true">#</a> 收获💡</h4><ol><li>欢迎页支持静态欢迎页与动态欢迎页</li><li>WelcomePageHandlerMapping 映射欢迎页（即只映射 &#39;/&#39;） <ul><li>它内置的 handler ParameterizableViewController 作用是不执行逻辑，仅根据视图名找视图</li><li>视图名固定为 forward:index.html</li></ul></li><li>SimpleControllerHandlerAdapter, 调用 handler <ul><li>转发至 /index.html</li><li>处理 /index.html 又会走上面的静态资源处理流程</li></ul></li></ol><h4 id="映射器与适配器小结" tabindex="-1"><a class="header-anchor" href="#映射器与适配器小结" aria-hidden="true">#</a> 映射器与适配器小结</h4><ol><li>HandlerMapping 负责建立请求与控制器之间的映射关系 <ul><li>RequestMappingHandlerMapping (与 @RequestMapping 匹配)</li><li>WelcomePageHandlerMapping (/)</li><li>BeanNameUrlHandlerMapping (与 bean 的名字匹配 以 / 开头)</li><li>RouterFunctionMapping (函数式 RequestPredicate, HandlerFunction)</li><li>SimpleUrlHandlerMapping (静态资源 通配符 /** /img/**)</li><li>之间也会有顺序问题, boot 中默认顺序如上</li></ul></li><li>HandlerAdapter 负责实现对各种各样的 handler 的适配调用 <ul><li>RequestMappingHandlerAdapter 处理：@RequestMapping 方法 <ul><li>参数解析器、返回值处理器体现了组合模式</li></ul></li><li>SimpleControllerHandlerAdapter 处理：Controller 接口</li><li>HandlerFunctionAdapter 处理：HandlerFunction 函数式接口</li><li>HttpRequestHandlerAdapter 处理：HttpRequestHandler 接口 (静态资源处理)</li><li>这也是典型适配器模式体现</li></ul></li></ol><h3 id="_36-mvc-处理流程" tabindex="-1"><a class="header-anchor" href="#_36-mvc-处理流程" aria-hidden="true">#</a> 36) mvc 处理流程</h3><p>当浏览器发送一个请求 <code>http://localhost:8080/hello</code> 后，请求到达服务器，其处理流程是：</p><ol><li><p>服务器提供了 DispatcherServlet，它使用的是标准 Servlet 技术</p><ul><li>路径：默认映射路径为 <code>/</code>，即会匹配到所有请求 URL，可作为请求的统一入口，也被称之为<strong>前控制器</strong><ul><li>jsp 不会匹配到 DispatcherServlet</li><li>其它有路径的 Servlet 匹配优先级也高于 DispatcherServlet</li></ul></li><li>创建：在 Boot 中，由 DispatcherServletAutoConfiguration 这个自动配置类提供 DispatcherServlet 的 bean</li><li>初始化：DispatcherServlet 初始化时会优先到容器里寻找各种组件，作为它的成员变量 <ul><li>HandlerMapping，初始化时记录映射关系</li><li>HandlerAdapter，初始化时准备参数解析器、返回值处理器、消息转换器</li><li>HandlerExceptionResolver，初始化时准备参数解析器、返回值处理器、消息转换器</li><li>ViewResolver</li></ul></li></ul></li><li><p>DispatcherServlet 会利用 RequestMappingHandlerMapping 查找控制器方法</p><ul><li><p>例如根据 /hello 路径找到 @RequestMapping(&quot;/hello&quot;) 对应的控制器方法</p></li><li><p>控制器方法会被封装为 HandlerMethod 对象，并结合匹配到的拦截器一起返回给 DispatcherServlet</p></li><li><p>HandlerMethod 和拦截器合在一起称为 HandlerExecutionChain（调用链）对象</p></li></ul></li><li><p>DispatcherServlet 接下来会：</p><ol><li>调用拦截器的 preHandle 方法</li><li>RequestMappingHandlerAdapter 调用 handle 方法，准备数据绑定工厂、模型工厂、ModelAndViewContainer、将 HandlerMethod 完善为 ServletInvocableHandlerMethod <ul><li>@ControllerAdvice 全局增强点1️⃣：补充模型数据</li><li>@ControllerAdvice 全局增强点2️⃣：补充自定义类型转换器</li><li>使用 HandlerMethodArgumentResolver 准备参数 <ul><li>@ControllerAdvice 全局增强点3️⃣：RequestBody 增强</li></ul></li><li>调用 ServletInvocableHandlerMethod</li><li>使用 HandlerMethodReturnValueHandler 处理返回值 <ul><li>@ControllerAdvice 全局增强点4️⃣：ResponseBody 增强</li></ul></li><li>根据 ModelAndViewContainer 获取 ModelAndView <ul><li>如果返回的 ModelAndView 为 null，不走第 4 步视图解析及渲染流程 <ul><li>例如，有的返回值处理器调用了 HttpMessageConverter 来将结果转换为 JSON，这时 ModelAndView 就为 null</li></ul></li><li>如果返回的 ModelAndView 不为 null，会在第 4 步走视图解析及渲染流程</li></ul></li></ul></li><li>调用拦截器的 postHandle 方法</li><li>处理异常或视图渲染 <ul><li>如果 1~3 出现异常，走 ExceptionHandlerExceptionResolver 处理异常流程 <ul><li>@ControllerAdvice 全局增强点5️⃣：@ExceptionHandler 异常处理</li></ul></li><li>正常，走视图解析及渲染流程</li></ul></li><li>调用拦截器的 afterCompletion 方法</li></ol></li></ol>`,62);function M(w,R){const a=p("Mermaid");return l(),o("div",null,[c,s(a,{id:"mermaid-292",code:"eJx9kcEOgjAMhu99ir4AB+VKlhiNXk14gmVWskQ20xEuIs/uAgzGMNy6r1+z9Z96SecuWlYsa4Cr5Vo2DTFmWSfwztr4wwZLdp7CMItna1pi33T4AUQsqelvZIi1mls9fFN7Pe60NSVxqxVNfLpTm2prwAZh0WXZ7sxOD62fXdYAmPb22wo8PeTb1wcIxUAje0wjdo/BPabuXMZ6HvQ81aEohoc8pSIhwno+uzUP35TQ8ZfWcIn/H4/z+gEC772Y"}),d,u,s(a,{id:"mermaid-328",code:"eJxLzkksLnbJTEwvSszl4gooyi9ILSqpdE3JLMkvCkpNzywuKapUyNfVVVB6umSWkgKqAi4uG5vMvJLUorTE5FQ7OzRZmHa8irgAPOUwBA=="}),h,k,s(a,{id:"mermaid-349",code:"eJx9j8EKwjAQRO/5iv5A/6AIahW8iQqel3QsC2lSN2uh4MdbFQ+taa8zb3ZmraMYS6ZaqDGXvsU2+A6ikKx45nl25qZ1GBkpbAPyV6G2hRyGQAopWWB1z3DV2lrEGJKXzpDOQU+4PxC1JKUN+2poNYkpWZ6vspFSwqEmhZksWiATwxbouX0LkfGbP/kT+KqRg3/fZYsF9ihheEb7XcUa5ISao0pvTFGwH9gbWawmEybef9vYn2l4AZSAyUs="}),v,s(a,{id:"mermaid-537",code:"eJx9Uk1PFEEQvc+v6CPEXYMke9kDcZEYOXDBBM89M8Vux5metbtnDXeysCTIGL/RiIlEvIjEg5iQ8G+6Z3+G/bHDTAPh0od+r6ree1UcXuRAI1ghuM9wGgwxEyQiQ0wFwjEeCmAIc/QE0zgB1nM/HivcNIRnEK5ggZcJjYE9xpHI2JZHSy1tLYshuQ0mg9TgT4GNEhCrdJRFOExgNncNxCCLfXFWV4/18xSoWAeeJSNgHHkkNjCkdRA5oxs4yat+3GNFGRWYUOfUKuzReIPAy0cVEDCIdLd+OLe4sNBCDzr6Wex05oMqovbSEroXbnaR3BnL4x30cJUS4cIIdEBtg7dn5C4KgMZ+adoodQqEYCTMBQQ6OEu5UtlF6vxC7n2zPPXuTO2fBrUFN8r0s5XXBvtTdehdRHTWz0E7dtkEZhMWxbpg+upcHrzXYfd5oBM3/+ZbfZmUh9vTk+/qayE//VR/J/JgT+esb4mL5Sze6sUjEkFV0pR+W6UzUV68lqeH5dsjtVs0vZkm1oaVa6VUGu1Pao/jvvMxFwKmLUOaR/Lyg9w9Q6xef22ODXTgx9tlMfZwfTAGNqhT6jhNj3yYUQ4Nk7OaOxfUcn2mJ2P5+VIW+y318bcsfqh/f9TRm/LX5MYCjQLbuXbuxF9bqLfPhoLZ4prXfGNG3eU/SwWZJg=="}),m,s(a,{id:"mermaid-586",code:"eJyVkM1qAlEMhdedp3DZ0voG3ViH0i4sZQp2nZl70It3Es3NjIj67l7/EEVEVyHJd04OqQLFmHsaKdXZrun8QdsA++ZWKioDvohdgA5gY3GdZfb06tNqgh67/er5oPhHWWDWINrbQBxCAoYe876wkWfoS7bOzs3eV93u7XsXAkl8CeIr43rP306/BVPMnIw+PDvoJ1UmurhD9kvpRTDoTyq5j5W0UOgdyrNJT0dNDbYCUUJy6Es9legNjxoVsEZ5SKE5kierDQuxr0g="}),b,s(a,{id:"mermaid-630",code:"eJxtjjuOwkAQRPM5xeQrX8ABWnbRaglICCBuexrUEm4P40aIC4CEREhOQIzICDiPfQ7wDD8j4npV9QqczpBT7BCMHWTKghNKyQKLBgNW0GkodL/GCumBtcTjf2AzQdcOeaOTjGp8iEkHBH6IDbo/SCV3iwaWeayXG5x8itOcBYjDt6fabAaE8997oO5yUaulv5JRrMvVstyv9HeXScKxuspEdR7d4Fg3a9lLLbyIOEpmguoq6JGHSayr07lc7zxXbY/V5qCemuGm3vPNt9MLnF2EBw=="}),g,s(a,{id:"mermaid-634",code:"eJx1kr1OwzAUhfc8hUcQLQ/QAanAAEMXkNhNctVapE5w3CJ2hCgICOL/Ry0IRLtQKgaKVKlvY6ePQWw3JAEx5t5zj79zbwLYbgC1YZngKsN1y8eME5v4mHKEHexzYAgHaE3JAl7Bvk9odQVTxwVWNv3cDKnVlX4dWNMFvkqbno03XZhOVIDXPCf/iPYvs2qjDpSvQeC5TWBBTsNqhoE3GN3AbiOxy6tsj3JMqAGueA64ZepsENhZShqWlUQqLiyguZi1hEiMuAWx0nhaKoDuYlZCk5OhOL2KGauBFYOquirLh1Z0tzfpPst2KG578rMlTg+THS16zm7ZaRIbkpEfsH8m5eVAHvej0Zno30UXHXkQyt6TaB+ZupXmKiYA2ll9FHUGzZeA60pdL3rehJvZBEwLSjSLxPhaHAwQS3eZJma1EhIve1G4n+vH21dt1TX4RpMNHvgeDSCTfDozl40+HInDR30XE6xgfCbdfXE/FuFxQd68i/BVfn3Iznn01vodvKgItHOa3MDr7+lp1XKyR84QTK+Z/TX+vJG6fAMBfEf8"}),f,s(a,{id:"mermaid-650",code:"eJx9Uk1PFEEQvc+v6CPEXYMke9kDcZEYOXDBBM89M8Vux5metbtnDXeysCTIGL/RiIlEvIjEg5iQ8G+6Z3+G/bHDTAPh0oeuV6/ee1UcXuRAI1ghuM9wGgwxEyQiQ0wFwjEeCmAIc/QE0zgB1nM/HircNIBnEK5ggZcJjYE9xpHI2JYHSy1sLYshua1MBqmpPwU2SkCs0lEW4TCB2dw1EIMs9sVZXT3Wz1OgYh14loyAceSB2MCA1kHkjG7gJK/4uIeKMiowoc6pVdij8QaBl4+qQhBUWbSXltC9cLOL5M5YHu+gh6uUCOc60Em0Tb09A3dRwCDSKvrh3OLCQgs96OhnsdOZ9+nSBp0bLwQjYS4g0KlZyJXELlLnF3Lvm8Wpd2dq/zSo9bvxhs92XhMDNPYH69C7iOisn4N27LIJzCZsFeue6atzefBeh93ngU7c/Jtv9WVSHm5PT76rr4X89FP9nciDPZ2zviUulrN4qxePSARVS1P9bZ3OR3nxWp4elm+P1G7RtGdIrBMr10qpNNqf1B7HfedjLgRMWwY0j+TlB7l7hli9/tocG+jMj7fLYuzV9cGYsqk6pQ7T9MiHGeXQMDnruXNHLcczPRnLz5ey2G+pj79l8UP9+6OO3pS/Jjd2aBRY5tq5E39tp94+Gwpmi2te840ZNct/riOZJg=="}),x,s(a,{id:"mermaid-846",code:"eJx9Uk1PFEEQvc+v6CPEXYMke9kDcZEYOXDBBM8908Vux5metbtnDXeysCTIGL/RiIlEvIjEg5iQ8G+6Z3+G/bHDzASylz50vVf13qsS8CIDFsEaxX2Ok2CIuaQRHWImESZ4KIEjLNATzEgMvOd/Gqhw2wKeQbiGJV6ljAB/jCOZ8p0GLHGwjZRAfFeZDhJbfwp8FINcZ6M0wmEMs7kbIAcpaYpzunq8nyXA5CaINB4BF6gB4gML2gSZcbaF46zsJxqoKGUSU+adOoU9RrYovHxUFoKgzKK9soLuhdtdpPbG6nQPPVxnVHrXgUmibevtGbiLmrSkRvNjpOQ0zCQEJh0HuZHSRfrySh18czj97kIfngeVTj/G9nPMeUNNsF1ETZ7Pwbjy/gObtqtig5++ulRH702gfRGYVO2//dZfJsXx7vTsu/6aq08/9d+JOjowWZp7EXI1JTs9MqIRlJS68ruY3kNx9VqdHxdvT/R+XrdmmzgXTq6TUmp0P4k7gPvex0IImLUsaBGp6w9q/wLxasWVOT4weZ/uFvm4UecQmcvohwvLS0st9KBjnuVOZzEwx2JpluUdeG7duximTEDNPDBS8uburuV7Tc/G6vO1yg9b+uNvlf/Q//7okzfFr8mt3VoVrnOVijc2b9c1BbOl1q/51oyqy38NaJkm"}),H])}const q=i(r,[["render",M],["__file","SpringMVC.html.vue"]]);export{q as default};
