const e=JSON.parse('{"key":"v-c1d2aee6","path":"/article/spring/springadvance/spring-advance.html","title":"Springadvance","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Springadvance","description":"高级的Spring语法","category":["Spring"],"tag":["Spring","Advanced"],"head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/article/spring/springadvance/spring-advance.html"}],["meta",{"property":"og:site_name","content":"Pineapple Coding"}],["meta",{"property":"og:title","content":"Springadvance"}],["meta",{"property":"og:description","content":"高级的Spring语法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Advanced"}]]},"headers":[{"level":2,"title":"容器与 bean","slug":"容器与-bean","link":"#容器与-bean","children":[{"level":3,"title":"1) 容器接口","slug":"_1-容器接口","link":"#_1-容器接口","children":[]},{"level":3,"title":"2) 容器实现","slug":"_2-容器实现","link":"#_2-容器实现","children":[]},{"level":3,"title":"3) Bean 的生命周期","slug":"_3-bean-的生命周期","link":"#_3-bean-的生命周期","children":[]},{"level":3,"title":"4) Bean 后处理器","slug":"_4-bean-后处理器","link":"#_4-bean-后处理器","children":[]},{"level":3,"title":"5) BeanFactory 后处理器","slug":"_5-beanfactory-后处理器","link":"#_5-beanfactory-后处理器","children":[]},{"level":3,"title":"6) Aware 接口","slug":"_6-aware-接口","link":"#_6-aware-接口","children":[]},{"level":3,"title":"7) 初始化与销毁","slug":"_7-初始化与销毁","link":"#_7-初始化与销毁","children":[]},{"level":3,"title":"8) Scope","slug":"_8-scope","link":"#_8-scope","children":[]}]},{"level":2,"title":"AOP","slug":"aop","link":"#aop","children":[{"level":3,"title":"9) AOP 实现之 ajc 编译器","slug":"_9-aop-实现之-ajc-编译器","link":"#_9-aop-实现之-ajc-编译器","children":[]},{"level":3,"title":"10) AOP 实现之 agent 类加载","slug":"_10-aop-实现之-agent-类加载","link":"#_10-aop-实现之-agent-类加载","children":[]},{"level":3,"title":"11) AOP 实现之 proxy","slug":"_11-aop-实现之-proxy","link":"#_11-aop-实现之-proxy","children":[]},{"level":3,"title":"12) jdk 动态代理进阶","slug":"_12-jdk-动态代理进阶","link":"#_12-jdk-动态代理进阶","children":[]},{"level":3,"title":"13) cglib 代理进阶","slug":"_13-cglib-代理进阶","link":"#_13-cglib-代理进阶","children":[]},{"level":3,"title":"14) cglib 避免反射调用","slug":"_14-cglib-避免反射调用","link":"#_14-cglib-避免反射调用","children":[]},{"level":3,"title":"15) jdk 和 cglib 在 Spring 中的统一","slug":"_15-jdk-和-cglib-在-spring-中的统一","link":"#_15-jdk-和-cglib-在-spring-中的统一","children":[]},{"level":3,"title":"16) 切点匹配","slug":"_16-切点匹配","link":"#_16-切点匹配","children":[]},{"level":3,"title":"17) 从 @Aspect 到 Advisor","slug":"_17-从-aspect-到-advisor","link":"#_17-从-aspect-到-advisor","children":[]},{"level":3,"title":"18) 静态通知调用","slug":"_18-静态通知调用","link":"#_18-静态通知调用","children":[]},{"level":3,"title":"19) 动态通知调用","slug":"_19-动态通知调用","link":"#_19-动态通知调用","children":[]}]},{"level":2,"title":"WEB","slug":"web","link":"#web","children":[{"level":3,"title":"20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter","slug":"_20-requestmappinghandlermapping-与-requestmappinghandleradapter","link":"#_20-requestmappinghandlermapping-与-requestmappinghandleradapter","children":[]},{"level":3,"title":"21) 参数解析器","slug":"_21-参数解析器","link":"#_21-参数解析器","children":[]},{"level":3,"title":"22) 参数名解析","slug":"_22-参数名解析","link":"#_22-参数名解析","children":[]},{"level":3,"title":"23) 对象绑定与类型转换","slug":"_23-对象绑定与类型转换","link":"#_23-对象绑定与类型转换","children":[]},{"level":3,"title":"24) @ControllerAdvice 之 @InitBinder","slug":"_24-controlleradvice-之-initbinder","link":"#_24-controlleradvice-之-initbinder","children":[]},{"level":3,"title":"25) 控制器方法执行流程","slug":"_25-控制器方法执行流程","link":"#_25-控制器方法执行流程","children":[]},{"level":3,"title":"26) @ControllerAdvice 之 @ModelAttribute","slug":"_26-controlleradvice-之-modelattribute","link":"#_26-controlleradvice-之-modelattribute","children":[]},{"level":3,"title":"27) 返回值处理器","slug":"_27-返回值处理器","link":"#_27-返回值处理器","children":[]},{"level":3,"title":"28) MessageConverter","slug":"_28-messageconverter","link":"#_28-messageconverter","children":[]},{"level":3,"title":"29) @ControllerAdvice 之 ResponseBodyAdvice","slug":"_29-controlleradvice-之-responsebodyadvice","link":"#_29-controlleradvice-之-responsebodyadvice","children":[]},{"level":3,"title":"30) 异常解析器","slug":"_30-异常解析器","link":"#_30-异常解析器","children":[]},{"level":3,"title":"31) @ControllerAdvice 之 @ExceptionHandler","slug":"_31-controlleradvice-之-exceptionhandler","link":"#_31-controlleradvice-之-exceptionhandler","children":[]},{"level":3,"title":"32) Tomcat 异常处理","slug":"_32-tomcat-异常处理","link":"#_32-tomcat-异常处理","children":[]},{"level":3,"title":"33) BeanNameUrlHandlerMapping 与 SimpleControllerHandlerAdapter","slug":"_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter","link":"#_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter","children":[]},{"level":3,"title":"34) RouterFunctionMapping 与 HandlerFunctionAdapter","slug":"_34-routerfunctionmapping-与-handlerfunctionadapter","link":"#_34-routerfunctionmapping-与-handlerfunctionadapter","children":[]},{"level":3,"title":"35) SimpleUrlHandlerMapping 与 HttpRequestHandlerAdapter","slug":"_35-simpleurlhandlermapping-与-httprequesthandleradapter","link":"#_35-simpleurlhandlermapping-与-httprequesthandleradapter","children":[]},{"level":3,"title":"36) mvc 处理流程","slug":"_36-mvc-处理流程","link":"#_36-mvc-处理流程","children":[]}]},{"level":2,"title":"Boot","slug":"boot","link":"#boot","children":[{"level":3,"title":"37) Boot 骨架项目","slug":"_37-boot-骨架项目","link":"#_37-boot-骨架项目","children":[]},{"level":3,"title":"38) Boot War项目","slug":"_38-boot-war项目","link":"#_38-boot-war项目","children":[]},{"level":3,"title":"39) Boot 启动过程","slug":"_39-boot-启动过程","link":"#_39-boot-启动过程","children":[]},{"level":3,"title":"40) Tomcat 内嵌容器","slug":"_40-tomcat-内嵌容器","link":"#_40-tomcat-内嵌容器","children":[]},{"level":3,"title":"41) Boot 自动配置","slug":"_41-boot-自动配置","link":"#_41-boot-自动配置","children":[]},{"level":3,"title":"42) 条件装配底层","slug":"_42-条件装配底层","link":"#_42-条件装配底层","children":[]}]},{"level":2,"title":"其它","slug":"其它","link":"#其它","children":[{"level":3,"title":"43) FactoryBean","slug":"_43-factorybean","link":"#_43-factorybean","children":[]},{"level":3,"title":"44) @Indexed 原理","slug":"_44-indexed-原理","link":"#_44-indexed-原理","children":[]},{"level":3,"title":"45) 代理进一步理解","slug":"_45-代理进一步理解","link":"#_45-代理进一步理解","children":[]},{"level":3,"title":"46) @Value 装配底层","slug":"_46-value-装配底层","link":"#_46-value-装配底层","children":[]},{"level":3,"title":"47) @Autowired 装配底层","slug":"_47-autowired-装配底层","link":"#_47-autowired-装配底层","children":[]},{"level":3,"title":"48) 事件监听器","slug":"_48-事件监听器","link":"#_48-事件监听器","children":[]},{"level":3,"title":"49) 事件发布器","slug":"_49-事件发布器","link":"#_49-事件发布器","children":[]}]}],"git":{},"readingTime":{"minutes":51.57,"words":15471},"filePathRelative":"article/spring/springadvance/spring-advance.md","excerpt":"<h2> 容器与 bean</h2>\\n<h3> 1) 容器接口</h3>\\n<ul>\\n<li>\\n<p>BeanFactory 接口，典型功能有：</p>\\n<ul>\\n<li>getBean</li>\\n</ul>\\n</li>\\n<li>\\n<p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>\\n<ul>\\n<li>国际化</li>\\n<li>通配符方式获取一组 Resource 资源</li>\\n<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>\\n<li>事件发布与监听，实现组件之间的解耦</li>\\n</ul>\\n</li>\\n</ul>"}');export{e as data};
