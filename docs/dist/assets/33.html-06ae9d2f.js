import{_ as c,V as l,W as r,Y as n,Z as s,$ as e,a1 as i,a0 as p,D as a}from"./framework-3845b112.js";const u={},d={id:"_33-搜索旋转排序数组",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_33-搜索旋转排序数组","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>难度中等2448</p><p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p><p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p><p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p><p>你必须设计一个时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [4,5,6,7,0,1,2], target = 0
输出：4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [4,5,6,7,0,1,2], target = 3
输出：-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [1], target = 0
输出：-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5000</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 中的每个值都 <strong>独一无二</strong></li><li>题目数据保证 <code>nums</code> 在预先未知的某个下标上进行了旋转</li><li><code>-104 &lt;= target &lt;= 104</code></li></ul>`,13),b=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"search"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},":"),s(" List"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" target"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"is_blue"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},":"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),n("span",{class:"token builtin"},"bool"),n("span",{class:"token punctuation"},":"),s(`
            r `),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" nums"),n("span",{class:"token punctuation"},"["),s("mid"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">"),s("r"),n("span",{class:"token punctuation"},":"),s(`
                `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token operator"},">"),s("r "),n("span",{class:"token keyword"},"and"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">="),s(`target
            `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
                `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token operator"},">"),s("r "),n("span",{class:"token keyword"},"or"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">="),s(`target
        
        left `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),s(`
        right `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"while"),s(" left"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},"<"),s("right"),n("span",{class:"token punctuation"},":"),s(`
            mid `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("left"),n("span",{class:"token operator"},"+"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"//"),n("span",{class:"token number"},"2"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" is_blue"),n("span",{class:"token punctuation"},"("),s("mid"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
                right `),n("span",{class:"token operator"},"="),s(` mid
            `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
                left `),n("span",{class:"token operator"},"="),s(` mid
        `),n("span",{class:"token keyword"},"if"),s(" right "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"or"),s(" nums"),n("span",{class:"token punctuation"},"["),s("right"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"!="),s("target"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token keyword"},"return"),s(` right
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function v(h,_){const t=a("ExternalLinkIcon"),o=a("CodeTabs");return l(),r("div",null,[n("h4",d,[k,s(),n("a",m,[s("33. 搜索旋转排序数组"),e(t)])]),g,e(o,{id:"60",data:[{title:"python"}],"tab-id":"shell"},{tab0:i(({title:f,value:x,isActive:y})=>[b]),_:1})])}const V=c(u,[["render",v],["__file","33.html.vue"]]);export{V as default};
