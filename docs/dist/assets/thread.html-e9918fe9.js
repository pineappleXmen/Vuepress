import{_ as a,V as e,W as s,a0 as t}from"./framework-3845b112.js";const n="/os/image-20220901103543811.png",i={},r=t('<h2 id="_1-1-线程基础知识" tabindex="-1"><a class="header-anchor" href="#_1-1-线程基础知识" aria-hidden="true">#</a> 1.1 线程基础知识</h2><p><strong>与进程一样，线程是一种允许应用程序同时执行多个任务的机制。一个进程可以包含多个线程，如图 29-1 所示。所有这些线程都独立执行同一个程序，它们都共享同一个全局内存，包括初始化数据、未初始化数据和堆段。</strong> （传统的 UNIX 进程只是多线程进程的一种特殊情况；它是一个只包含一个线程的进程。）</p><figure><img src="'+n+`" alt="image-20220901103543811" tabindex="0" loading="lazy"><figcaption>image-20220901103543811</figcaption></figure><p>在某些应用程序中，线程提供了优于进程的优势。考虑通过创建多个进程来实现并发的传统 UNIX 方法。这方面的一个示例是网络服务器设计，其中父进程接受来自客户端的传入连接，<strong>然后使用 fork() 创建一个单独的子进程来处理与每个客户端的通信（请参阅第 60.3 节）。这样的设计可以同时为多个客户提供服务。虽然这种方法适用于许多场景，但在某些应用程序中确实存在以下限制：</strong></p><ul><li>进程之间很难共享信息。由于父子进程不共享内存（只读文本段除外），我们必须使用某种形式的进程间通信来在进程之间交换信息。</li><li>使用 fork() 创建进程的成本相对较高。即使使用第 24.2.2 节中描述的写时复制技术，复制各种进程属性（例如页表和文件描述符表）的需要意味着 fork() 调用仍然很耗时。</li></ul><p>除了全局内存之外，线程还共享许多其他属性（即，这些属性对于进程是全局的，而不是特定于线程的）。</p><p>这些属性包括：</p><ul><li>进程ID和父进程ID；</li><li>进程组ID和会话ID；</li><li>控制终端；</li><li>进程凭据（用户和组 ID）；</li><li>打开文件描述符；</li><li>使用 fcntl() 创建的记录锁；</li><li>信号配置；</li><li>文件系统相关信息：umask、当前工作目录、根目录；</li><li>间隔计时器 (setitimer()) 和 POSIX 计时器 (timer_create())；</li><li>System V 信号量撤消（semadj）值（第 47.8 节）；</li><li>资源限制；</li><li>CPU 时间消耗（由 times() 返回）；</li><li>消耗的资源（由 getrusage() 返回）；和</li><li>nice 值（由 setpriority() 和 nice() 设置）。</li></ul><p>线程不同的信息</p><ul><li>线程 ID（第 29.5 节）；</li><li>信号掩码；</li><li>线程特定数据（第 31.3 节）；</li><li>备用信号栈 (sigaltstack());</li><li>errno 变量；</li><li>浮点环境（参见 fenv(3)）；</li><li>实时调度策略和优先级（第 35.2 和 35.3 节）；</li><li>CPU 亲和性（Linux 特定，在第 35.4 节中描述）；</li><li>能力（Linux 特定，在第 39 章中描述）；和</li><li>堆栈（局部变量和函数调用链接信息）。</li></ul><h2 id="_1-2-线程的创建" tabindex="-1"><a class="header-anchor" href="#_1-2-线程的创建" aria-hidden="true">#</a> 1.2 线程的创建</h2><p>当程序启动时，生成的进程由一个线程组成，称为初始线程或主线程。在本节中，我们将了解如何创建附加线程。</p><p>pthread_create() 函数创建一个新线程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span>
                   <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
Returns <span class="token number">0</span> on success<span class="token punctuation">,</span> or a positive error number on error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新线程通过使用参数 arg（即 start(arg)）调用 start 标识的函数开始执行。调用 pthread_create() 的线程继续执行调用之后的下一条语句。 （此行为与第 28.2 节中描述的 clone() 系统调用的 glibc 包装函数相同。） arg 参数声明为 void *，这意味着我们可以将指向任何类型对象的指针传递给 start 函数。通常，arg 指向全局或堆变量，但也可以指定为 NULL。如果我们需要传递多个参数来启动，那么可以将 arg 指定为指向包含作为单独字段的参数的结构的指针。通过明智的强制转换，我们甚至可以将 arg 指定为 int。</p><p>attr 参数是一个指向 pthread_attr_t 对象的指针，该对象指定新线程的各种属性。我们将在 29.8 节中进一步讨论这些属性。如果 attr 被指定为 NULL，那么线程将使用各种默认属性创建，这就是我们将在本书的大多数示例程序中所做的。在调用 pthread_create() 之后，程序无法保证下一个线程将被调度以使用 CPU（在多处理器系统上，两个线程可能同时在不同的 CPU 上执行）。隐式依赖于特定调度顺序的程序对我们在第 24.4 节中描述的相同类型的竞争条件开放。如果我们需要强制执行特定的顺序，我们必须使用第 30 章中描述的同步技术之一。</p><h2 id="_1-3-线程的终止" tabindex="-1"><a class="header-anchor" href="#_1-3-线程的终止" aria-hidden="true">#</a> 1.3 线程的终止</h2><p>线程的执行以下列方式之一终止：</p><ul><li>线程的 start 函数执行返回，指定线程的返回值。</li><li>线程调用 pthread_exit()（如下所述）。</li><li>使用 pthread_cancel() 取消线程（在第 32.1 节中描述）。</li><li>任何线程调用exit()，或主线程执行返回（在main() 函数中），这会导致进程中的所有线程立即终止。</li></ul><p>调用 pthread_exit() 等效于在线程的 start 函数中执行 return，不同之处在于 pthread_exit() 可以从线程的 start 函数调用的任何函数中调用。 retval 参数指定线程的返回值。 retval 指向的值不应位于线程的堆栈上，因为该堆栈的内容在线程终止时变得未定义。 （例如，进程的虚拟内存区域可能会立即被堆栈重用于新线程。）同样的语句适用于线程启动函数中返回语句的值。如果主线程调用 pthread_exit() 而不是调用 exit() 或执行返回，则其他线程继续执行。</p><h2 id="_1-4-线程-vs-进程" tabindex="-1"><a class="header-anchor" href="#_1-4-线程-vs-进程" aria-hidden="true">#</a> 1.4 线程 vs 进程</h2><p><strong>线程的优点</strong></p><ul><li>在线程之间共享数据很容易。相比之下，在进程之间共享数据需要更多的工作（例如，创建共享内存段或使用管道）。</li><li>线程创建比进程创建快；线程的上下文切换时间可能比进程短。</li></ul><p><strong>缺点</strong></p><ul><li>在使用线程进行编程时，我们需要确保我们调用的函数是线程安全的，或者是以线程安全的方式调用的。 （我们在第 31.1 节中描述了线程安全的概念。）多进程应用程序不需要关心这一点。</li><li>一个线程中的错误（例如，通过不正确的指针修改内存）可能会损坏进程中的所有线程，因为它们共享相同的地址空间和其他属性。相比之下，流程彼此之间更加孤立。</li><li>每个线程都在竞争使用主机进程的有限虚拟地址空间。特别是，每个线程的堆栈和线程特定的数据（或线程本地存储）消耗了一部分进程虚拟地址空间，因此其他线程无法使用。尽管可用的虚拟地址空间很大（例如，x86-32 上通常为 3 GB），但对于使用大量线程或需要大量内存的线程的进程，这个因素可能是一个重大限制。相比之下，单独的进程每个都可以使用全部可用的虚拟内存（受 RAM 和交换空间的限制）。</li><li>在多线程应用程序中处理信号需要仔细设计。 （作为一般原则，通常希望避免在多线程程序中使用信号。）我们将在第 33.2 节中详细讨论线程和信号。</li><li>在多线程应用程序中，所有线程必须运行相同的程序（尽管可能在不同的函数中）。在多进程应用程序中，不同的进程可以运行不同的程序。</li><li>除了数据，线程还共享某些其他信息（例如，文件描述符、信号处置、当前工作目录以及用户和组 ID）。这可能是优点或缺点，取决于应用程序。</li></ul><h2 id="_1-5-线程的栈" tabindex="-1"><a class="header-anchor" href="#_1-5-线程的栈" aria-hidden="true">#</a> 1.5 线程的栈</h2><p>每个线程都有自己的堆栈，其大小在创建线程时是固定的。在 Linux/x86-32 上，对于除主线程之外的所有线程，每个线程堆栈的默认大小为 2 MB。 （在某些 64 位架构上，默认大小更高；例如，在 IA-64 上为 32 MB。）主线程有更大的空间用于堆栈增长（请参阅第 618 页的图 29-1） .有时，更改线程堆栈的大小很有用。 pthread_attr_setstacksize() 函数设置线程属性（第 29.8 节），该属性确定使用线程属性对象创建的线程中的堆栈大小。相关的 pthread_attr_setstack() 函数可用于控制堆栈的大小和位置，但设置堆栈的位置会降低应用程序的可移植性。手册页提供了这些功能的详细信息。更改每个线程堆栈大小的一个原因是允许为分配大型自动变量或进行深度嵌套函数调用的线程提供更大的堆栈第 33 章 682 （可能是因为递归）。或者，应用程序可能希望减小每个线程堆栈的大小，以允许进程内有更多线程。例如，在 x86-32 上，用户可访问的虚拟地址空间为 3 GB，默认堆栈大小为 2 MB 意味着我们最多可以创建大约 1500 个线程。 （精确的最大值取决于文本和数据段、共享库等消耗了多少虚拟内存。）可以通过调用 sysconf(_SC_THREAD_STACK_MIN) 来确定特定体系结构上可以使用的最小堆栈。对于 Linux/x86-32 上的 NPTL 实现，此调用返回值 16,384。在 NPTL 线程实现下，如果堆栈大小资源限制 (RLIMIT_STACK) 设置为无限制以外的任何值，则在创建新线程时将使用默认堆栈大小。此限制必须在程序执行之前设置，通常在执行程序之前使用 ulimit –s shell 内置命令（在 C shell 中限制堆栈大小）。在主程序中使用 setrlimit() 来设置限制是不够的，因为 NPTL 在调用 main() 之前发生的运行时初始化期间确定默认堆栈大小。</p><h2 id="_1-6-线程和进程控制" tabindex="-1"><a class="header-anchor" href="#_1-6-线程和进程控制" aria-hidden="true">#</a> 1.6 线程和进程控制</h2><p><strong>线程和 exec()</strong></p><p>当任何线程调用 exec() 函数之一时，调用程序将被完全替换。除调用 exec() 的线程外，所有线程都立即消失。没有线程执行线程特定数据的析构函数或调用清理处理程序。属于该进程的所有（进程私有）互斥锁和条件变量也会消失。在 exec() 之后，未指定剩余线程的线程 ID。</p><p><strong>线程和fork()</strong></p><p>当多线程进程调用fork() 时，只有调用线程在子进程中被复制。 （子线程的 ID 与父线程中调用 fork() 的线程的 ID 相同。）所有其他线程在子线程中消失；不会为这些线程执行特定于线程的数据析构函数或清理处理程序。这可能会导致各种问题：</p><ul><li>虽然只有调用线程在子进程中复制，但全局变量的状态，以及所有 Pthreads 对象（如互斥体和条件变量）都保留在子进程中。 （之所以如此，是因为这些 Pthreads 对象是在父内存中分配的，而子线程会获得该内存的副本。）这可能会导致棘手的情况。例如，假设另一个线程在 fork() 时锁定了一个互斥锁，并且正在更新全局数据结构。在这种情况下，子线程将无法解锁互斥锁（因为它不是互斥锁所有者），如果它试图获取互斥锁，则会阻塞。此外，全局数据结构的子副本可能处于不一致状态，因为正在更新它的线程在更新过程中消失了。</li><li>由于未调用线程特定数据的析构函数和清理处理程序，因此多线程程序中的 fork() 可能会导致子进程中的内存泄漏。此外，由其他线程创建的特定于线程的数据项可能无法被新子线程中的线程访问，因为它没有指向这些项的指针。</li></ul><p>由于这些问题，通常的建议是在多线程进程中唯一使用 fork() 应该是紧随其后的 exec()。 exec() 会导致子进程中的所有 Pthreads 对象消失，因为新程序会覆盖进程的内存。对于必须使用 fork() 而后面没有 exec() 的程序，Pthreads API 提供了一种定义 fork 处理程序的机制。 Fork 处理程序是使用以下形式的 pthread_atfork() 调用建立的：</p><p>每个 pthread_atfork() 调用都会将 prepare_func 添加到函数列表中，这些函数将在调用 fork() 时创建新的子进程之前自动执行（以注册的相反顺序）。类似地，parent_func 和 child_func 被添加到一个列表函数中，这些函数将在 fork() 返回之前分别在父进程和子进程中自动调用（按注册顺序）。 Fork 处理程序有时对使用线程的库代码很有用。在没有 fork 处理程序的情况下，库将无法处理天真地使用库并调用 fork() 的应用程序，而不知道库已经创建了一些线程。 fork() 产生的子进程从调用 fork() 的线程继承了 fork 处理程序。在 exec() 期间，不会保留 fork 处理程序（它们不能保留，因为处理程序的代码在 exec() 期间被覆盖）。有关 fork 处理程序的更多详细信息及其使用示例，请参见 [Butenhof, 1996]。</p><p><strong>线程和exit()</strong></p><p>如果任何线程调用exit()，或者等效地，主线程返回，所有线程立即消失；不执行特定于线程的数据析构函数或清理处理程序。</p>`,37),l=[r];function p(o,c){return e(),s("div",null,l)}const u=a(i,[["render",p],["__file","thread.html.vue"]]);export{u as default};
