export const data = JSON.parse("{\"key\":\"v-0d613f2a\",\"path\":\"/article/network/TCP.html\",\"title\":\"TCP\",\"lang\":\"zh-CN\",\"frontmatter\":{\"lang\":\"zh-CN\",\"title\":\"TCP\",\"description\":\"计算机网络\",\"category\":[\"Network\"],\"tag\":[\"计算机网络\"],\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vuepress-theme-hope-docs-demo.netlify.app/article/network/TCP.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Pineapple Coding\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"TCP\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"计算机网络\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"计算机网络\"}]]},\"headers\":[{\"level\":2,\"title\":\"1.1 序列号和确认号\",\"slug\":\"_1-1-序列号和确认号\",\"link\":\"#_1-1-序列号和确认号\",\"children\":[]},{\"level\":2,\"title\":\"2.TCP的三次握手\",\"slug\":\"_2-tcp的三次握手\",\"link\":\"#_2-tcp的三次握手\",\"children\":[]},{\"level\":2,\"title\":\"3.为什么是三次握手\",\"slug\":\"_3-为什么是三次握手\",\"link\":\"#_3-为什么是三次握手\",\"children\":[]},{\"level\":2,\"title\":\"4.为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？\",\"slug\":\"_4-为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢\",\"link\":\"#_4-为什么每次建立-tcp-连接时-初始化的序列号都要求不一样呢\",\"children\":[]},{\"level\":2,\"title\":\"5.初始序列号 ISN 是如何随机产生的\",\"slug\":\"_5-初始序列号-isn-是如何随机产生的\",\"link\":\"#_5-初始序列号-isn-是如何随机产生的\",\"children\":[]},{\"level\":2,\"title\":\"6.既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？\",\"slug\":\"_6-既然-ip-层会分片-为什么-tcp-层还需要-mss-呢\",\"link\":\"#_6-既然-ip-层会分片-为什么-tcp-层还需要-mss-呢\",\"children\":[]},{\"level\":2,\"title\":\"7.第一次握手丢失了，会发生什么？\",\"slug\":\"_7-第一次握手丢失了-会发生什么\",\"link\":\"#_7-第一次握手丢失了-会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"8.第二次握手丢失了，会发生什么？\",\"slug\":\"_8-第二次握手丢失了-会发生什么\",\"link\":\"#_8-第二次握手丢失了-会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"9.第三次握手丢失了，会发生什么？\",\"slug\":\"_9-第三次握手丢失了-会发生什么\",\"link\":\"#_9-第三次握手丢失了-会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"10. 总结 三次握手失败后的策略\",\"slug\":\"_10-总结-三次握手失败后的策略\",\"link\":\"#_10-总结-三次握手失败后的策略\",\"children\":[]},{\"level\":2,\"title\":\"11.超时重传\",\"slug\":\"_11-超时重传\",\"link\":\"#_11-超时重传\",\"children\":[]},{\"level\":2,\"title\":\"12.快速重传\",\"slug\":\"_12-快速重传\",\"link\":\"#_12-快速重传\",\"children\":[]},{\"level\":2,\"title\":\"13.SACK 重传方法\",\"slug\":\"_13-sack-重传方法\",\"link\":\"#_13-sack-重传方法\",\"children\":[]},{\"level\":2,\"title\":\"14.Duplicate SACK\",\"slug\":\"_14-duplicate-sack\",\"link\":\"#_14-duplicate-sack\",\"children\":[]},{\"level\":2,\"title\":\"15.SYN攻击\",\"slug\":\"_15-syn攻击\",\"link\":\"#_15-syn攻击\",\"children\":[]},{\"level\":2,\"title\":\"16.TCP的四次挥手\",\"slug\":\"_16-tcp的四次挥手\",\"link\":\"#_16-tcp的四次挥手\",\"children\":[]},{\"level\":2,\"title\":\"17.TCP为什么是四次挥手\",\"slug\":\"_17-tcp为什么是四次挥手\",\"link\":\"#_17-tcp为什么是四次挥手\",\"children\":[{\"level\":3,\"title\":\"粗暴关闭 vs 优雅关闭\",\"slug\":\"粗暴关闭-vs-优雅关闭\",\"link\":\"#粗暴关闭-vs-优雅关闭\",\"children\":[]}]},{\"level\":2,\"title\":\"18.什么情况会出现三次挥手？\",\"slug\":\"_18-什么情况会出现三次挥手\",\"link\":\"#_18-什么情况会出现三次挥手\",\"children\":[]},{\"level\":2,\"title\":\"19.第一次挥手丢失了，会发生什么？\",\"slug\":\"_19-第一次挥手丢失了-会发生什么\",\"link\":\"#_19-第一次挥手丢失了-会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"20.第二次挥手丢失了，会发生什么？\",\"slug\":\"_20-第二次挥手丢失了-会发生什么\",\"link\":\"#_20-第二次挥手丢失了-会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"21.第三次挥手丢失了，会发生什么？\",\"slug\":\"_21-第三次挥手丢失了-会发生什么\",\"link\":\"#_21-第三次挥手丢失了-会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"22.第四次挥手丢失了，会发生什么？\",\"slug\":\"_22-第四次挥手丢失了-会发生什么\",\"link\":\"#_22-第四次挥手丢失了-会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"23.为什么TIME_WAIT等待的时间是2MSL\",\"slug\":\"_23-为什么time-wait等待的时间是2msl\",\"link\":\"#_23-为什么time-wait等待的时间是2msl\",\"children\":[]},{\"level\":2,\"title\":\"24.为什么需要TIME_WAIT\",\"slug\":\"_24-为什么需要time-wait\",\"link\":\"#_24-为什么需要time-wait\",\"children\":[]},{\"level\":2,\"title\":\"25.TIME_WAIT 过多有什么危害？\",\"slug\":\"_25-time-wait-过多有什么危害\",\"link\":\"#_25-time-wait-过多有什么危害\",\"children\":[]},{\"level\":2,\"title\":\"26.如果已经建立了连接，但是客户端突然出现故障了怎么办？\",\"slug\":\"_26-如果已经建立了连接-但是客户端突然出现故障了怎么办\",\"link\":\"#_26-如果已经建立了连接-但是客户端突然出现故障了怎么办\",\"children\":[]},{\"level\":2,\"title\":\"27.如果已经建立了连接，但是服务端的进程崩溃会发生什么？\",\"slug\":\"_27-如果已经建立了连接-但是服务端的进程崩溃会发生什么\",\"link\":\"#_27-如果已经建立了连接-但是服务端的进程崩溃会发生什么\",\"children\":[]},{\"level\":2,\"title\":\"28.TCP 连接，一端断电和进程崩溃有什么区别？\",\"slug\":\"_28-tcp-连接-一端断电和进程崩溃有什么区别\",\"link\":\"#_28-tcp-连接-一端断电和进程崩溃有什么区别\",\"children\":[]},{\"level\":2,\"title\":\"主机崩溃\",\"slug\":\"主机崩溃\",\"link\":\"#主机崩溃\",\"children\":[]},{\"level\":2,\"title\":\"进程崩溃\",\"slug\":\"进程崩溃\",\"link\":\"#进程崩溃\",\"children\":[]},{\"level\":2,\"title\":\"有数据传输的场景\",\"slug\":\"有数据传输的场景\",\"link\":\"#有数据传输的场景\",\"children\":[{\"level\":3,\"title\":\"客户端主机宕机，又迅速重启\",\"slug\":\"客户端主机宕机-又迅速重启\",\"link\":\"#客户端主机宕机-又迅速重启\",\"children\":[]},{\"level\":3,\"title\":\"客户端主机宕机，一直没有重启\",\"slug\":\"客户端主机宕机-一直没有重启\",\"link\":\"#客户端主机宕机-一直没有重启\",\"children\":[]}]},{\"level\":2,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]},{\"level\":2,\"title\":\"29.TCP丢包情况\",\"slug\":\"_29-tcp丢包情况\",\"link\":\"#_29-tcp丢包情况\",\"children\":[]},{\"level\":2,\"title\":\"建立连接时丢包\",\"slug\":\"建立连接时丢包\",\"link\":\"#建立连接时丢包\",\"children\":[]},{\"level\":2,\"title\":\"流量控制丢包\",\"slug\":\"流量控制丢包\",\"link\":\"#流量控制丢包\",\"children\":[]},{\"level\":2,\"title\":\"网卡丢包\",\"slug\":\"网卡丢包\",\"link\":\"#网卡丢包\",\"children\":[{\"level\":3,\"title\":\"RingBuffer过小导致丢包\",\"slug\":\"ringbuffer过小导致丢包\",\"link\":\"#ringbuffer过小导致丢包\",\"children\":[]},{\"level\":3,\"title\":\"网卡性能不足\",\"slug\":\"网卡性能不足\",\"link\":\"#网卡性能不足\",\"children\":[]}]},{\"level\":2,\"title\":\"接收缓冲区丢包\",\"slug\":\"接收缓冲区丢包\",\"link\":\"#接收缓冲区丢包\",\"children\":[]},{\"level\":2,\"title\":\"两端之间的网络丢包\",\"slug\":\"两端之间的网络丢包\",\"link\":\"#两端之间的网络丢包\",\"children\":[]}],\"readingTime\":{\"minutes\":74.92,\"words\":22476},\"filePathRelative\":\"article/network/TCP.md\",\"excerpt\":\"<h1> 1.TCP字段</h1>\\n<figure><figcaption>image-20220902005913794</figcaption></figure>\\n<ul>\\n<li>\\n<p>源端口号：这是发送 TCP 的端口号。</p>\\n</li>\\n<li>\\n<p>目标端口号：这是目标 TCP 的端口号。</p>\\n</li>\\n<li>\\n<p>序号：这是该段的序号。如第 58.6.3 节所述，这是在此方向上通过连接传输的数据流中此段中数据的第一个字节的偏移量。</p>\\n</li>\\n<li>\\n<p>确认号：如果设置了 ACK 位（见下文），则该字段包含接收方期望从发送方接收的下一个数据字节的序列号。</p>\\n</li>\\n<li>\\n<p>首部长度：这是标头的长度，以 32 位字为单位。由于这是一个 4 位字段，因此总标头长度最多可达 60 个字节（15 个字）。该字段使接收 TCP 能够确定可变长度选项字段的长度和数据的起点。</p>\\n</li>\\n<li>\\n<p>保留：这包括 4 个未使用的位（必须设置为 0）。</p>\\n</li>\\n<li>\\n<p>控制位：该字段由 8 位组成，进一步指定了段的含义：</p>\\n<ul>\\n<li>\\n<p>CWR：拥塞窗口减少标志。</p>\\n</li>\\n<li>\\n<p>ECE：显式拥塞通知回显标志。 CWR 和 ECE 标志用作 TCP/IP 的显式拥塞通知 (ECN) 算法的一部分。 ECN 是 TCP/IP 的一个相对较新的补充，在 RFC 3168 和 [Floyd, 1994] 中有描述。 ECN 从内核 2.4 开始在 Linux 中实现，并通过在 Linux 特定的 /proc/sys/net/ipv4/tcp_ecn 文件中放置一个非零值来启用。</p>\\n</li>\\n<li>\\n<p>URG：如果设置，则紧急指针字段包含有效信息。</p>\\n</li>\\n<li>\\n<p>ACK：如果设置，则确认号字段包含有效信息（即，此段确认对等方先前发送的数据）。</p>\\n</li>\\n<li>\\n<p>PSH：将所有接收到的数据推送到接收进程。这个标志在 RFC 993 和 [Stevens, 1994] 中有描述。</p>\\n</li>\\n<li>\\n<p>RST：重置连接。这用于处理各种错误情况。</p>\\n</li>\\n<li>\\n<p>SYN：同步序列号。在连接建立期间交换具有此标志集的段，以允许两个 TCP 指定用于在每个方向上传输数据的初始序列号。</p>\\n</li>\\n<li>\\n<p>FIN：由发送方用来指示它已完成发送数据。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>窗口大小：当接收方结束一个 ACK 时，它会被用来指示接收方有空间接受的数据字节数。 （这与第 58.6.3 节中简要描述的滑动窗口方案有关。）</p>\\n</li>\\n<li>\\n<p>校验和：这是一个 16 位校验和，涵盖 TCP 标头和 TCP 数据。</p>\\n<ul>\\n<li>TCP 校验和不仅包括 TCP 报头和数据，还包括通常称为 TCP 伪报头的 12 个字节。伪报头由以下内容组成： 源 IP 地址和目标 IP 地址（每个 4 个字节）； 2 个字节指定 TCP 段的大小（该值是计算出来的，但不构成 IP 或 TCP 标头的一部分）； 1 个字节，包含值 6，这是 TCP/IP 协议套件中 TCP 的唯一协议号；和 1 个包含 0 的填充字节（因此伪头的长度是 16 位的倍数）。在校验和计算中包含伪报头的目的是为了 1268 第 61 章允许接收 TCP 再次检查传入的段是否已到达正确的目的地（即，该 IP 没有错误地接受发往另一个主机的数据报或者向 TCP 传递一个应该已经发送到另一个上层的数据包）。 UDP 以类似的方式并出于类似的原因计算其数据包头中的校验和。有关伪标题的更多详细信息，请参见 [Stevens, 1994]。</li>\\n</ul>\\n</li>\\n<li>\\n<p>紧急指针：如果设置了 URG 控制位，则该字段指示所谓紧急数据在从发送方传输到接收方的数据流中的位置。我们将在 61.13.1 节中简要讨论紧急数据。</p>\\n</li>\\n<li>\\n<p>选项：这是一个可变长度字段，包含控制 TCP 连接操作的选项。</p>\\n</li>\\n<li>\\n<p>数据：该字段包含在该段中传输的用户数据。如果该段不包含任何数据（例如，如果它只是一个 ACK 段），则该字段的长度可能为 0。</p>\\n</li>\\n</ul>\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
