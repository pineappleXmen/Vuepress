export const data = JSON.parse("{\"key\":\"v-ee2b9cd4\",\"path\":\"/article/spring/springadvance/SpringMVC.html\",\"title\":\"SpringMVC\",\"lang\":\"zh-CN\",\"frontmatter\":{\"lang\":\"zh-CN\",\"title\":\"SpringMVC\",\"description\":\"SpringMVC解析\",\"category\":[\"Spring\"],\"tag\":[\"Spring\",\"Advanced\"],\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vuepress-theme-hope-docs-demo.netlify.app/article/spring/springadvance/SpringMVC.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Pineapple Coding\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"SpringMVC\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"SpringMVC解析\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Spring\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Advanced\"}]]},\"headers\":[{\"level\":2,\"title\":\"WEB\",\"slug\":\"web\",\"link\":\"#web\",\"children\":[{\"level\":3,\"title\":\"20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter\",\"slug\":\"_20-requestmappinghandlermapping-与-requestmappinghandleradapter\",\"link\":\"#_20-requestmappinghandlermapping-与-requestmappinghandleradapter\",\"children\":[]},{\"level\":3,\"title\":\"21) 参数解析器\",\"slug\":\"_21-参数解析器\",\"link\":\"#_21-参数解析器\",\"children\":[]},{\"level\":3,\"title\":\"22) 参数名解析\",\"slug\":\"_22-参数名解析\",\"link\":\"#_22-参数名解析\",\"children\":[]},{\"level\":3,\"title\":\"23) 对象绑定与类型转换\",\"slug\":\"_23-对象绑定与类型转换\",\"link\":\"#_23-对象绑定与类型转换\",\"children\":[]},{\"level\":3,\"title\":\"24) @ControllerAdvice 之 @InitBinder\",\"slug\":\"_24-controlleradvice-之-initbinder\",\"link\":\"#_24-controlleradvice-之-initbinder\",\"children\":[]},{\"level\":3,\"title\":\"25) 控制器方法执行流程\",\"slug\":\"_25-控制器方法执行流程\",\"link\":\"#_25-控制器方法执行流程\",\"children\":[]},{\"level\":3,\"title\":\"26) @ControllerAdvice 之 @ModelAttribute\",\"slug\":\"_26-controlleradvice-之-modelattribute\",\"link\":\"#_26-controlleradvice-之-modelattribute\",\"children\":[]},{\"level\":3,\"title\":\"27) 返回值处理器\",\"slug\":\"_27-返回值处理器\",\"link\":\"#_27-返回值处理器\",\"children\":[]},{\"level\":3,\"title\":\"28) MessageConverter\",\"slug\":\"_28-messageconverter\",\"link\":\"#_28-messageconverter\",\"children\":[]},{\"level\":3,\"title\":\"29) @ControllerAdvice 之 ResponseBodyAdvice\",\"slug\":\"_29-controlleradvice-之-responsebodyadvice\",\"link\":\"#_29-controlleradvice-之-responsebodyadvice\",\"children\":[]},{\"level\":3,\"title\":\"30) 异常解析器\",\"slug\":\"_30-异常解析器\",\"link\":\"#_30-异常解析器\",\"children\":[]},{\"level\":3,\"title\":\"31) @ControllerAdvice 之 @ExceptionHandler\",\"slug\":\"_31-controlleradvice-之-exceptionhandler\",\"link\":\"#_31-controlleradvice-之-exceptionhandler\",\"children\":[]},{\"level\":3,\"title\":\"32) Tomcat 异常处理\",\"slug\":\"_32-tomcat-异常处理\",\"link\":\"#_32-tomcat-异常处理\",\"children\":[]},{\"level\":3,\"title\":\"33) BeanNameUrlHandlerMapping 与 SimpleControllerHandlerAdapter\",\"slug\":\"_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter\",\"link\":\"#_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter\",\"children\":[]},{\"level\":3,\"title\":\"34) RouterFunctionMapping 与 HandlerFunctionAdapter\",\"slug\":\"_34-routerfunctionmapping-与-handlerfunctionadapter\",\"link\":\"#_34-routerfunctionmapping-与-handlerfunctionadapter\",\"children\":[]},{\"level\":3,\"title\":\"35) SimpleUrlHandlerMapping 与 HttpRequestHandlerAdapter\",\"slug\":\"_35-simpleurlhandlermapping-与-httprequesthandleradapter\",\"link\":\"#_35-simpleurlhandlermapping-与-httprequesthandleradapter\",\"children\":[]},{\"level\":3,\"title\":\"36) mvc 处理流程\",\"slug\":\"_36-mvc-处理流程\",\"link\":\"#_36-mvc-处理流程\",\"children\":[]}]}],\"readingTime\":{\"minutes\":15.19,\"words\":4557},\"filePathRelative\":\"article/spring/springadvance/SpringMVC.md\",\"excerpt\":\"<h2> WEB</h2>\\n<h3> 20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter</h3>\\n<p>RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 俩是一对，分别用来</p>\\n<ul>\\n<li>处理 @RequestMapping 映射</li>\\n<li>调用控制器方法、并处理方法参数与方法返回值</li>\\n</ul>\\n<h4> 演示1 - DispatcherServlet 初始化</h4>\\n<h4> 收获💡</h4>\\n<ol>\\n<li>DispatcherServlet 是在第一次被访问时执行初始化, 也可以通过配置修改为 Tomcat 启动后就初始化</li>\\n<li>在初始化时会从 Spring 容器中找一些 Web 需要的组件, 如 HandlerMapping、HandlerAdapter 等，并逐一调用它们的初始化</li>\\n<li>RequestMappingHandlerMapping 初始化时，会收集所有 @RequestMapping 映射信息，封装为 Map，其中\\n<ul>\\n<li>key 是 RequestMappingInfo 类型，包括请求路径、请求方法等信息</li>\\n<li>value 是 HandlerMethod 类型，包括控制器方法对象、控制器对象</li>\\n<li>有了这个 Map，就可以在请求到达时，快速完成映射，找到 HandlerMethod 并与匹配的拦截器一起返回给 DispatcherServlet</li>\\n</ul>\\n</li>\\n<li>RequestMappingHandlerAdapter 初始化时，会准备 HandlerMethod 调用时需要的各个组件，如：\\n<ul>\\n<li>HandlerMethodArgumentResolver 解析控制器方法参数</li>\\n<li>HandlerMethodReturnValueHandler 处理控制器方法返回值</li>\\n</ul>\\n</li>\\n</ol>\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
