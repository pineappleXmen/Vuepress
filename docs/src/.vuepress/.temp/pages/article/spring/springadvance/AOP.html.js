export const data = JSON.parse("{\"key\":\"v-370ed27e\",\"path\":\"/article/spring/springadvance/AOP.html\",\"title\":\"AOP\",\"lang\":\"zh-CN\",\"frontmatter\":{\"lang\":\"zh-CN\",\"title\":\"AOP\",\"description\":\"SpringAOP具体底层实现\",\"category\":[\"Spring\"],\"tag\":[\"Spring\",\"Advanced\"],\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vuepress-theme-hope-docs-demo.netlify.app/article/spring/springadvance/AOP.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Pineapple Coding\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"AOP\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"SpringAOP具体底层实现\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Spring\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Advanced\"}]]},\"headers\":[{\"level\":2,\"title\":\"AOP\",\"slug\":\"aop\",\"link\":\"#aop\",\"children\":[{\"level\":3,\"title\":\"9) AOP 实现之 ajc 编译器\",\"slug\":\"_9-aop-实现之-ajc-编译器\",\"link\":\"#_9-aop-实现之-ajc-编译器\",\"children\":[]},{\"level\":3,\"title\":\"10) AOP 实现之 agent 类加载\",\"slug\":\"_10-aop-实现之-agent-类加载\",\"link\":\"#_10-aop-实现之-agent-类加载\",\"children\":[]},{\"level\":3,\"title\":\"11) AOP 实现之 proxy\",\"slug\":\"_11-aop-实现之-proxy\",\"link\":\"#_11-aop-实现之-proxy\",\"children\":[]},{\"level\":3,\"title\":\"12) jdk 动态代理进阶\",\"slug\":\"_12-jdk-动态代理进阶\",\"link\":\"#_12-jdk-动态代理进阶\",\"children\":[]},{\"level\":3,\"title\":\"13) cglib 代理进阶\",\"slug\":\"_13-cglib-代理进阶\",\"link\":\"#_13-cglib-代理进阶\",\"children\":[]},{\"level\":3,\"title\":\"14) cglib 避免反射调用\",\"slug\":\"_14-cglib-避免反射调用\",\"link\":\"#_14-cglib-避免反射调用\",\"children\":[]},{\"level\":3,\"title\":\"15) jdk 和 cglib 在 Spring 中的统一\",\"slug\":\"_15-jdk-和-cglib-在-spring-中的统一\",\"link\":\"#_15-jdk-和-cglib-在-spring-中的统一\",\"children\":[]},{\"level\":3,\"title\":\"16) 切点匹配\",\"slug\":\"_16-切点匹配\",\"link\":\"#_16-切点匹配\",\"children\":[]},{\"level\":3,\"title\":\"17) 从 @Aspect 到 Advisor\",\"slug\":\"_17-从-aspect-到-advisor\",\"link\":\"#_17-从-aspect-到-advisor\",\"children\":[]},{\"level\":3,\"title\":\"18) 静态通知调用\",\"slug\":\"_18-静态通知调用\",\"link\":\"#_18-静态通知调用\",\"children\":[]},{\"level\":3,\"title\":\"19) 动态通知调用\",\"slug\":\"_19-动态通知调用\",\"link\":\"#_19-动态通知调用\",\"children\":[]}]}],\"readingTime\":{\"minutes\":10.85,\"words\":3255},\"filePathRelative\":\"article/spring/springadvance/AOP.md\",\"excerpt\":\"<h2> AOP</h2>\\n<p>AOP 底层实现方式之一是代理，由代理结合通知和目标，提供增强功能</p>\\n<p>除此以外，aspectj 提供了两种另外的 AOP 底层实现：</p>\\n<ul>\\n<li>\\n<p>第一种是通过 ajc 编译器在<strong>编译</strong> class 类文件时，就把通知的增强功能，织入到目标类的字节码中</p>\\n</li>\\n<li>\\n<p>第二种是通过 agent 在<strong>加载</strong>目标类时，修改目标类的字节码，织入增强功能</p>\\n</li>\\n<li>\\n<p>作为对比，之前学习的代理是<strong>运行</strong>时生成新的字节码</p>\\n</li>\\n</ul>\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
