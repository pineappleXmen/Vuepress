export const data = JSON.parse("{\"key\":\"v-43aa4b2d\",\"path\":\"/article/javastack/jvm/garbage.html\",\"title\":\"垃圾回收\",\"lang\":\"zh-CN\",\"frontmatter\":{\"lang\":\"zh-CN\",\"title\":\"垃圾回收\",\"description\":\"垃圾回收\",\"category\":[\"Java\"],\"tag\":[\"JVM\"],\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vuepress-theme-hope-docs-demo.netlify.app/article/javastack/jvm/garbage.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Pineapple Coding\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"垃圾回收\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"垃圾回收\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JVM\"}]]},\"headers\":[{\"level\":2,\"title\":\"1.如何判断垃圾可以回收\",\"slug\":\"_1-如何判断垃圾可以回收\",\"link\":\"#_1-如何判断垃圾可以回收\",\"children\":[{\"level\":3,\"title\":\"1.1引用计数法\",\"slug\":\"_1-1引用计数法\",\"link\":\"#_1-1引用计数法\",\"children\":[]},{\"level\":3,\"title\":\"1.2可达性分析算法\",\"slug\":\"_1-2可达性分析算法\",\"link\":\"#_1-2可达性分析算法\",\"children\":[]},{\"level\":3,\"title\":\"1.3 四种引用\",\"slug\":\"_1-3-四种引用\",\"link\":\"#_1-3-四种引用\",\"children\":[]}]},{\"level\":2,\"title\":\"2.垃圾回收算法\",\"slug\":\"_2-垃圾回收算法\",\"link\":\"#_2-垃圾回收算法\",\"children\":[{\"level\":3,\"title\":\"2.1 标记清除\",\"slug\":\"_2-1-标记清除\",\"link\":\"#_2-1-标记清除\",\"children\":[]},{\"level\":3,\"title\":\"2.2 标记整理\",\"slug\":\"_2-2-标记整理\",\"link\":\"#_2-2-标记整理\",\"children\":[]},{\"level\":3,\"title\":\"2.3 复制\",\"slug\":\"_2-3-复制\",\"link\":\"#_2-3-复制\",\"children\":[]}]},{\"level\":2,\"title\":\"3.分代垃圾回收\",\"slug\":\"_3-分代垃圾回收\",\"link\":\"#_3-分代垃圾回收\",\"children\":[]},{\"level\":2,\"title\":\"4.垃圾回收器\",\"slug\":\"_4-垃圾回收器\",\"link\":\"#_4-垃圾回收器\",\"children\":[{\"level\":3,\"title\":\"4.1 串行垃圾回收器\",\"slug\":\"_4-1-串行垃圾回收器\",\"link\":\"#_4-1-串行垃圾回收器\",\"children\":[]},{\"level\":3,\"title\":\"4.2 吞吐量优先\",\"slug\":\"_4-2-吞吐量优先\",\"link\":\"#_4-2-吞吐量优先\",\"children\":[]},{\"level\":3,\"title\":\"4.3 响应时间优先\",\"slug\":\"_4-3-响应时间优先\",\"link\":\"#_4-3-响应时间优先\",\"children\":[]},{\"level\":3,\"title\":\"4.4 G1\",\"slug\":\"_4-4-g1\",\"link\":\"#_4-4-g1\",\"children\":[]},{\"level\":3,\"title\":\"3.Young Collection + CM\",\"slug\":\"_3-young-collection-cm\",\"link\":\"#_3-young-collection-cm\",\"children\":[]},{\"level\":3,\"title\":\"4.Mixed Collection\",\"slug\":\"_4-mixed-collection\",\"link\":\"#_4-mixed-collection\",\"children\":[]},{\"level\":3,\"title\":\"6.Young Collection 跨代引用\",\"slug\":\"_6-young-collection-跨代引用\",\"link\":\"#_6-young-collection-跨代引用\",\"children\":[]},{\"level\":3,\"title\":\"7.Remark\",\"slug\":\"_7-remark\",\"link\":\"#_7-remark\",\"children\":[]},{\"level\":3,\"title\":\"8.JDK 8u20 字符串去重\",\"slug\":\"_8-jdk-8u20-字符串去重\",\"link\":\"#_8-jdk-8u20-字符串去重\",\"children\":[]},{\"level\":3,\"title\":\"9.JDK 8u40 并发标记类卸载\",\"slug\":\"_9-jdk-8u40-并发标记类卸载\",\"link\":\"#_9-jdk-8u40-并发标记类卸载\",\"children\":[]},{\"level\":3,\"title\":\"10.JDK 8u60 回收巨型对象\",\"slug\":\"_10-jdk-8u60-回收巨型对象\",\"link\":\"#_10-jdk-8u60-回收巨型对象\",\"children\":[]},{\"level\":3,\"title\":\"11.JDK 9 并发标记起始时间的调整\",\"slug\":\"_11-jdk-9-并发标记起始时间的调整\",\"link\":\"#_11-jdk-9-并发标记起始时间的调整\",\"children\":[]},{\"level\":3,\"title\":\"12.JDK 9 更高效的回收\",\"slug\":\"_12-jdk-9-更高效的回收\",\"link\":\"#_12-jdk-9-更高效的回收\",\"children\":[]}]},{\"level\":2,\"title\":\"CMS收集器\",\"slug\":\"cms收集器\",\"link\":\"#cms收集器\",\"children\":[]}],\"readingTime\":{\"minutes\":20.52,\"words\":6156},\"filePathRelative\":\"article/javastack/jvm/garbage.md\",\"excerpt\":\"<blockquote>\\n<p>垃圾回收</p>\\n<ol>\\n<li>如何判断对象可以回收</li>\\n<li>垃圾回收算法</li>\\n<li>分代垃圾回收</li>\\n<li>垃圾回收器</li>\\n<li>垃圾回收调优</li>\\n</ol>\\n</blockquote>\\n<h2> 1.如何判断垃圾可以回收</h2>\\n<h3> 1.1引用计数法</h3>\\n<p>一个对象被其他对象引用时，计数器+1；</p>\\n<p>取消引用时，则-1；</p>\\n<p>当引用为0时则回收；</p>\\n<p>缺点</p>\\n<p>循环引用时 就会无法回收</p>\\n<h3> 1.2可达性分析算法</h3>\\n<ol>\\n<li>\\n<p>Java 虚拟机中的垃圾回收器采用可达性分析来探索所有存活的对象</p>\\n</li>\\n<li>\\n<p>扫描堆中的对象，看是否能够沿着 GC Root对象 为起点的引用链找到该对象，找不到，表示可以回收</p>\\n</li>\\n<li>\\n<p>哪些对象可以作为 GC Root ?</p>\\n<p>Busy Monitor-&gt;锁对象</p>\\n<p>Thread-&gt;被引用的堆内存的对象</p>\\n</li>\\n</ol>\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
