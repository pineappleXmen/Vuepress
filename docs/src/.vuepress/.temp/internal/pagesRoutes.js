export const pagesRoutes = [
  ["v-03de6b8d","/aboutme.html",{"y":"h","title":"关于我","i":"home"},["/aboutme","/aboutme.md"]],
  ["v-8daa1a0e","/",{"y":"h","title":"首页","i":"home"},["/index.html","/README.md"]],
  ["v-0d92cf12","/article/algorithm/",{"y":"h","title":"算法概述"},["/article/algorithm/index.html","/article/algorithm/README.md"]],
  ["v-1f9681ec","/article/basic/cache.html",{"c":["Linux"],"g":["OS"],"e":"CPU缓存的实现","y":"a","title":"缓存"},["/article/basic/cache","/article/basic/cache.md"]],
  ["v-7a045538","/article/basic/cpu.html",{"c":["Linux"],"g":["OS"],"e":"<h2> 1.CPU</h2>\n<p><strong>CPU</strong>(Central Processing Unit) 中央处理器，是计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元。</p>\n<p>CPU主要由<strong>运算逻辑单元、控制单元、寄存器、以及I/O单元</strong>组成。接下来我们尝试细致了解一下各个单元的作用。</p>\n<h3> <strong>逻辑运算单元（Arithmetic Logic Unit）ALU</strong></h3>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">ALU</p>\n<p><strong>如何在计算机中表示数据（真值）？</strong></p>\n<p><strong>如何对数据进行运算？</strong></p>\n</div>","y":"a","title":"CPU"},["/article/basic/cpu","/article/basic/cpu.md"]],
  ["v-79537598","/article/basic/decode.html",{"c":["Computer Concept"],"g":["asm"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">本节要点</p>\n<p>C语言如何在CPU上运行</p>\n<p>80386框架汇编指令</p>\n</div>\n<h2> <strong>80386 汇编指令</strong></h2>\n<p>本节主要为对Intel 80386 的常见指令的解析 帮助理解机器码的具体作用</p>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">Intel 80386</p>\n<p><strong>Intel 80386</strong>，是<a href=\"https://zh.wikipedia.org/wiki/%E8%8B%B1%E7%89%B9%E5%B0%94\" target=\"_blank\" rel=\"noopener noreferrer\">英特尔</a>（Intel）公司的一款<a href=\"https://zh.wikipedia.org/wiki/X86\" target=\"_blank\" rel=\"noopener noreferrer\">x86</a>系列<a href=\"https://zh.wikipedia.org/wiki/CPU\" target=\"_blank\" rel=\"noopener noreferrer\">CPU</a>，最初发布于1985年10月17日。</p>\n<p>80386处理器被广泛应用在1980年代中期到1990年代中期的<a href=\"https://zh.wikipedia.org/wiki/IBM_PC%E5%85%BC%E5%AE%B9%E6%9C%BA\" target=\"_blank\" rel=\"noopener noreferrer\">IBM PC兼容机</a>中。这些PC被称为“80386电脑”或“386电脑”，有时也简称“<strong>80386</strong>”或“<strong>(i)386</strong>”。</p>\n</div>","y":"a","title":"汇编架构与指令"},["/article/basic/decode","/article/basic/decode.md"]],
  ["v-53c03bc7","/article/basic/nemu.html",{"c":["Computer"],"g":["Pa"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">关于NEMU</p>\n<p>NEMU是NJU的开放课程《计算机系统基础》课程中实现的模拟计算机运行的软件。</p>\n<p>该软件实现 Intel 80386 体系框架的CPU运算逻辑，运行在32位Linux操作系统。</p>\n<p>按照该课程要求，本文不会对该Pa的代码进行任何公开，只对其如何实现进行概括，以便理解本模块内容。</p>\n<p><strong>2020年版本</strong></p>\n<p>该课程公开视频以及配置参考：</p>\n<p><a href=\"https://www.bilibili.com/video/BV1a7411w7tC/\" target=\"_blank\" rel=\"noopener noreferrer\">NEMU</a></p>\n<p>课程指导的仓库及其镜像地址：</p>\n<p><a href=\"http://github.com/ics-nju-wl/icspa-public-guide\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>       <a href=\"https://gitee.com/wlicsnju/icspa-public-guide\" target=\"_blank\" rel=\"noopener noreferrer\">Gitee</a></p>\n<p>实验框架代码及其镜像地址：</p>\n<p><a href=\"http://github.com/ics-nju-wl/icspa-public\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>       <a href=\"https://gitee.com/wlicsnju/icspa-public\" target=\"_blank\" rel=\"noopener noreferrer\">Gitee</a></p>\n<p><strong>2021年版本</strong></p>\n<p>操作指南</p>\n<p><a href=\"https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">NEMU 2021</a></p>\n<p><strong>2022版本</strong></p>\n<p>操作指南</p>\n<p><a href=\"https://nju-projectn.github.io/ics-pa-gitbook/ics2022/\" target=\"_blank\" rel=\"noopener noreferrer\">NEMU 2022</a></p>\n</div>","y":"a","title":"NEMU"},["/article/basic/nemu","/article/basic/nemu.md"]],
  ["v-8a325ca6","/article/basic/overview.html",{"c":["Computer"],"g":["Pa"],"e":"<p>本模块通过 <strong>知识梳理</strong> + <strong>实验实践</strong>的方式 来帮助了解计算机基础知识 了解计算机是如何运行的。如何通过一个软件VM来模拟计算机的运行。</p>\n<p>在本模块结束时，我们将完成用NJU的课程NEMU<strong>软件</strong>来模拟一台计算机运行的过程。</p>\n<p>本模块分为以下小节</p>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">计算机系统基础</p>\n<p><a href=\"http://120.48.87.150/article/basic/cpu.html\" target=\"_blank\" rel=\"noopener noreferrer\">CPU</a></p>\n<p><a href=\"http://120.48.87.150/article/basic/decode.html\" target=\"_blank\" rel=\"noopener noreferrer\">80386汇编指令</a></p>\n</div>","y":"a","title":"概述"},["/article/basic/overview","/article/basic/overview.md"]],
  ["v-999e2e28","/article/ccpp/cadv.html",{"c":["C"],"g":["C"],"e":"<h2> <strong>内联汇编</strong></h2>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">内联汇编</p>\n<p><strong>内联汇编</strong>（<strong>Inline assembly</strong>）是<strong>部分编译器</strong>支持的一种功能。可以将<strong>汇编语言</strong>内嵌在高级语言源代码中。</p>\n<p>编译器GCC(GNU Compiler for Linux)  提供C语言的汇编功能。</p>\n<p><a href=\"http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html#s4\" target=\"_blank\" rel=\"noopener noreferrer\">GCC内联汇编文档</a></p>\n</div>","y":"a","title":"C语言进阶"},["/article/ccpp/cadv","/article/ccpp/cadv.md"]],
  ["v-61c43e5e","/article/ccpp/cbasic.html",{"c":["C"],"g":["C"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">C Program</p>\n<p><strong>C</strong> (<em>pronounced like the letter c</em>) is a general-purpose computer programming language. It was created in the 1970s by <a href=\"https://en.wikipedia.org/wiki/Dennis_Ritchie\" target=\"_blank\" rel=\"noopener noreferrer\">Dennis Ritchie</a>, and remains very widely used and influential.  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t‘</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>——Wikipedia</strong></p>\n<p><strong>C Program Main standard</strong></p>\n<p><strong>C99</strong></p>\n<p>The C standard was further revised in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which is commonly referred to as \"<strong>C99</strong>\". It has since been amended three times by Technical Corrigenda.</p>\n<p><strong>C11</strong></p>\n<p>In 2007, work began on another revision of the C standard, informally called \"<strong>C1X</strong>\" until its official publication of ISO/IEC 9899:2011 on 2011-12-08. The C standards committee adopted guidelines to limit the adoption of new features that had not been tested by existing implementations.</p>\n<p><strong>C17</strong></p>\n<p>Published in June 2018 as ISO/IEC 9899:2018, C17 is the current standard for the C programming language. It introduces no new language features, only technical corrections, and clarifications to defects in C11.</p>\n<p><strong>C reference</strong></p>\n<p><a href=\"https://www.iso.org/standard/74528.html\" target=\"_blank\" rel=\"noopener noreferrer\">C标准文档</a></p>\n<p><a href=\"https://en.cppreference.com/w/c\" target=\"_blank\" rel=\"noopener noreferrer\">C在线文档</a></p>\n</div>","y":"a","title":"C语言基础"},["/article/ccpp/cbasic","/article/ccpp/cbasic.md"]],
  ["v-106b1903","/article/ccpp/overview.html",{"c":["C"],"g":["C"],"e":"<p><a href=\"https://en.cppreference.com/w/\" target=\"_blank\" rel=\"noopener noreferrer\">C &amp; C++ Reference</a></p>\n<p>[TBD]</p>\n","y":"a","title":"C/C++ 概述"},["/article/ccpp/overview","/article/ccpp/overview.md"]],
  ["v-2edf330e","/article/golang/overview.html",{"c":["Go"],"g":["Go"],"e":"<p><a href=\"https://docs.python.org/zh-cn/3/library/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Go docs</a></p>\n","y":"a","title":"Go概述"},["/article/golang/overview","/article/golang/overview.md"]],
  ["v-0e8a5440","/article/interview/",{"e":"<h1> 笔试记录持续更新中</h1>\n<h2> 美团笔试</h2>\n<p><a href=\"/article/interview/exp/meituan86.html\" target=\"blank\"># 美团8.6第一次笔试</a></p>\n<h2> 大疆笔试</h2>\n<p><a href=\"/article/interview/exp/dajiang87.html\" target=\"blank\">大疆8.7笔试</a></p>\n<h2> 米哈游笔试</h2>\n<p><a href=\"/article/interview/exp/mihayou87.html\" target=\"blank\">米哈游8.7笔试</a></p>","y":"a","title":"笔试记录持续更新中"},["/article/interview/index.html","/article/interview/README.md"]],
  ["v-79188cbb","/article/javastack/",{"y":"h","title":"开始学习","i":"home"},["/article/javastack/index.html","/article/javastack/README.md"]],
  ["v-483ebf2d","/article/mysql/MySQL-advanced.html",{"c":["MySQL"],"g":["MySQL进阶"],"e":"<h1> 进阶篇</h1>\n<h2> 视图</h2>\n<p>视图是虚拟表，只保存了查询SQL的逻辑，数据是在使用视图时动态创建的</p>\n<p><strong>创建：</strong></p>\n<p><code>CREATE [OR REPLACE] VIEW 视图名[(列名 列表)] AS SELECT [WITH[CASCADED|LOCAL]CHECK OPTION];</code></p>\n<p><strong>查询：</strong></p>\n<p>查看创建语句：<code>SHOW CREATE VIEW 视图名</code></p>\n<p>查询：<code>SELECT * FROM 视图名</code></p>","y":"a","title":"进阶篇"},["/article/mysql/MySQL-advanced","/article/mysql/MySQL-advanced.md"]],
  ["v-4611a936","/article/mysql/MySQL.html",{"c":["MySQL"],"g":["MySQL基础"],"e":"<h2> <strong>SQL基础语法</strong></h2>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>- DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）\n- DML: 数据操作语言，用来对数据库表中的数据进行增删改\n- DQL: 数据查询语言，用来查询数据库中表的记录\n- DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"基础篇"},["/article/mysql/MySQL","/article/mysql/MySQL.md"]],
  ["v-89836d38","/article/mysql/mysqldoc.html",{"c":["MySQL"],"g":["MySQL"],"e":"MySQL","y":"a","title":"MySQL-官方文档"},["/article/mysql/mysqldoc","/article/mysql/mysqldoc.md"]],
  ["v-b2618a2e","/article/mysql/MySQL%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97.html",{"e":"<h1> MySQL面试指南</h1>\n<h2> 1.基础</h2>\n<h3> 1.MySQL常用的存储引擎有什么？它们有什么区别？</h3>\n<p>**Table **Feature of different engine</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Feature</th>\n<th style=\"text-align:center\">InnoDB</th>\n<th style=\"text-align:center\">MyISAM</th>\n<th style=\"text-align:center\">MEMORY</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>B-tree indexes</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Backup/point-in-time recovery</strong> (Implemented in the server, rather than in the storage engine.)</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Cluster database support</strong></td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Clustered indexes</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Compressed data</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes (Compressed MyISAM tables are supported only when using the compressed row format. Tables using the compressed row format with MyISAM are read only.)</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Data caches</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Encrypted data</strong></td>\n<td style=\"text-align:center\">Yes (Implemented in the server via encryption functions; In MySQL 5.7 and later, data-at-rest encryption is supported.)</td>\n<td style=\"text-align:center\">Yes (Implemented in the server via encryption functions.)</td>\n<td style=\"text-align:center\">Yes (Implemented in the server via encryption functions.)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Foreign key support</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Full-text search indexes</strong></td>\n<td style=\"text-align:center\">Yes (Support for FULLTEXT indexes is available in MySQL 5.6 and later.)</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Geospatial data type support</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Geospatial indexing support</strong></td>\n<td style=\"text-align:center\">Yes (Support for geospatial indexing is available in MySQL 5.7 and later.)</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Hash indexes</strong></td>\n<td style=\"text-align:center\">No (InnoDB utilizes hash indexes internally for its Adaptive Hash Index feature.)</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Index caches</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Locking granularity</strong></td>\n<td style=\"text-align:center\">Row</td>\n<td style=\"text-align:center\">Table</td>\n<td style=\"text-align:center\">Table</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>MVCC</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Replication support</strong> (Implemented in the server, rather than in the storage engine.)</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Limited (See the discussion later in this section.)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Storage limits</strong></td>\n<td style=\"text-align:center\">64TB</td>\n<td style=\"text-align:center\">256TB</td>\n<td style=\"text-align:center\">RAM</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>T-tree indexes</strong></td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Transactions</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Update statistics for data dictionary</strong></td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"MySQL面试指南"},["/article/mysql/MySQL面试指南.html","/article/mysql/MySQL%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97","/article/mysql/MySQL面试指南.md","/article/mysql/MySQL%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97.md"]],
  ["v-0a74d23f","/article/mysql/",{"c":["MySQL"],"g":["MySQL"],"e":"<h1> MySQL官方文档</h1>\n<p><a href=\"/article/mysql/mysqldoc.html\" target=\"blank\">MySQL官方文档全文</a></p>\n","y":"a","title":"MySQL学习资料"},["/article/mysql/index.html","/article/mysql/README.md"]],
  ["v-2dc278fe","/article/network/HTTP.html",{"c":["Network"],"g":["计算机网络"],"e":"<h2> 1.HTTP是什么</h2>\n<p>HTTP 是超文本传输协议，也就是<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol。</p>\n<p>HTTP 是一个用在计算机世界里的<strong>协议</strong>。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范（<strong>两个以上的参与者</strong>），以及相关的各种控制和错误处理方式（<strong>行为约定和规范</strong>）。</p>\n<p>HTTP 协议是一个<strong>双向协议</strong>。</p>","y":"a","title":"HTTP"},["/article/network/HTTP","/article/network/HTTP.md"]],
  ["v-0049fa02","/article/network/IP.html",{"c":["Network"],"g":["计算机网络"],"e":"<h1> 1.HTTP字段</h1>\n","y":"a","title":"IP"},["/article/network/IP","/article/network/IP.md"]],
  ["v-dad1be72","/article/network/rpc.html",{"c":["Network"],"g":["计算机网络"],"e":"<h2> 1.常见的RPC框架</h2>\n<p>RPC 框架说白了就是让你可以像调用本地方法一样调用远程服务提供的方法，而不需要关心底层的通信细节。简单地说就让远程服务调用更加简单、透明。 RPC包含了客户端（Client）和服务端（Server）</p>\n<p>业界主流的 RPC 框架整体上分为三类：</p>\n<ul>\n<li>支持多语言的 RPC 框架，比较成熟的有 Google 的 gRPC、Apache（Facebook）的 Thrift；</li>\n<li>只支持特定语言的 RPC 框架，例如新浪微博的 Motan；</li>\n<li>支持服务治理等服务化特性的分布式服务框架，其底层内核仍然是 RPC 框架, 例如阿里的 Dubbo。</li>\n</ul>","y":"a","title":"RPC"},["/article/network/rpc","/article/network/rpc.md"]],
  ["v-0d613f2a","/article/network/TCP.html",{"c":["Network"],"g":["计算机网络"],"e":"<h1> 1.TCP字段</h1>\n<figure><figcaption>image-20220902005913794</figcaption></figure>\n<ul>\n<li>\n<p>源端口号：这是发送 TCP 的端口号。</p>\n</li>\n<li>\n<p>目标端口号：这是目标 TCP 的端口号。</p>\n</li>\n<li>\n<p>序号：这是该段的序号。如第 58.6.3 节所述，这是在此方向上通过连接传输的数据流中此段中数据的第一个字节的偏移量。</p>\n</li>\n<li>\n<p>确认号：如果设置了 ACK 位（见下文），则该字段包含接收方期望从发送方接收的下一个数据字节的序列号。</p>\n</li>\n<li>\n<p>首部长度：这是标头的长度，以 32 位字为单位。由于这是一个 4 位字段，因此总标头长度最多可达 60 个字节（15 个字）。该字段使接收 TCP 能够确定可变长度选项字段的长度和数据的起点。</p>\n</li>\n<li>\n<p>保留：这包括 4 个未使用的位（必须设置为 0）。</p>\n</li>\n<li>\n<p>控制位：该字段由 8 位组成，进一步指定了段的含义：</p>\n<ul>\n<li>\n<p>CWR：拥塞窗口减少标志。</p>\n</li>\n<li>\n<p>ECE：显式拥塞通知回显标志。 CWR 和 ECE 标志用作 TCP/IP 的显式拥塞通知 (ECN) 算法的一部分。 ECN 是 TCP/IP 的一个相对较新的补充，在 RFC 3168 和 [Floyd, 1994] 中有描述。 ECN 从内核 2.4 开始在 Linux 中实现，并通过在 Linux 特定的 /proc/sys/net/ipv4/tcp_ecn 文件中放置一个非零值来启用。</p>\n</li>\n<li>\n<p>URG：如果设置，则紧急指针字段包含有效信息。</p>\n</li>\n<li>\n<p>ACK：如果设置，则确认号字段包含有效信息（即，此段确认对等方先前发送的数据）。</p>\n</li>\n<li>\n<p>PSH：将所有接收到的数据推送到接收进程。这个标志在 RFC 993 和 [Stevens, 1994] 中有描述。</p>\n</li>\n<li>\n<p>RST：重置连接。这用于处理各种错误情况。</p>\n</li>\n<li>\n<p>SYN：同步序列号。在连接建立期间交换具有此标志集的段，以允许两个 TCP 指定用于在每个方向上传输数据的初始序列号。</p>\n</li>\n<li>\n<p>FIN：由发送方用来指示它已完成发送数据。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>窗口大小：当接收方结束一个 ACK 时，它会被用来指示接收方有空间接受的数据字节数。 （这与第 58.6.3 节中简要描述的滑动窗口方案有关。）</p>\n</li>\n<li>\n<p>校验和：这是一个 16 位校验和，涵盖 TCP 标头和 TCP 数据。</p>\n<ul>\n<li>TCP 校验和不仅包括 TCP 报头和数据，还包括通常称为 TCP 伪报头的 12 个字节。伪报头由以下内容组成： 源 IP 地址和目标 IP 地址（每个 4 个字节）； 2 个字节指定 TCP 段的大小（该值是计算出来的，但不构成 IP 或 TCP 标头的一部分）； 1 个字节，包含值 6，这是 TCP/IP 协议套件中 TCP 的唯一协议号；和 1 个包含 0 的填充字节（因此伪头的长度是 16 位的倍数）。在校验和计算中包含伪报头的目的是为了 1268 第 61 章允许接收 TCP 再次检查传入的段是否已到达正确的目的地（即，该 IP 没有错误地接受发往另一个主机的数据报或者向 TCP 传递一个应该已经发送到另一个上层的数据包）。 UDP 以类似的方式并出于类似的原因计算其数据包头中的校验和。有关伪标题的更多详细信息，请参见 [Stevens, 1994]。</li>\n</ul>\n</li>\n<li>\n<p>紧急指针：如果设置了 URG 控制位，则该字段指示所谓紧急数据在从发送方传输到接收方的数据流中的位置。我们将在 61.13.1 节中简要讨论紧急数据。</p>\n</li>\n<li>\n<p>选项：这是一个可变长度字段，包含控制 TCP 连接操作的选项。</p>\n</li>\n<li>\n<p>数据：该字段包含在该段中传输的用户数据。如果该段不包含任何数据（例如，如果它只是一个 ACK 段），则该字段的长度可能为 0。</p>\n</li>\n</ul>","y":"a","title":"TCP"},["/article/network/TCP","/article/network/TCP.md"]],
  ["v-d3d26eea","/article/network/UDP.html",{"c":["Network"],"g":["计算机网络"],"e":"<h1> 1.HTTP字段</h1>\n","y":"a","title":"UDP"},["/article/network/UDP","/article/network/UDP.md"]],
  ["v-14410c53","/article/os/concurrence.html",{"c":["Linux"],"g":["OS"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">并发模块</p>\n<p>多处理器编程</p>\n<p>理解并发程序执行</p>\n<p>并发控制</p>\n<p>并发编程及对Bug应对</p>\n</div>\n<div class=\"custom-container note\">\n<p class=\"custom-container-title\">什么是并发(Concurrent)</p>\n<p>Concurrent: existing, happening, or done <strong><em>at the same time</em>.</strong></p>\n<p>In computer science, concurrency refers to the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. (Wikipedia)</p>\n</div>","y":"a","title":"并发程序"},["/article/os/concurrence","/article/os/concurrence.md"]],
  ["v-3afc8356","/article/os/filesystem.html",{"c":["Linux"],"g":["OS"],"e":"<p>Linux的设计哲学是「<strong>一切皆文件</strong>」。也就是说，Linux系统中的一切实体都可以抽象为文件这一概念。所以，先了解一下Linux是怎样实现<strong>文件</strong>这一概念是相对重要的。</p>\n<p>接下来我们将从以下几点综观Linux的文件系统是进行如何工作的</p>\n<h2> <strong>1.文件系统的结构</strong></h2>\n<p>在文件系统中分配空间的基本单位是逻辑块，逻辑块是文件系统所在的磁盘设备上的多个连续物理存储区间。例如，在ext2文件系统上的逻辑块大小为1024、2048或4096字节。</p>\n<figure><figcaption>image-20221005160310792</figcaption></figure>","y":"a","title":"文件系统"},["/article/os/filesystem","/article/os/filesystem.md"]],
  ["v-b5edc88c","/article/os/IO.html",{"c":["Linux"],"g":["OS"],"e":"<h2> 1.什么是DMA技术?</h2>\n<p>在没有 DMA 技术前，I/O 的过程是这样的：</p>\n<ul>\n<li>CPU 发出对应的指令给磁盘控制器，然后返回；</li>\n<li>磁盘控制器收到指令后，于是就开始准备数据，会把数据放入到磁盘控制器的内部缓冲区中，然后产生一个<strong>中断</strong>；</li>\n<li>CPU 收到中断信号后，停下手头的工作，接着把磁盘控制器的缓冲区的数据一次一个字节地读进自己的寄存器，然后再把寄存器里的数据写入到内存，而在数据传输的期间 CPU 是无法执行其他任务的。</li>\n</ul>\n<p>为了方便你理解，我画了一副图：</p>","y":"a","title":"网络系统与I/O"},["/article/os/IO","/article/os/IO.md"]],
  ["v-692e1d3f","/article/os/memory.html",{"c":["Linux"],"g":["OS"],"e":"<h2> 1.虚拟内存概述</h2>\n<p>像大多数现代内核一样，Linux 采用了一种称为虚拟内存管理的技术。该技术的目的是通过利用大多数程序的典型属性：引用局部性来有效利用 CPU 和 RAM（物理内存）。大多数程序展示了两种局部性：</p>\n<p><strong>空间局部性</strong></p>\n<p>是程序引用最近访问的内存地址附近的内存地址的趋势（因为指令的顺序处理，有时还有数据结构的顺序处理）。</p>\n<p><strong>时间局部性</strong></p>\n<p>是程序引用会在未来一段时间内访问最近访问过的区域的趋势。因为循环所导致。</p>\n<figure><figcaption>image-20220906160641064</figcaption></figure>","y":"a","title":"内存管理"},["/article/os/memory","/article/os/memory.md"]],
  ["v-7b8181a9","/article/os/model.html",{"c":["Linux"],"g":["OS"],"e":"<p>操作系统的最初的命令中，内存里空无一物，初始的指令是如何加载的呢？</p>\n<h2> Bare-metal 与程序员的约定</h2>\n<p>为了让计算机能运行任何我们的程序，一定存在软件/硬件的约定</p>\n<ul>\n<li>CPU reset 后，处理器处于某个确定的状态\n<ul>\n<li>PC 指针一般指向一段 memory-mapped ROM\n<ul>\n<li>ROM 存储了厂商提供的 firmware (固件)</li>\n</ul>\n</li>\n<li>处理器的大部分特性处于关闭状态\n<ul>\n<li>缓存、虚拟存储、……</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Firmware (固件，厂商提供的代码)\n<ul>\n<li>将用户数据加载到内存\n<ul>\n<li>例如存储介质上的第二级 loader (加载器)</li>\n<li>或者直接加载操作系统 (嵌入式系统)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","y":"a","title":"操作系统的状态机模型和应用"},["/article/os/model","/article/os/model.md"]],
  ["v-9c533bf2","/article/os/overview.html",{"c":["Linux"],"g":["OS"],"e":"<p>本章内容通过<strong>基础知识</strong> + <strong>课程实践</strong>的方法 一起学习操作系统的具体知识</p>\n<p>本模块分为以下几节</p>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">操作系统基础</p>\n<p><a href=\"\">程序与编译器</a></p>\n</div>\n<p>与本模块配合的公开课</p>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">NJU OS 公开课地址</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Cm4y1d7Ur/\" target=\"_blank\" rel=\"noopener noreferrer\">视频地址</a></p>\n<p><a href=\"http://jyywiki.cn/OS/2022/\" target=\"_blank\" rel=\"noopener noreferrer\">课程主页</a></p>\n</div>","y":"a","title":"基础概念"},["/article/os/overview","/article/os/overview.md"]],
  ["v-475847e3","/article/os/process.html",{"c":["Linux"],"g":["OS"],"e":"<h2> 1. 进程基础概念</h2>\n<p>**最简单地说，进程是正在执行的程序的一个实例。**程序执行时，内核将程序的代码加载到虚拟内存中，为程序变量分配空间，并建立内核簿记数据结构来记录各种信息（如进程ID、终止状态、用户ID和组ID） ) 关于过程。从内核的角度来看，进程是内核必须共享计算机各种资源的实体。对于有限的资源，例如内存，内核最初会为进程分配一些资源，并在进程的生命周期内根据进程的需求和对该资源的整体系统需求调整此分配。当进程终止时，所有这些资源都会被释放以供其他进程重用。其他资源，例如 CPU 和网络带宽，是可再生的，但必须在所有进程之间公平共享。</p>\n<p><strong>进程的创建</strong></p>","y":"a","title":"进程"},["/article/os/process","/article/os/process.md"]],
  ["v-1c6c0cee","/article/os/program.html",{"c":["Linux"],"g":["OS"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">本模块解决的问题</p>\n<p>什么是计算机程序？</p>\n<p>应该用什么视角去理解一个程序？</p>\n<p>编译器做了什么工作？</p>\n</div>\n","y":"a","title":"程序与编译器"},["/article/os/program","/article/os/program.md"]],
  ["v-f093ec54","/article/os/thread.html",{"c":["Linux"],"g":["OS","线程"],"e":"<h2> 1.1 线程基础知识</h2>\n<p><strong>与进程一样，线程是一种允许应用程序同时执行多个任务的机制。一个进程可以包含多个线程，如图 29-1 所示。所有这些线程都独立执行同一个程序，它们都共享同一个全局内存，包括初始化数据、未初始化数据和堆段。</strong> （传统的 UNIX 进程只是多线程进程的一种特殊情况；它是一个只包含一个线程的进程。）</p>\n<figure><figcaption>image-20220901103543811</figcaption></figure>\n<p>在某些应用程序中，线程提供了优于进程的优势。考虑通过创建多个进程来实现并发的传统 UNIX 方法。这方面的一个示例是网络服务器设计，其中父进程接受来自客户端的传入连接，<strong>然后使用 fork() 创建一个单独的子进程来处理与每个客户端的通信（请参阅第 60.3 节）。这样的设计可以同时为多个客户提供服务。虽然这种方法适用于许多场景，但在某些应用程序中确实存在以下限制：</strong></p>","y":"a","title":"线程"},["/article/os/thread","/article/os/thread.md"]],
  ["v-fa2f2972","/article/os/virtualization.html",{"c":["Linux"],"g":["OS","线程"],"e":"<h2> 从系统启动到第一个进程</h2>\n<p>回顾 <a href=\"http://jyywiki.cn/pages/OS/2022/demos/thread-os.c\" target=\"_blank\" rel=\"noopener noreferrer\">thread-os.c</a> 的加载过程</p>\n<ul>\n<li>CPU Reset → Firmware → Boot loader → Kernel <code>_start()</code></li>\n</ul>\n<hr>\n<p>操作系统会加载 “第一个程序”</p>\n<ul>\n<li>RTFSC(latest Linux Kernel)\n<ul>\n<li>如果没有指定启动选项 <code>init=</code>，按照 “默认列表” 尝试一遍</li>\n<li>从此以后，Linux Kernel 就进入后台，成为 “中断/异常处理程序”</li>\n</ul>\n</li>\n</ul>","y":"a","title":"虚拟化"},["/article/os/virtualization","/article/os/virtualization.md"]],
  ["v-1be62a90","/article/python/advance.html",{"c":["Python"],"g":["Python"],"e":"<h2> 容器类型collections</h2>\n<p><a href=\"https://docs.python.org/zh-cn/3/library/collections.html\" target=\"_blank\" rel=\"noopener noreferrer\">Collections Docs</a></p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.namedtuple\" target=\"_blank\" rel=\"noopener noreferrer\"><code>namedtuple()</code></a></td>\n<td>创建命名元组子类的工厂函数</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.deque\" target=\"_blank\" rel=\"noopener noreferrer\"><code>deque</code></a></td>\n<td>类似列表(list)的容器，实现了在两端快速添加(append)和弹出(pop)</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.ChainMap\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ChainMap</code></a></td>\n<td>类似字典(dict)的容器类，将多个映射集合到一个视图里面</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.Counter\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Counter</code></a></td>\n<td>字典的子类，提供了可哈希对象的计数功能</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.OrderedDict\" target=\"_blank\" rel=\"noopener noreferrer\"><code>OrderedDict</code></a></td>\n<td>字典的子类，保存了他们被添加的顺序</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.defaultdict\" target=\"_blank\" rel=\"noopener noreferrer\"><code>defaultdict</code></a></td>\n<td>字典的子类，提供了一个工厂函数，为字典查询提供一个默认值</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.UserDict\" target=\"_blank\" rel=\"noopener noreferrer\"><code>UserDict</code></a></td>\n<td>封装了字典对象，简化了字典子类化</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.UserList\" target=\"_blank\" rel=\"noopener noreferrer\"><code>UserList</code></a></td>\n<td>封装了列表对象，简化了列表子类化</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.python.org/zh-cn/3/library/collections.html#collections.UserString\" target=\"_blank\" rel=\"noopener noreferrer\"><code>UserString</code></a></td>\n<td>封装了字符串对象，简化了字符串子类化</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"Python拾遗"},["/article/python/advance","/article/python/advance.md"]],
  ["v-74a2ac02","/article/python/overview.html",{"c":["Python"],"g":["Python"],"e":"<p>Python基础语法：RTFM</p>\n<p><a href=\"https://docs.python.org/zh-cn/3/library/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Python 官方文档</a></p>\n","y":"a","title":"Python概述"},["/article/python/overview","/article/python/overview.md"]],
  ["v-e8d1cf8c","/article/redis/overview.html",{"c":["Redis"],"g":["Redis"],"e":"<p>[TBD]</p>\n","y":"a","title":"Redis概述"},["/article/redis/overview","/article/redis/overview.md"]],
  ["v-c102cb6c","/article/redis/Redisinterv.html",{"e":"<h1> Redis 常见面试题</h1>\n<h2> <a href=\"https://xiaolincoding.com/redis/base/redis_interview.html#%E8%AE%A4%E8%AF%86-redis\" target=\"_blank\" rel=\"noopener noreferrer\">#</a>认识 Redis</h2>\n<h3> <a href=\"https://xiaolincoding.com/redis/base/redis_interview.html#%E4%BB%80%E4%B9%88%E6%98%AF-redis\" target=\"_blank\" rel=\"noopener noreferrer\">#</a>什么是 Redis？</h3>","y":"a","title":"Redis 常见面试题"},["/article/redis/Redisinterv","/article/redis/Redisinterv.md"]],
  ["v-ba438662","/article/redis/%E6%BA%90%E7%A0%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"c":["Redis"],"g":["Redis"],"e":"<h1> Redis源码剖析</h1>\n<h2> 1.数据类型篇</h2>\n<h3> 1.1 SDS</h3>\n<blockquote>\n<p><strong>C语言的字符串有很多问题</strong></p>\n<p>获取字符串长度需要O(n)</p>\n<p>二进制不安全</p>\n<p>不可以动态修改</p>\n</blockquote>\n<p>SDS就是为了解决该问题而设计的</p>\n<p>SDS优点</p>\n<p><strong>1）常数复杂度获取字符串长度：O(1)</strong></p>\n<p>C字符串获取字符串长度时间复杂度为O(N),使用SDS可以确保获取字符串长度的操作不会成为Redis的性能瓶颈</p>","y":"a","title":"Redis数据结构"},["/article/redis/源码数据类型.html","/article/redis/%E6%BA%90%E7%A0%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","/article/redis/源码数据类型.md","/article/redis/%E6%BA%90%E7%A0%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]],
  ["v-721d8f90","/article/spring/",{"y":"h","title":"开始学习","i":"home"},["/article/spring/index.html","/article/spring/README.md"]],
  ["v-21b23386","/article/algorithm/all/102.html",{"c":["算法"],"g":["BFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">102. 二叉树的层序遍历</a></h4>\n<p>难度中等1424</p>\n<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"102. 二叉树的层序遍历"},["/article/algorithm/all/102","/article/algorithm/all/102.md"]],
  ["v-283bcc9a","/article/algorithm/all/17.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener noreferrer\">17. 电话号码的字母组合</a></h4>\n<p>难度中等2055</p>\n<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<figure><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/11/09/200px-telephone-keypad2svg.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"17. 电话号码的字母组合"},["/article/algorithm/all/17","/article/algorithm/all/17.md"]],
  ["v-f3aca1b2","/article/algorithm/all/200.html",{"c":["算法"],"g":["BFS"],"e":"<ol start=\"200\">\n<li>岛屿数量</li>\n</ol>\n<h4> <a href=\"https://leetcode.cn/problems/number-of-islands/\" target=\"_blank\" rel=\"noopener noreferrer\"></a></h4>\n<p>难度中等</p>\n<p>给你一个由 <code>'1'</code>（陆地）和 <code>'0'</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>\n<p>此外，你可以假设该网格的四条边均被水包围。</p>","y":"a","title":"200. 岛屿数量"},["/article/algorithm/all/200","/article/algorithm/all/200.md"]],
  ["v-32041e2e","/article/algorithm/all/490.html",{"c":["算法"],"g":["BFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/the-maze/\" target=\"_blank\" rel=\"noopener noreferrer\">490. 迷宫</a></h4>\n<p>难度中等153</p>\n<p>由空地（用 <code>0</code> 表示）和墙（用 <code>1</code> 表示）组成的迷宫 <code>maze</code> 中有一个球。球可以途经空地向 <strong>上、下、左、右</strong> 四个方向滚动，且在遇到墙壁前不会停止滚动。当球停下时，可以选择向下一个方向滚动。</p>\n<p>给你一个大小为 <code>m x n</code> 的迷宫 <code>maze</code> ，以及球的初始位置 <code>start</code> 和目的地 <code>destination</code> ，其中 <code>start = [startrow, startcol]</code> 且 <code>destination = [destinationrow, destinationcol]</code> 。请你判断球能否在目的地停下：如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>","y":"a","title":"490. 迷宫"},["/article/algorithm/all/490","/article/algorithm/all/490.md"]],
  ["v-2afc55d8","/article/algorithm/all/78.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></h4>\n<p>难度中等1746</p>\n<p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p>\n<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"78. 子集"},["/article/algorithm/all/78","/article/algorithm/all/78.md"]],
  ["v-f4d4b932","/article/algorithm/backtrack/131.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/palindrome-partitioning/\" target=\"_blank\" rel=\"noopener noreferrer\">131. 分割回文串</a></h4>\n<p>难度中等1255</p>\n<p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p>\n<p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p>","y":"a","title":"131. 分割回文串"},["/article/algorithm/backtrack/131","/article/algorithm/backtrack/131.md"]],
  ["v-7e7f9154","/article/algorithm/backtrack/17.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/\" target=\"_blank\" rel=\"noopener noreferrer\">17. 电话号码的字母组合</a></h4>\n<p>难度中等2055</p>\n<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>\n<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>\n<figure><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/11/09/200px-telephone-keypad2svg.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"17. 电话号码的字母组合"},["/article/algorithm/backtrack/17","/article/algorithm/backtrack/17.md"]],
  ["v-e79ad642","/article/algorithm/backtrack/216.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/combination-sum-iii/\" target=\"_blank\" rel=\"noopener noreferrer\">216. 组合总和 III</a></h4>\n<p>难度中等531</p>\n<p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p>\n<ul>\n<li>只使用数字1到9</li>\n<li>每个数字 <strong>最多使用一次</strong></li>\n</ul>\n<p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p>","y":"a","title":"216. 组合总和 III"},["/article/algorithm/backtrack/216","/article/algorithm/backtrack/216.md"]],
  ["v-2df65f16","/article/algorithm/backtrack/39.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/combination-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">39. 组合总和</a></h4>\n<p>难度中等2136</p>\n<p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 <em>所有</em> <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p>","y":"a","title":"39. 组合总和"},["/article/algorithm/backtrack/39","/article/algorithm/backtrack/39.md"]],
  ["v-5380fcc0","/article/algorithm/backtrack/40.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/combination-sum-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">40. 组合总和 II</a></h4>\n<p>难度中等1086</p>\n<p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p>\n<p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p>","y":"a","title":"40. 组合总和 II"},["/article/algorithm/backtrack/40","/article/algorithm/backtrack/40.md"]],
  ["v-5dbe107a","/article/algorithm/backtrack/46.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></h4>\n<p>难度中等2192</p>\n<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：nums = [1,2,3]\n输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"46. 全排列"},["/article/algorithm/backtrack/46","/article/algorithm/backtrack/46.md"]],
  ["v-5f72e919","/article/algorithm/backtrack/47.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/permutations-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">47. 全排列 II</a></h4>\n<p>难度中等1173</p>\n<p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：nums = [1,1,2]\n输出：\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"47. 全排列 II"},["/article/algorithm/backtrack/47","/article/algorithm/backtrack/47.md"]],
  ["v-0ac2e4ec","/article/algorithm/backtrack/491.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/increasing-subsequences/\" target=\"_blank\" rel=\"noopener noreferrer\">491. 递增子序列</a></h4>\n<p>难度中等508</p>\n<p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p>\n<p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p>","y":"a","title":"491. 递增子序列"},["/article/algorithm/backtrack/491","/article/algorithm/backtrack/491.md"]],
  ["v-ebc7dec0","/article/algorithm/backtrack/51.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N 皇后</a></h4>\n<p>难度困难1478</p>\n<p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p>\n<p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p>","y":"a","title":"51. N 皇后"},["/article/algorithm/backtrack/51","/article/algorithm/backtrack/51.md"]],
  ["v-03b4ca48","/article/algorithm/backtrack/77.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/combinations/\" target=\"_blank\" rel=\"noopener noreferrer\">77. 组合</a></h4>\n<p>难度中等1103</p>\n<p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p>\n<p>你可以按 <strong>任何顺序</strong> 返回答案。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"77. 组合"},["/article/algorithm/backtrack/77","/article/algorithm/backtrack/77.md"]],
  ["v-004b190a","/article/algorithm/backtrack/78.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></h4>\n<p>难度中等1746</p>\n<p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p>\n<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"78. 子集"},["/article/algorithm/backtrack/78","/article/algorithm/backtrack/78.md"]],
  ["v-611eaee2","/article/algorithm/backtrack/93.html",{"c":["算法"],"g":["回溯"],"e":"<h4> <a href=\"https://leetcode.cn/problems/restore-ip-addresses/\" target=\"_blank\" rel=\"noopener noreferrer\">93. 复原 IP 地址</a></h4>\n<p>难度中等1015</p>\n<p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>'.'</code> 分隔。</p>\n<ul>\n<li>例如：<code>\"0.1.2.201\"</code> 和<code> \"192.168.1.1\"</code> 是 <strong>有效</strong> IP 地址，但是 <code>\"0.011.255.245\"</code>、<code>\"192.168.1.312\"</code> 和 <code>\"192.168@1.1\"</code> 是 <strong>无效</strong> IP 地址。</li>\n</ul>","y":"a","title":"93. 复原 IP 地址"},["/article/algorithm/backtrack/93","/article/algorithm/backtrack/93.md"]],
  ["v-3e109858","/article/algorithm/BFS/102.html",{"c":["算法"],"g":["BFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">102. 二叉树的层序遍历</a></h4>\n<p>难度中等1424</p>\n<p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"102. 二叉树的层序遍历"},["/article/algorithm/BFS/102","/article/algorithm/BFS/102.md"]],
  ["v-9f356c16","/article/algorithm/BFS/127.html",{"c":["算法"],"g":["BFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/word-ladder/\" target=\"_blank\" rel=\"noopener noreferrer\">127. 单词接龙</a></h4>\n<p>难度困难1140</p>\n<p>字典 <code>wordList</code> 中从单词 <code>beginWord</code> 和 <code>endWord</code> 的 <strong>转换序列</strong> 是一个按下述规格形成的序列 <code>beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk</code>：</p>","y":"a","title":"127. 单词接龙"},["/article/algorithm/BFS/127","/article/algorithm/BFS/127.md"]],
  ["v-baefd80e","/article/algorithm/BFS/200.html",{"c":["算法"],"g":["BFS"],"e":"<ol start=\"200\">\n<li>岛屿数量</li>\n</ol>\n<h4> <a href=\"https://leetcode.cn/problems/number-of-islands/\" target=\"_blank\" rel=\"noopener noreferrer\"></a></h4>\n<p>难度中等</p>\n<p>给你一个由 <code>'1'</code>（陆地）和 <code>'0'</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>\n<p>此外，你可以假设该网格的四条边均被水包围。</p>","y":"a","title":"200. 岛屿数量"},["/article/algorithm/BFS/200","/article/algorithm/BFS/200.md"]],
  ["v-a30bff5c","/article/algorithm/BFS/207.html",{"c":["算法"],"g":["BFS","graph"],"e":"<h4> <a href=\"https://leetcode.cn/problems/course-schedule/\" target=\"_blank\" rel=\"noopener noreferrer\">207. 课程表</a></h4>\n<p>难度中等1427</p>\n<p>你这个学期必须选修 <code>numCourses</code> 门课程，记为 <code>0</code> 到 <code>numCourses - 1</code> 。</p>\n<p>在选修某些课程之前需要一些先修课程。 先修课程按数组 <code>prerequisites</code> 给出，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示如果要学习课程 <code>ai</code> 则 <strong>必须</strong> 先学习课程 <code>bi</code> 。</p>","y":"a","title":"207. 课程表"},["/article/algorithm/BFS/207","/article/algorithm/BFS/207.md"]],
  ["v-5123618c","/article/algorithm/BFS/210.html",{"c":["算法"],"g":["BFS","graph"],"e":"<h4> <a href=\"https://leetcode.cn/problems/course-schedule-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">210. 课程表 II</a></h4>\n<p>难度中等709</p>\n<p>现在你总共有 <code>numCourses</code> 门课需要选，记为 <code>0</code> 到 <code>numCourses - 1</code>。给你一个数组 <code>prerequisites</code> ，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示在选修课程 <code>ai</code> 前 <strong>必须</strong> 先选修 <code>bi</code> 。</p>","y":"a","title":"210. 课程表 II"},["/article/algorithm/BFS/210","/article/algorithm/BFS/210.md"]],
  ["v-4e628300","/article/algorithm/BFS/490.html",{"c":["算法"],"g":["BFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/the-maze/\" target=\"_blank\" rel=\"noopener noreferrer\">490. 迷宫</a></h4>\n<p>难度中等153</p>\n<p>由空地（用 <code>0</code> 表示）和墙（用 <code>1</code> 表示）组成的迷宫 <code>maze</code> 中有一个球。球可以途经空地向 <strong>上、下、左、右</strong> 四个方向滚动，且在遇到墙壁前不会停止滚动。当球停下时，可以选择向下一个方向滚动。</p>\n<p>给你一个大小为 <code>m x n</code> 的迷宫 <code>maze</code> ，以及球的初始位置 <code>start</code> 和目的地 <code>destination</code> ，其中 <code>start = [startrow, startcol]</code> 且 <code>destination = [destinationrow, destinationcol]</code> 。请你判断球能否在目的地停下：如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>","y":"a","title":"490. 迷宫"},["/article/algorithm/BFS/490","/article/algorithm/BFS/490.md"]],
  ["v-3a98549e","/article/algorithm/BFS/505.html",{"c":["算法"],"g":["BFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/the-maze-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">505. 迷宫 II</a></h4>\n<p>难度中等129</p>\n<p>由空地和墙组成的迷宫中有一个<strong>球</strong>。球可以向<strong>上下左右</strong>四个方向滚动，但在遇到墙壁前不会停止滚动。当球停下时，可以选择下一个方向。</p>\n<p>给定球的<strong>起始位置，目的地</strong>和<strong>迷宫，<strong>找出让球停在目的地的最短距离。距离的定义是球从起始位置（不包括）到目的地（包括）经过的</strong>空地</strong>个数。如果球无法停在目的地，返回 -1。</p>","y":"a","title":"505. 迷宫 II"},["/article/algorithm/BFS/505","/article/algorithm/BFS/505.md"]],
  ["v-5ba7c384","/article/algorithm/binarysearch/153.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">153. 寻找旋转排序数组中的最小值</a></h4>\n<p>难度中等883</p>\n<p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：</p>","y":"a","title":"153. 寻找旋转排序数组中的最小值"},["/article/algorithm/binarysearch/153","/article/algorithm/binarysearch/153.md"]],
  ["v-055d80e0","/article/algorithm/binarysearch/162.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/find-peak-element/\" target=\"_blank\" rel=\"noopener noreferrer\">162. 寻找峰值</a></h4>\n<p>难度中等955</p>\n<p>峰值元素是指其值严格大于左右相邻值的元素。</p>\n<p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 <strong>任何一个峰值</strong> 所在位置即可。</p>\n<p>你可以假设 <code>nums[-1] = nums[n] = -∞</code> 。</p>","y":"a","title":"162. 寻找峰值"},["/article/algorithm/binarysearch/162","/article/algorithm/binarysearch/162.md"]],
  ["v-d75e744c","/article/algorithm/binarysearch/300.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">300. 最长递增子序列</a></h4>\n<p>难度中等2698</p>\n<p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p>\n<p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p>","y":"a","title":"300. 最长递增子序列"},["/article/algorithm/binarysearch/300","/article/algorithm/binarysearch/300.md"]],
  ["v-e3f28d36","/article/algorithm/binarysearch/33.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/search-in-rotated-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">33. 搜索旋转排序数组</a></h4>\n<p>难度中等2448</p>\n<p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p>\n<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p>","y":"a","title":"33. 搜索旋转排序数组"},["/article/algorithm/binarysearch/33","/article/algorithm/binarysearch/33.md"]],
  ["v-e088dbf8","/article/algorithm/binarysearch/34.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">34. 在排序数组中查找元素的第一个和最后一个位置</a></h4>\n<p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p>","y":"a","title":"34.在排序数组中查找元素的第一个和最后一个位置"},["/article/algorithm/binarysearch/34","/article/algorithm/binarysearch/34.md"]],
  ["v-dd1f2aba","/article/algorithm/binarysearch/35.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener noreferrer\">35. 搜索插入位置</a></h4>\n<blockquote>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>请必须使用时间复杂度为 O(log n) 的算法。</p>\n<p>示例 1:</p>\n<p>输入: nums = [1,3,5,6], target = 5\n输出: 2\n示例 2:</p>\n<p>输入: nums = [1,3,5,6], target = 2\n输出: 1\n示例 3:</p>\n<p>输入: nums = [1,3,5,6], target = 7\n输出: 4</p>\n</blockquote>","y":"a","title":"35. 搜索插入位置"},["/article/algorithm/binarysearch/35","/article/algorithm/binarysearch/35.md"]],
  ["v-79bab0b9","/article/algorithm/binarysearch/4.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/\" target=\"_blank\" rel=\"noopener noreferrer\">4. 寻找两个正序数组的中位数</a></h4>\n<p>难度困难5898</p>\n<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>\n<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>","y":"a","title":"4. 寻找两个正序数组的中位数"},["/article/algorithm/binarysearch/4","/article/algorithm/binarysearch/4.md"]],
  ["v-31182dfa","/article/algorithm/binarysearch/410.html",{"c":["算法"],"g":["二分法"],"e":"<h4> <a href=\"https://leetcode.cn/problems/split-array-largest-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">410. 分割数组的最大值</a></h4>\n<p>难度困难</p>\n<p>给定一个非负整数数组 <code>nums</code> 和一个整数 <code>m</code> ，你需要将这个数组分成 <code>m</code> 个非空的连续子数组。</p>\n<p>设计一个算法使得这 <code>m</code> 个子数组各自和的最大值最小。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"410. 分割数组的最大值"},["/article/algorithm/binarysearch/410","/article/algorithm/binarysearch/410.md"]],
  ["v-07e478ec","/article/algorithm/binarysearch/overview.html",{"c":["算法"],"g":["二分法"],"e":"<h1> 二分法</h1>\n<p>二分类型题目一般有两类</p>\n<p><mark><strong>查找有序集合中某个值的位置</strong></mark>  和   <mark><strong>通过二分缩小范围猜答案</strong></mark></p>\n<h2> <strong>1.查找有序集合中某个值的位置</strong></h2>\n<p>一般会将整个区间分为<strong>左侧</strong>和<strong>右侧</strong>。</p>\n<p>通过在<strong>循环中的不变量</strong>获取最终的答案。</p>\n<p>对于一个 [1~n-1] 的区间上有序数组，根据区间开闭的定义，选定<strong>初始化</strong>的参数</p>","y":"a","title":"二分法概述"},["/article/algorithm/binarysearch/overview","/article/algorithm/binarysearch/overview.md"]],
  ["v-d08bc93e","/article/algorithm/bitmanipulation/78.html",{"c":["算法"],"g":["位运算"],"e":"<h4> <a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></h4>\n<p>难度中等1746</p>\n<p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p>\n<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"78. 子集"},["/article/algorithm/bitmanipulation/78","/article/algorithm/bitmanipulation/78.md"]],
  ["v-19373b0c","/article/algorithm/bitmanipulation/%E4%BD%8D%E8%BF%90%E7%AE%97.html",{"e":"<h1> 位运算</h1>\n<h2> 常用的位运算方法</h2>\n<h3> 异或^</h3>\n<blockquote>\n<p>不同为1，相同为0  </p>\n</blockquote>\n<p>判断两个值是否相等：a^b==0</p>\n<p>翻转第i位的值  a^(1&lt;&lt;(i-1))</p>\n<p>判断奇数或偶数个 奇：同一个数字偶数个相异或 全为0</p>\n<h3> 按位与&amp;</h3>\n<blockquote>\n<p>同时为1才为1 有一个为0则为0</p>\n</blockquote>\n<p>将二进制最右位的1变为0 ：num&amp;(num-1)</p>\n<p>提取最右一位的1：num&amp;(~(num-1))  也就是 num&amp;(-num)  </p>","y":"a","title":"位运算"},["/article/algorithm/bitmanipulation/位运算.html","/article/algorithm/bitmanipulation/%E4%BD%8D%E8%BF%90%E7%AE%97","/article/algorithm/bitmanipulation/位运算.md","/article/algorithm/bitmanipulation/%E4%BD%8D%E8%BF%90%E7%AE%97.md"]],
  ["v-00975204","/article/algorithm/datastruct/146.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/lru-cache/\" target=\"_blank\" rel=\"noopener noreferrer\">146. LRU 缓存</a></h4>\n<p>难度中等2336</p>\n<p>请你设计并实现一个满足 <a href=\"https://baike.baidu.com/item/LRU\" target=\"_blank\" rel=\"noopener noreferrer\">LRU (最近最少使用) 缓存</a> 约束的数据结构。</p>\n<p>实现 <code>LRUCache</code> 类：</p>","y":"a","title":"146. LRU 缓存"},["/article/algorithm/datastruct/146","/article/algorithm/datastruct/146.md"]],
  ["v-d06b892e","/article/algorithm/datastruct/460.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/lfu-cache/\" target=\"_blank\" rel=\"noopener noreferrer\">460. LFU 缓存</a></h4>\n<p>难度困难582</p>\n<p>请你为 <a href=\"https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">最不经常使用（LFU）</a>缓存算法设计并实现数据结构。</p>\n<p>实现 <code>LFUCache</code> 类：</p>","y":"a","title":"460. LFU 缓存"},["/article/algorithm/datastruct/460","/article/algorithm/datastruct/460.md"]],
  ["v-7c6a4908","/article/algorithm/datastruct/br-tree.html",{"c":["算法"],"g":["数据结构"],"e":"<p>红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。</p>\n<p>红黑树的特点</p>\n<blockquote>\n<p>1.每个节点或者是黑色，或者是红色。</p>\n<p>2.根节点是黑色。</p>\n<p>3.每个叶子节点是黑色。 注意：这里叶子节点，是指为空的叶子节点！</p>\n<p>4.如果一个节点是红色的，则它的子节点必须是黑色的。</p>\n<p>5.从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p>\n</blockquote>\n<h2> 插入数据put</h2>\n<p>初始化时 将该节点默认设为红色</p>","y":"a","title":"红黑树"},["/article/algorithm/datastruct/br-tree","/article/algorithm/datastruct/br-tree.md"]],
  ["v-a8caf944","/article/algorithm/datastruct/skiplist.html",{"c":["算法"],"g":["数据结构"],"e":"<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Skiplist</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_LEVEL</span> <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">P_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SkiplistNode</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Random</span> random<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Skiplist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MAX_LEVEL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SkiplistNode</span> curr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> level <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 找到第 i 层小于且最接近 target 的元素*/</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 检测当前元素的值是否等于 target */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> update <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">[</span><span class=\"token constant\">MAX_LEVEL</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SkiplistNode</span> curr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> level <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 找到第 i 层小于且最接近 num 的元素*/</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> lv <span class=\"token operator\">=</span> <span class=\"token function\">randomLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        level <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> lv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SkiplistNode</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> lv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lv<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 对第 i 层的状态进行更新，将当前元素的 forward 指向新的节点 */</span>\n            newNode<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> update <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">[</span><span class=\"token constant\">MAX_LEVEL</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SkiplistNode</span> curr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> level <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 找到第 i 层小于且最接近 num 的元素*/</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 如果值不存在则返回 false */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> curr<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> level<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> curr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">/* 对第 i 层的状态进行更新，将 forward 指向被删除节点的下一跳 */</span>\n            update<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* 更新当前的 level */</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> head<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">[</span>level <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            level<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">randomLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> lv <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 随机生成 lv */</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">P_FACTOR</span> <span class=\"token operator\">&amp;&amp;</span> lv <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAX_LEVEL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lv<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> lv<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SkiplistNode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> forward<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>forward <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SkiplistNode</span><span class=\"token punctuation\">[</span>maxLevel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"跳表"},["/article/algorithm/datastruct/skiplist","/article/algorithm/datastruct/skiplist.md"]],
  ["v-a856c8e2","/article/algorithm/datastruct/stack.html",{"c":["算法"],"g":["数据结构"],"e":"<p>栈是一种元素先入后出的数据结构</p>\n","y":"a","title":"栈"},["/article/algorithm/datastruct/stack","/article/algorithm/datastruct/stack.md"]],
  ["v-8aabea54","/article/algorithm/DFS/124.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/binary-tree-maximum-path-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">124. 二叉树中的最大路径和</a></h4>\n<p>难度困难</p>\n<p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong> 节点，且不一定经过根节点。</p>\n<p><strong>路径和</strong> 是路径中各节点值的总和。</p>","y":"a","title":"124. 二叉树中的最大路径和"},["/article/algorithm/DFS/124","/article/algorithm/DFS/124.md"]],
  ["v-cc153f4e","/article/algorithm/DFS/297.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">297. 二叉树的序列化与反序列化</a></h4>\n<p>难度困难942</p>\n<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>\n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>","y":"a","title":"297. 二叉树的序列化与反序列化"},["/article/algorithm/DFS/297","/article/algorithm/DFS/297.md"]],
  ["v-253bdd72","/article/algorithm/DFS/46.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></h4>\n<p>难度中等2236</p>\n<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：nums = [1,2,3]\n输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"46. 全排列"},["/article/algorithm/DFS/46","/article/algorithm/DFS/46.md"]],
  ["v-21d22c34","/article/algorithm/DFS/47.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/permutations-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">47. 全排列 II</a></h4>\n<p>难度中等1198</p>\n<p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：nums = [1,1,2]\n输出：\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"47. 全排列 II"},["/article/algorithm/DFS/47","/article/algorithm/DFS/47.md"]],
  ["v-e46cc8ae","/article/algorithm/DFS/77.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/combinations/\" target=\"_blank\" rel=\"noopener noreferrer\">77. 组合</a></h4>\n<p>难度中等1145</p>\n<p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p>\n<p>你可以按 <strong>任何顺序</strong> 返回答案。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"77. 组合"},["/article/algorithm/DFS/77","/article/algorithm/DFS/77.md"]],
  ["v-e1031770","/article/algorithm/DFS/78.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></h4>\n<p>难度中等1803</p>\n<p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p>\n<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"78. 子集"},["/article/algorithm/DFS/78","/article/algorithm/DFS/78.md"]],
  ["v-dd996632","/article/algorithm/DFS/79.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/word-search/\" target=\"_blank\" rel=\"noopener noreferrer\">79. 单词搜索</a></h4>\n<p>难度中等1434</p>\n<p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>","y":"a","title":"79. 单词搜索"},["/article/algorithm/DFS/79","/article/algorithm/DFS/79.md"]],
  ["v-28b7b45c","/article/algorithm/DFS/90.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/subsets-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">90. 子集 II</a></h4>\n<p>难度中等937</p>\n<p>给你一个整数数组 <code>nums</code> ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p>\n<p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"90. 子集 II"},["/article/algorithm/DFS/90","/article/algorithm/DFS/90.md"]],
  ["v-1b10ef64","/article/algorithm/DFS/94.html",{"c":["算法"],"g":["DFS"],"e":"<h4> <a href=\"https://leetcode.cn/problems/binary-tree-inorder-traversal/\" target=\"_blank\" rel=\"noopener noreferrer\">94. 二叉树的中序遍历</a></h4>\n<p>难度简单1574</p>\n<p>给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的 <strong>中序</strong> 遍历</em> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"94. 二叉树的中序遍历"},["/article/algorithm/DFS/94","/article/algorithm/DFS/94.md"]],
  ["v-b8c80a66","/article/algorithm/divideandconquer/169.html",{"c":["算法"],"g":["分治"],"e":"<h4> <a href=\"https://leetcode.cn/problems/majority-element/\" target=\"_blank\" rel=\"noopener noreferrer\">169. 多数元素</a></h4>\n<p>难度简单1578</p>\n<p>给定一个大小为 <code>n</code> 的数组 <code>nums</code> ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong> <code>⌊ n/2 ⌋</code> 的元素。</p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"169. 多数元素"},["/article/algorithm/divideandconquer/169","/article/algorithm/divideandconquer/169.md"]],
  ["v-07aac62a","/article/algorithm/divideandconquer/215.html",{"c":["算法"],"g":["分治"],"e":"<h4> <a href=\"https://leetcode.cn/problems/kth-largest-element-in-an-array/\" target=\"_blank\" rel=\"noopener noreferrer\">215. 数组中的第K个最大元素</a></h4>\n<p>难度中等1809</p>\n<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>**k**</code> 个最大的元素。</p>\n<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p>","y":"a","title":"215. 数组中的第K个最大元素"},["/article/algorithm/divideandconquer/215","/article/algorithm/divideandconquer/215.md"]],
  ["v-0301ee10","/article/algorithm/divideandconquer/23.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener noreferrer\">23. 合并K个升序链表</a></h4>\n<p>难度困难2168</p>\n<p>给你一个链表数组，每个链表都已经按升序排列。</p>\n<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：lists = [[1,4,5],[1,3,4],[2,6]]\n输出：[1,1,2,3,4,4,5,6]\n解释：链表数组如下：\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n将它们合并到一个有序链表中得到。\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"23. 合并K个升序链表"},["/article/algorithm/divideandconquer/23","/article/algorithm/divideandconquer/23.md"]],
  ["v-c6d3d414","/article/algorithm/divideandconquer/50.html",{"c":["算法"],"g":["分治"],"e":"<h4> <a href=\"https://leetcode.cn/problems/powx-n/\" target=\"_blank\" rel=\"noopener noreferrer\">50. Pow(x, n)</a></h4>\n<p>难度中等1048</p>\n<p>实现 <a href=\"https://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\" rel=\"noopener noreferrer\">pow(<em>x</em>, <em>n</em>)</a> ，即计算 <code>x</code> 的整数 <code>n</code> 次幂函数（即，<code>xn</code> ）。</p>","y":"a","title":"50. Pow(x, n)"},["/article/algorithm/divideandconquer/50","/article/algorithm/divideandconquer/50.md"]],
  ["v-7dd5c7f2","/article/algorithm/divideandconquer/98.html",{"c":["算法"],"g":["分治"],"e":"<h4> <a href=\"https://leetcode.cn/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">98. 验证二叉搜索树</a></h4>\n<p>难度中等1715</p>\n<p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p>\n<p><strong>有效</strong> 二叉搜索树定义如下：</p>\n<ul>\n<li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li>\n<li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>","y":"a","title":"98. 验证二叉搜索树"},["/article/algorithm/divideandconquer/98","/article/algorithm/divideandconquer/98.md"]],
  ["v-fc3815b8","/article/algorithm/doublepointer/11.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener noreferrer\">11. 盛最多水的容器</a></h4>\n<p>难度中等3714</p>\n<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p>","y":"a","title":"11. 盛最多水的容器"},["/article/algorithm/doublepointer/11","/article/algorithm/doublepointer/11.md"]],
  ["v-5cea16bf","/article/algorithm/doublepointer/142.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">142. 环形链表 II</a></h4>\n<p>难度中等</p>\n<p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>","y":"a","title":"142. 环形链表 II"},["/article/algorithm/doublepointer/142","/article/algorithm/doublepointer/142.md"]],
  ["v-068c4261","/article/algorithm/doublepointer/2302.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/\" target=\"_blank\" rel=\"noopener noreferrer\">2302. 统计得分小于 K 的子数组数目</a></h4>\n<p>难度困难12</p>\n<p>一个数字的 <strong>分数</strong> 定义为数组之和 <strong>乘以</strong> 数组的长度。</p>\n<ul>\n<li>比方说，<code>[1, 2, 3, 4, 5]</code> 的分数为 <code>(1 + 2 + 3 + 4 + 5) * 5 = 75</code> 。</li>\n</ul>","y":"a","title":"2302. 统计得分小于 K 的子数组数目"},["/article/algorithm/doublepointer/2302","/article/algorithm/doublepointer/2302.md"]],
  ["v-815b2900","/article/algorithm/doublepointer/26.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">26. 删除有序数组中的重复项</a></h4>\n<p>难度简单2792</p>\n<p>给你一个 <strong>升序排列</strong> 的数组 <code>nums</code> ，请你**<a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\"> 原地</a>** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p>","y":"a","title":"26. 删除有序数组中的重复项"},["/article/algorithm/doublepointer/26","/article/algorithm/doublepointer/26.md"]],
  ["v-7df177c2","/article/algorithm/doublepointer/27.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-element/\" target=\"_blank\" rel=\"noopener noreferrer\">27. 移除元素</a></h4>\n<p>难度简单1444</p>\n<p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>","y":"a","title":"27. 移除元素"},["/article/algorithm/doublepointer/27","/article/algorithm/doublepointer/27.md"]],
  ["v-cbcded7e","/article/algorithm/doublepointer/283.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/move-zeroes/\" target=\"_blank\" rel=\"noopener noreferrer\">283. 移动零</a></h4>\n<p>难度简单1696</p>\n<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p>\n<p><strong>示例 1:</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入: nums = [0,1,0,3,12]\n输出: [1,3,12,0,0]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"283. 移动零"},["/article/algorithm/doublepointer/283","/article/algorithm/doublepointer/283.md"]],
  ["v-377c0216","/article/algorithm/doublepointer/844.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/backspace-string-compare/\" target=\"_blank\" rel=\"noopener noreferrer\">844. 比较含退格的字符串</a></h4>\n<p>难度简单501</p>\n<p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code> 。<code>#</code> 代表退格字符。</p>\n<p>**注意：**如果对空文本输入退格字符，文本继续为空。</p>","y":"a","title":"844. 比较含退格的字符串"},["/article/algorithm/doublepointer/844","/article/algorithm/doublepointer/844.md"]],
  ["v-432e6a95","/article/algorithm/doublepointer/977.html",{"c":["算法"],"g":["双指针"],"e":"<h4> <a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\" target=\"_blank\" rel=\"noopener noreferrer\">977. 有序数组的平方</a></h4>\n<p>难度简单618</p>\n<p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"977. 有序数组的平方"},["/article/algorithm/doublepointer/977","/article/algorithm/doublepointer/977.md"]],
  ["v-e2feed74","/article/algorithm/doublepointer/%E5%8F%8C%E6%8C%87%E9%92%88.html",{"c":["算法"],"g":["双指针"],"e":"<p>双指针题目一般涉及链表等</p>\n","y":"a","title":"双指针"},["/article/algorithm/doublepointer/双指针.html","/article/algorithm/doublepointer/%E5%8F%8C%E6%8C%87%E9%92%88","/article/algorithm/doublepointer/双指针.md","/article/algorithm/doublepointer/%E5%8F%8C%E6%8C%87%E9%92%88.md"]],
  ["v-7bf7c450","/article/algorithm/dp/233.html",{"c":["算法"],"g":["动态规划"],"e":"<h4> <a href=\"https://leetcode.cn/problems/number-of-digit-one/\" target=\"_blank\" rel=\"noopener noreferrer\">233. 数字 1 的个数</a></h4>\n<p>难度困难469</p>\n<p>给定一个整数 <code>n</code>，计算所有小于等于 <code>n</code> 的非负整数中数字 <code>1</code> 出现的个数。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：n = 13\n输出：6\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"32. 最长有效括号"},["/article/algorithm/dp/233","/article/algorithm/dp/233.md"]],
  ["v-5c88a248","/article/algorithm/dp/2376.html",{"c":["算法"],"g":["动态规划"],"e":"<h4> <a href=\"https://leetcode.cn/problems/count-special-integers/\" target=\"_blank\" rel=\"noopener noreferrer\">2376. 统计特殊整数</a></h4>\n<p>难度困难34</p>\n<p>如果一个正整数每一个数位都是 <strong>互不相同</strong> 的，我们称它是 <strong>特殊整数</strong> 。</p>\n<p>给你一个 <strong>正</strong> 整数 <code>n</code> ，请你返回区间 <code>[1, n]</code> 之间特殊整数的数目。</p>","y":"a","title":"2376. 统计特殊整数"},["/article/algorithm/dp/2376","/article/algorithm/dp/2376.md"]],
  ["v-6291fbe9","/article/algorithm/dp/32.html",{"c":["算法"],"g":["动态规划"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-valid-parentheses/\" target=\"_blank\" rel=\"noopener noreferrer\">32. 最长有效括号</a></h4>\n<p>难度困难2018</p>\n<p>给你一个只包含 <code>'('</code> 和 <code>')'</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：s = \"(()\"\n输出：2\n解释：最长有效括号子串是 \"()\"\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"32. 最长有效括号"},["/article/algorithm/dp/32","/article/algorithm/dp/32.md"]],
  ["v-cbd632f8","/article/algorithm/dp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html",{"e":"<h1> 动态规划</h1>\n<h4> 动态规划</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">题号题目</th>\n<th>类型</th>\n<th>难度</th>\n<th>状态说明</th>\n<th>状态转移方程</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/meafa8eevhQnvZW9mCpTpx\" title=\"509. 斐波那契数\" target=\"_blank\" rel=\"noopener noreferrer\">509. 斐波那契数</a></td>\n<td>单序列,坐标型</td>\n<td>简单</td>\n<td>i表示第i个斐波那契数</td>\n<td>dp[i]=dp[i-1]+dp[i-2]</td>\n<td><a href=\"https://leetcode.cn/problems/fibonacci-number/\" title=\"https://leetcode.cn/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/fibonacci-number/</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/5tkzpwMRkfcuF6LboGPRBR\" title=\"70.爬楼梯\" target=\"_blank\" rel=\"noopener noreferrer\">70.爬楼梯</a></td>\n<td>单序列,坐标型</td>\n<td>简单</td>\n<td>i表示第i级台阶</td>\n<td>dp[i]=dp[i-1]+dp[i-2]</td>\n<td><a href=\"https://leetcode.cn/problems/climbing-stairs/\" title=\"https://leetcode.cn/problems/climbing-stairs/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/climbing-stairs/</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/2TmDF6VRXYwW2esxLwec4s\" title=\"746. 使用最小花费爬楼梯\" target=\"_blank\" rel=\"noopener noreferrer\">746. 使用最小花费爬楼梯</a></td>\n<td>单序列,坐标型</td>\n<td>简单</td>\n<td>i表示第i级台阶</td>\n<td>dp[i]=min(dp[i−1]+cost[i−1],dp[i−2]+cost[i−2])</td>\n<td><a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/\" title=\"https://leetcode.cn/problems/min-cost-climbing-stairs/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/min-cost-climbing-stairs/</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/jEm1ky3Fx539xSCMLcQzzL\" title=\"264. 丑数 II\" target=\"_blank\" rel=\"noopener noreferrer\">264. 丑数 II</a></td>\n<td>坐标型</td>\n<td>中等</td>\n<td>dp[i]表示第i个丑数</td>\n<td>dp[i] = min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5)</td>\n<td><a href=\"https://leetcode.cn/problems/ugly-number-ii/\" title=\"https://leetcode.cn/problems/ugly-number-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/ugly-number-ii/</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/5RP5fwU98TPgyjKX61qYYr\" title=\"剑指 Offer 60. n个骰子的点数\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer 60. n个骰子的点数</a></td>\n<td>坐标型</td>\n<td>中等</td>\n<td>dp[i][j]为第i次掷骰子时点数j出现的次数</td>\n<td>dp[i][j] = sum(dp[i-1][j-k]) k=1~6 and j-k&gt;=1</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/2RT83FSHw2ccUWASkRCsb5\" title=\"剑指 Offer 42. 连续子数组的最大和\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer 42. 连续子数组的最大和</a></td>\n<td>坐标型</td>\n<td>中等</td>\n<td>dp[i] 表示以元素 nums[i] 为结尾的连续子数组最大和</td>\n<td>dp[i] = max(nums[i], dp[i-1] + nums[i])</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/78MVFQPtYwWCCVNBHuWxuw\" title=\"121.买卖股票的最佳时机\" target=\"_blank\" rel=\"noopener noreferrer\">121.买卖股票的最佳时机</a></td>\n<td>单序列,坐标型</td>\n<td>简单</td>\n<td>dp[i] 表示第 i 天的最大利润</td>\n<td>minprice = min(minprice, prices[i])\ndp[i] = max(dp[i - 1], prices[i] - minprice)</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/5WH9hmvfcXdJFDAChaLG4b\" title=\"122.买卖股票的最佳时机 II\" target=\"_blank\" rel=\"noopener noreferrer\">122.买卖股票的最佳时机 II</a></td>\n<td>坐标型</td>\n<td>中等</td>\n<td>dp[i][0] 表示第 i 天交易完后手里没有股票时的最大利润\ndp[i][1] 表示第 i 天交易完后手里持有一支股票时的最大利润</td>\n<td>dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\ndp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/gJw9AixrZt9eZXUvKswLYE\" title=\"123. 买卖股票的最佳时机 III\" target=\"_blank\" rel=\"noopener noreferrer\">123. 买卖股票的最佳时机 III</a></td>\n<td>坐标型</td>\n<td>困难</td>\n<td>buy1表示第一次购买、sell1表示第一次售卖、buy2表示第二次购买、sell2表示第二次售卖</td>\n<td>buy1 = Math.max(buy1, -prices[i]);\nsell1 = Math.max(sell1, buy1 + prices[i]);\nbuy2 = Math.max(buy2, sell1 - prices[i]);\nsell2 = Math.max(sell2, buy2 + prices[i]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/fFd5eXpKdvNVgishDmauND\" title=\"188. 买卖股票的最佳时机 IV\" target=\"_blank\" rel=\"noopener noreferrer\">188. 买卖股票的最佳时机 IV</a></td>\n<td>坐标型</td>\n<td>困难</td>\n<td>buy[i][j]表示在第i天刚好进行j次交易时 持有股票的最大收益</td>\n<td>buy[i][j] = Math.max(buy[i - 1][j], sell[i - 1][j] - prices[i]);\nsell[i][j] = Math.max(sell[i - 1][j], buy[i - 1][j - 1] + prices[i]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/negBcLggHie6Tx68NjnGqa\" title=\"309. 最佳买卖股票时机含冷冻期\" target=\"_blank\" rel=\"noopener noreferrer\">309. 最佳买卖股票时机含冷冻期</a></td>\n<td>坐标型</td>\n<td>中等</td>\n<td>dp[i][0]: 手上持有股票的最大收益\ndp[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益\ndp[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益</td>\n<td>dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i]);\ndp[i][1] = dp[i - 1][0] + prices[i];\ndp[i][2] = Math.max(dp[i - 1][1], dp[i - 1][2]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/o645AjGNJgKcqNMpZ2wbGL\" title=\"714. 买卖股票的最佳时机含手续费\" target=\"_blank\" rel=\"noopener noreferrer\">714. 买卖股票的最佳时机含手续费</a></td>\n<td>坐标型</td>\n<td>中等</td>\n<td>dp[i][0] 表示第 i 天交易完后手里没有股票时的最大利润\ndp[i][1] 表示第 i 天交易完后手里持有一支股票时的最大利润</td>\n<td>dp[i][0]=Math.max(dp[i-1][0],dp[i-1][1]+prices[i]-fee);\ndp[i][1]=Math.max(dp[i-1][1],dp[i-1][0]-prices[i]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/4T28cdfR6XEcxZGySjAby2\" title=\"62. 不同路径\" target=\"_blank\" rel=\"noopener noreferrer\">62. 不同路径</a></td>\n<td>路径型</td>\n<td>中等</td>\n<td>dp[i][j]表示到坐标i，j时的不同路径数</td>\n<td>if(i&gt;0&amp;&amp;j&gt;0)\ndp[i][j] = dp[i-1][j]+dp[i][j-1];\nelse if(i&gt;0) dp[i][j]=dp[i-1][j];\nelse if(j&gt;0) dp[i][j]=dp[i][j-1];</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/9Gr4vN2E64EoSDoCchJLJj\" title=\"63. 不同路径 II\" target=\"_blank\" rel=\"noopener noreferrer\">63. 不同路径 II</a></td>\n<td>路径型</td>\n<td>中等</td>\n<td>dp[i][j]表示到坐标i，j时的不同路径数</td>\n<td>if (grid[i][j] != 1) \n f[i][j] = f[i - 1][j] + f[i][j - 1];              \n</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/ew1e2nA8YcX8AF9rZMkFhj\" title=\"64. 最小路径和\" target=\"_blank\" rel=\"noopener noreferrer\">64. 最小路径和</a></td>\n<td>路径型</td>\n<td>中等</td>\n<td>dp[i][j]表示i，j位置的最小路径</td>\n<td>dp[i][j]=Math.min(dp[i-1][j],dp[i][j-1])+grid[i][j];</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/56FfM9qtrsMuTDFKUHLFgB\" title=\"174. 地下城游戏\" target=\"_blank\" rel=\"noopener noreferrer\">174. 地下城游戏</a></td>\n<td>路径型</td>\n<td>困难</td>\n<td>从终点往起点反向dp dp[i][j]表示到达i，j位置时最少需要的血量</td>\n<td>dp[i][j] = Math.max(Math.min(dp[i+1][j],dp[i][j+1])-dungeon[i][j],1);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/oMZYU2C1tvniNRaaquxPwU\" title=\"329. 矩阵中的最长递增路径\" target=\"_blank\" rel=\"noopener noreferrer\">329. 矩阵中的最长递增路径</a></td>\n<td>路径型</td>\n<td>困难</td>\n<td>i，j表示到达i，j时的最长递增路径</td>\n<td>dp[i][j] = max(dp[i][j], dp[nextI][nextJ] + 1)\nnextI, nextJ = [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/7v11snz7cY9DwbCoN9UZDk\" title=\"656. 金币路径\" target=\"_blank\" rel=\"noopener noreferrer\">656. 金币路径</a></td>\n<td>路径型</td>\n<td>困难</td>\n<td>dp[i]表示到达i处需要花费的最少金币（反向）</td>\n<td>dp[i] = dp[j] + coins[i]</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/4QyHmm57V2HzDEBPf7pGh\" title=\"198. 打家劫舍\" target=\"_blank\" rel=\"noopener noreferrer\">198. 打家劫舍</a></td>\n<td>单序列,路径型</td>\n<td>中等</td>\n<td>dp[i]表示到达第i家时获得的最大收益</td>\n<td>dp[i]=Math.max(dp[i-2]+nums[i],dp[i-1]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/dnwUdpo7BorKVuzV7w4Yi6\" title=\"213. 打家劫舍 II\" target=\"_blank\" rel=\"noopener noreferrer\">213. 打家劫舍 II</a></td>\n<td>路径型</td>\n<td>中等</td>\n<td>将区间分为0-n-1、1-n两份对两份分别使用198的方法</td>\n<td>dp[i]=Math.max(dp[i-2]+nums[i],dp[i-1]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/o2qyVa1oggJpNm5cLCSUvw\" title=\"276. 栅栏涂色\" target=\"_blank\" rel=\"noopener noreferrer\">276. 栅栏涂色</a></td>\n<td>路径型</td>\n<td>中等</td>\n<td>dp[i]表示第i个栅栏的方法 如果与dp[i-1]不同，则有k-1种方法、如果与dp[i-1]相同，需要保证i-1与i-2不同i-1就有k-1种方法 同理i也有k-1种解法</td>\n<td>dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1) =(dp[i−2]+dp[i−1])∗(k−1)\n\n</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/9cbDqVnqxiWbxcJnuof2ve\" title=\"120. 三角形最小路径和\" target=\"_blank\" rel=\"noopener noreferrer\">120. 三角形最小路径和</a></td>\n<td>路径型</td>\n<td>中等</td>\n<td>f[i][j]f[i][j] 表示从三角形顶部走到位置 (i, j)(i,j) 的最小路径和。</td>\n<td>f[i][j]=min(f[i−1][j−1],f[i−1][j])+c[i][j]</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/sTQ7YNG6XJaY1VkPX3kqbQ\" title=\"322. 零钱兑换\" target=\"_blank\" rel=\"noopener noreferrer\">322. 零钱兑换</a></td>\n<td>背包型,完全背包</td>\n<td>中等</td>\n<td>dp[i][j]表示对于前i种硬币，取出amount为j的最少硬币取法（完全背包）可以优化为一维dp[i]表示对于amount为i的最少取法</td>\n<td>dp[i][j]=Math.min(dp[i][j],dp[i][j-coins[i-1]]+1);或者采用一维 dp[i] = Math.min(dp[i], dp[i - coin] + 1);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/bfbXGTakWYB3vRBEUbu2EX\" title=\"518. 零钱兑换 II\" target=\"_blank\" rel=\"noopener noreferrer\">518. 零钱兑换 II</a></td>\n<td>背包型,完全背包</td>\n<td>中等</td>\n<td>dp[i]表示对于目标钱数i 有多少种可能</td>\n<td>dp[i] += dp[i - coin];</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/i2B8sFBMGsnT21cFaQzQTF\" title=\"474. 一和零\" target=\"_blank\" rel=\"noopener noreferrer\">474. 一和零</a></td>\n<td>背包型,01背包</td>\n<td>中等</td>\n<td>01背包  dp[i][j]表示0的容量为i ，1的容量为j的子集中的最大个数</td>\n<td>dp[i][j]=Math.max(dp[i][j],dp[i-Zeros][j-Ones]+1);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/7yGsk6gW2AJS4AWkr7TbUz\" title=\"416. 分割等和子集\" target=\"_blank\" rel=\"noopener noreferrer\">416. 分割等和子集</a></td>\n<td>背包型,01背包</td>\n<td>中等</td>\n<td>01背包 dp[i]表示目标和为i时是否可以分割成功</td>\n<td>dp[i]=dp[i]||dp[i-num];</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/agPEXT2YvWco4XtsUwuFyj\" title=\"1049. 最后一块石头的重量 II\" target=\"_blank\" rel=\"noopener noreferrer\">1049. 最后一块石头的重量 II</a></td>\n<td>背包型,01背包</td>\n<td>中等</td>\n<td>01背包 背包容量为sum/2 找到最大值  答案就为 sum-2*dp[n] dp[i]表示容量为i时的最小答案</td>\n<td>dp[i]=Math.max(dp[i],dp[i-stone]+stone);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/7ZAtEMtvCnsdJZZyiPsaGw\" title=\"494. 目标和\" target=\"_blank\" rel=\"noopener noreferrer\">494. 目标和</a></td>\n<td>背包型,01背包</td>\n<td>中等</td>\n<td>将加数拆分为两块 一块为加数写作a 一块为减数为b 则最终target应该等于a-b=target  而a+b=sum两式相加得a=（S+sum）/2剩下的一半即为减数 所以题目就变成求解 背包容量为a的种类数</td>\n<td>dp[i]+=dp[i-num];</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/mAnXjVKs6NAXs3WWSzdaw7\" title=\"377. 组合总和 Ⅳ\" target=\"_blank\" rel=\"noopener noreferrer\">377. 组合总和 Ⅳ</a></td>\n<td>背包型,01背包</td>\n<td>中等</td>\n<td>同494</td>\n<td>dp[i]+=dp[i-num];</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/j6qCYjL9pmWpa52DaTzUH4\" title=\"115. 不同的子序列\" target=\"_blank\" rel=\"noopener noreferrer\">115. 不同的子序列</a></td>\n<td>双序列</td>\n<td>困难</td>\n<td>dp[i][j]表示在target的前j个字符在s的前i个字符中出现的次数</td>\n<td>if(s.charAt(i-1)==t.charAt(j-1))\ndp[i][j]=dp[i-1][j]+dp[i-1][j-1];\n else\ndp[i][j]=dp[i-1][j];</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/3ipEmbarEp7EdPHK1UxWCt\" title=\"91. 解码方法\" target=\"_blank\" rel=\"noopener noreferrer\">91. 解码方法</a></td>\n<td>单序列</td>\n<td>中等</td>\n<td>通过dfs recursive方式记录搜索结果 memo[i]表示i...length的解码方法个数</td>\n<td>memo[i]=dfs(s,i+1,memo)+dfs(s,i+2,memo);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/gATXamtVwk2KaGvLyc5W9X\" title=\"139. 单词拆分\" target=\"_blank\" rel=\"noopener noreferrer\">139. 单词拆分</a></td>\n<td>单序列</td>\n<td>中等</td>\n<td>dp[i]记录索引到i时字典是否包含该单词</td>\n<td>dfs或iterative way</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/jqqsoac3k6sYcbr8u8cVo7\" title=\"140. 单词拆分 II\" target=\"_blank\" rel=\"noopener noreferrer\">140. 单词拆分 II</a></td>\n<td>单序列</td>\n<td>困难</td>\n<td>同上 需要记录答案</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/razhWimkHjBhsxMteuExjg\" title=\"53. 最大子数组和\" target=\"_blank\" rel=\"noopener noreferrer\">53. 最大子数组和</a></td>\n<td>单序列</td>\n<td>简单</td>\n<td>dp[i]表示到达i位置时前i个元素的最大子数组和为多少</td>\n<td>dp[i]=max(dp[i-1],dp[i]+num[i])</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/iGiYbjfp7caFuiioSnS1hx\" title=\"152. 乘积最大子数组\" target=\"_blank\" rel=\"noopener noreferrer\">152. 乘积最大子数组</a></td>\n<td>单序列</td>\n<td>中等</td>\n<td>维护一个maxdp和一个mindp 如果当前数大于0则max为nums*max</td>\n<td>if(nums[i]&gt;0)          max[i]=Math.max(nums[i],nums[i]<em>max[i-1]);\nmin[i]=Math.min(nums[i],nums[i]</em> min[i-1]);\nelse{\nmax[i]=Math.max(nums[i],nums[i]<em>min[i-1]);\nmin[i]=Math.min(nums[i],nums[i]</em> max[i-1]);\n}</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/jVFMw5XbH6HCy3kEX2kDXX\" title=\"300. 最长递增子序列\" target=\"_blank\" rel=\"noopener noreferrer\">300. 最长递增子序列</a></td>\n<td>单序列</td>\n<td>中等</td>\n<td>维护一个单调栈 有比末尾数字大的数进来时 在dp中通过二分法寻找插入位置 最后返回size就是答案 dp[i]为构造的答案</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/tiAJTHUBrr2RWzJqqEJ57K\" title=\"1713. 得到子序列的最少操作次数\" target=\"_blank\" rel=\"noopener noreferrer\">1713. 得到子序列的最少操作次数</a></td>\n<td>单序列</td>\n<td>困难</td>\n<td>利用300题解 计算target序列的下标的最长递增子序列数 target-res即为</td>\n<td>同300</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/uahGXKduDVnW79cF9dsaEM\" title=\"97. 交错字符串\" target=\"_blank\" rel=\"noopener noreferrer\">97. 交错字符串</a></td>\n<td>双序列</td>\n<td>中等</td>\n<td>dp[i][j]表示s1的前i个和s2的前j个字符能否组成s3的前i+j个字符 如果能则true</td>\n<td>dp[i][j]=(s3.charAt(i+j-1)==s1.charAt(i-1)&amp;&amp;dp[i-1][j])||(s3.charAt(i+j-1)==s2.charAt(j-1)&amp;&amp;dp[i][j-1]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/8V6pYUDe8obGMTAbM7MhiU\" title=\"72. 编辑距离\" target=\"_blank\" rel=\"noopener noreferrer\">72. 编辑距离</a></td>\n<td>双序列</td>\n<td>困难</td>\n<td>dp[i][j]表示a的前i个和b的前j个之间的编辑距离   A后有三种可能 a的char与b相等 则直接拿i-1，j-1即可， a删除一个与b相等，a替换一个与b相等，a插入一个与b相等</td>\n<td>if(word1.charAt(i-1)==word2.charAt(j-1))\ndp[i][j]=dp[i-1][j-1];\n else\ndp[i][j]=Math.min(Math.min(dp[i-1][j]+1,dp[i][j-1]+1),dp[i-1][j-1]+1);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/j6jn8NdbJPfAmCaGVd1fvD\" title=\"1143. 最长公共子序列 lcs\" target=\"_blank\" rel=\"noopener noreferrer\">1143. 最长公共子序列 lcs</a></td>\n<td>双序列</td>\n<td>中等</td>\n<td>dp[i][j]表示s1的前i个字符串与s2的前j个字符组成的最长公共子序列</td>\n<td>if(word1.charAt(i-1)==word2.charAt(j-1))\ndp[i][j]=1+dp[i-1][j-1];\nelse\ndp[i][j]=Math.max(dp[i-1][j]+1,dp[i][j-1]+1);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/hPtUzccBqAsjv4unNZioag\" title=\"1312. 让字符串成为回文串的最少插入次数\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td>\n<td>双序列</td>\n<td>困难</td>\n<td>lcs变形 将字符串翻转 再找翻转的字符串与原来的lcs 答案为length-lcs</td>\n<td>同1143</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/wUzjHPWL7enJpKggbx4AVr\" title=\"516. 最长回文子序列\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td>\n<td>双序列,区间型</td>\n<td>中等</td>\n<td>lcs 直接返回reverse后的字符串</td>\n<td>同1143</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/sDoaeAX2UwKwF7TY4hc3b7\" title=\"1216. 验证回文字符串 III\" target=\"_blank\" rel=\"noopener noreferrer\">1216. 验证回文字符串 III</a></td>\n<td>双序列,区间型</td>\n<td>困难</td>\n<td>lcs 判断s.length-lcs是否&lt;=k</td>\n<td>同1143</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/7s4LWtcRf7uJCiNiUTRNJS\" title=\"5. 最长回文子串\" target=\"_blank\" rel=\"noopener noreferrer\">5. 最长回文子串</a></td>\n<td>区间型</td>\n<td>中等</td>\n<td>dp[i][j]表示字符串在i...j范围内是否为回文串  如果chari==charj 则看内部是否是回文串 i+1到j-1是否是回文串</td>\n<td>if(s.charAt(i)==s.charAt(j)&amp;&amp;((j-i)&lt;=2||dp[i+1][j-1]))\ndp[i][j]=true;\n</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/9ou6T442YY5cGKxCBhQkBH\" title=\"312. 戳气球\" target=\"_blank\" rel=\"noopener noreferrer\">312. 戳气球</a></td>\n<td>区间型</td>\n<td>困难</td>\n<td>dp[i][j]表示在i...j范围内拿到的最多硬币数</td>\n<td>dfs+memo                                                      left = dfs(start,i-1,nums,dp);\nint right = dfs(i+1,end,nums,dp);\nint cur = get(nums,i)<em>get(nums,start-1)</em> get(nums,end+1);\nmax = Math.max(max,cur+left+right);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/ksFTQJPnfmRMb9be7xbLSP\" title=\"1039. 多边形三角剖分的最低得分\" target=\"_blank\" rel=\"noopener noreferrer\">1039. 多边形三角剖分的最低得分</a></td>\n<td>区间型</td>\n<td>中等</td>\n<td>同312 需要注意的是多边形至少要有三条边</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/6sBcrBFLwt6t3CqsE12Jir\" title=\"221. 最大正方形\" target=\"_blank\" rel=\"noopener noreferrer\">221. 最大正方形</a></td>\n<td>坐标型</td>\n<td>中等</td>\n<td>dp[i][j]表明以i，j为右下角的最大正方形的面积</td>\n<td>dp[i][j]=Math.min(Math.min(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1])+1;</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/9cDKTN33nZi61bexaQk36x\" title=\"294. 翻转游戏 II\" target=\"_blank\" rel=\"noopener noreferrer\">294. 翻转游戏 II</a></td>\n<td>博弈型</td>\n<td>中等</td>\n<td>dfs+memo</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/gWEZ8RBd4gciA2XCDQ3v1T\" title=\"292. Nim 游戏\" target=\"_blank\" rel=\"noopener noreferrer\">292. Nim 游戏</a></td>\n<td>博弈型</td>\n<td>中等</td>\n<td>return n%4!=0;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/kWZAxvwUtfo7wgpWfUmTBs\" title=\"877. 石子游戏\" target=\"_blank\" rel=\"noopener noreferrer\">877. 石子游戏</a></td>\n<td>博弈型</td>\n<td>中等</td>\n<td>memo+dfs</td>\n<td>memo[i][j]= Math.max(nums[i]-dfs(nums,i+1,j,memo),nums[j]-dfs(nums,i,j-1,memo));</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/c2RLoGSk1ARzUYvdkRAdxW\" title=\"376. 摆动序列\" target=\"_blank\" rel=\"noopener noreferrer\">376. 摆动序列</a></td>\n<td></td>\n<td>中等</td>\n<td>贪心 或 dp 变一维</td>\n<td>if (nums[i] &gt; nums[i - 1])\n            up = down + 1;\n        else if (nums[i] &lt; nums[i - 1])\n            down = up + 1;</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/j4NNNWS33ovKCs6YLUXXN3\" title=\"487. 最大连续1的个数 II\" target=\"_blank\" rel=\"noopener noreferrer\">487. 最大连续1的个数 II</a></td>\n<td>单序列,行使权力</td>\n<td>中等</td>\n<td>dp[i][0]表示以当前元素结尾 没有行使翻转权利的最长连续 1  dp[i][1]为行使权利后的结果</td>\n<td>if(nums[i]==1){\n                dp[i][0]=dp[i-1][0]+1;\n                dp[i][1]=dp[i-1][1]+1;\n            }else{\n                dp[i][0]=0;\n                dp[i][1]=dp[i-1][0]+1;\n            }</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/bZ5ji7KpYJQUQivDq8md7m\" title=\"1186. 删除一次得到子数组最大和\" target=\"_blank\" rel=\"noopener noreferrer\">1186. 删除一次得到子数组最大和</a></td>\n<td>单序列,行使权力</td>\n<td>中等</td>\n<td>dp[i][0]表示以当前元素结尾 没有行使删除权利的最长连续 1  dp[i][1]为行使删除权利后的结果</td>\n<td>dp[i][0]=Math.max(dp[i-1][0]+arr[i],arr[i]);\n            dp[i][1]=Math.max(dp[i-1][0],dp[i-1][1]+arr[i]);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/sRnkdcRnynoqt8D5t1dqMm\" title=\"1092. 最短公共超序列\" target=\"_blank\" rel=\"noopener noreferrer\">1092. 最短公共超序列</a></td>\n<td>双序列</td>\n<td>困难</td>\n<td>LCS 再对dp结果进行处理拿到答案序列</td>\n<td>同LCS</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/tC99mTHVjW7wNVgd8C2Zn4\" title=\"1105. 填充书架\" target=\"_blank\" rel=\"noopener noreferrer\">1105. 填充书架</a></td>\n<td>单序列,时间序列加强</td>\n<td>中等</td>\n<td>i表示以第i本书作为上一层的最后一本书的最小高度</td>\n<td>levelWidth+=books[j-1][0];\nif(levelWidth&gt;shelfWidth) break;        levelMaxHeight=Math.max(levelMaxHeight,books[j-1][1]);\ndp[i]=Math.min(dp[i],dp[j-1]+levelMaxHeight);</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/92ckzocMy1n4B71bLutmXp\" title=\"1278. 分割回文串 III\" target=\"_blank\" rel=\"noopener noreferrer\">1278. 分割回文串 III</a></td>\n<td>区间型</td>\n<td>困难</td>\n<td>dp[i][j]表示前i个字符分割为k个区间需要改动的最小字符个数   对于前i个字符来说 分成的第k个区间取决于第k-1个区间再加上count最后一个区间的次数  在k-1，i的区间内依次遍历即可</td>\n<td>for(int i=0;i&lt;=n;i++)\nfor(int j=1;j&lt;=Math.min(i,k);j++){\nif(j==1) dp[i][j]=count(s.substring(0,i));\nfor(int m=i-1;m&gt;=j-1;m--){\ndp[i][j]=Math.min(dp[i][j],dp[m][j-1]+count(s.substring(m,i)));</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/k1KbFzdVUxPpRcice4tkA8\" title=\"813. 最大平均值和的分组\" target=\"_blank\" rel=\"noopener noreferrer\">813. 最大平均值和的分组</a></td>\n<td>区间型</td>\n<td>中等</td>\n<td>类似1278 需要初始化dp数组</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.wolai.com/8Twtd8Dun9KcL9oXBQTBhc\" title=\"410. 分割数组的最大值\" target=\"_blank\" rel=\"noopener noreferrer\">410. 分割数组的最大值</a></td>\n<td>区间型</td>\n<td>困难</td>\n<td>类似1278 本题可以采用二分猜答案</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>","y":"a","title":"动态规划"},["/article/algorithm/dp/动态规划.html","/article/algorithm/dp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92","/article/algorithm/dp/动态规划.md","/article/algorithm/dp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.md"]],
  ["v-b6413678","/article/algorithm/graph/1135.html",{"c":["算法"],"g":["最小生成树(MST)"],"e":"<h4> <a href=\"https://leetcode.cn/problems/connecting-cities-with-minimum-cost/\" target=\"_blank\" rel=\"noopener noreferrer\">1135. 最低成本联通所有城市</a></h4>\n<p>难度中等95</p>\n<p>想象一下你是个城市基建规划者，地图上有 <code>n</code> 座城市，它们按以 <code>1</code> 到 <code>n</code> 的次序编号。</p>\n<p>给你整数 <code>n</code> 和一个数组 <code>conections</code>，其中 <code>connections[i] = [xi, yi, costi]</code> 表示将城市 <code>xi</code> 和城市 <code>yi</code> 连接所要的<code>costi</code>（<strong>连接是双向的</strong>）。</p>","y":"a","title":"1135. 最低成本联通所有城市"},["/article/algorithm/graph/1135","/article/algorithm/graph/1135.md"]],
  ["v-59062c1a","/article/algorithm/graph/207.html",{"c":["算法"],"g":["BFS","graph"],"e":"<h4> <a href=\"https://leetcode.cn/problems/course-schedule/\" target=\"_blank\" rel=\"noopener noreferrer\">207. 课程表</a></h4>\n<p>难度中等1427</p>\n<p>你这个学期必须选修 <code>numCourses</code> 门课程，记为 <code>0</code> 到 <code>numCourses - 1</code> 。</p>\n<p>在选修某些课程之前需要一些先修课程。 先修课程按数组 <code>prerequisites</code> 给出，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示如果要学习课程 <code>ai</code> 则 <strong>必须</strong> 先学习课程 <code>bi</code> 。</p>","y":"a","title":"207. 课程表"},["/article/algorithm/graph/207","/article/algorithm/graph/207.md"]],
  ["v-071d8e4a","/article/algorithm/graph/210.html",{"c":["算法"],"g":["BFS","graph"],"e":"<h4> <a href=\"https://leetcode.cn/problems/course-schedule-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">210. 课程表 II</a></h4>\n<p>难度中等709</p>\n<p>现在你总共有 <code>numCourses</code> 门课需要选，记为 <code>0</code> 到 <code>numCourses - 1</code>。给你一个数组 <code>prerequisites</code> ，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示在选修课程 <code>ai</code> 前 <strong>必须</strong> 先选修 <code>bi</code> 。</p>","y":"a","title":"210. 课程表 II"},["/article/algorithm/graph/210","/article/algorithm/graph/210.md"]],
  ["v-4ccbc0a6","/article/algorithm/graph/overview.html",{"c":["算法"],"g":["graph"],"e":"<h2> <strong>基础概念</strong></h2>\n<p><strong>图 (graph)</strong> 是一个二元组G(V(G),E(G))。其中V(G)是非空集，称为 <strong>点集 (vertex set)</strong>，对于V中的每个元素，我们称其为 <strong>顶点 (vertex)</strong> 或 <strong>节点 (node)</strong>，简称 <strong>点</strong>；E(G)为V(G)各结点之间边的集合，称为 <strong>边集 (edge set)</strong>。</p>\n<h2> <strong>图的存储</strong></h2>","y":"a","title":"图论概念"},["/article/algorithm/graph/overview","/article/algorithm/graph/overview.md"]],
  ["v-2ecf3134","/article/algorithm/heap/%E5%A0%86.html",{"e":"<h1> 堆 Heap</h1>\n<p>思维·转换</p>\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P2859\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.luogu.com.cn/problem/P2859</a></li>\n<li><a href=\"https://www.luogu.com.cn/problem/P4952\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.luogu.com.cn/problem/P4952</a> 枚举中位数</li>\n<li><a href=\"https://codeforces.com/contest/713/problem/C\" target=\"_blank\" rel=\"noopener noreferrer\">https://codeforces.com/contest/713/problem/C</a> 使序列严格递增的最小操作次数 (+1/-1)</li>\n<li>​    <a href=\"https://codeforces.com/blog/entry/47094?#comment-315068\" target=\"_blank\" rel=\"noopener noreferrer\">https://codeforces.com/blog/entry/47094?#comment-315068</a></li>\n<li>​    <a href=\"https://codeforces.com/blog/entry/77298\" target=\"_blank\" rel=\"noopener noreferrer\">https://codeforces.com/blog/entry/77298</a> Slope trick</li>\n<li><a href=\"https://codeforces.com/problemset/problem/884/D\" target=\"_blank\" rel=\"noopener noreferrer\">https://codeforces.com/problemset/problem/884/D</a> 从结果倒推（类似霍夫曼编码）</li>\n<li><a href=\"https://codeforces.com/problemset/problem/1251/E2\" target=\"_blank\" rel=\"noopener noreferrer\">https://codeforces.com/problemset/problem/1251/E2</a></li>\n</ul>","y":"a","title":"堆 Heap"},["/article/algorithm/heap/堆.html","/article/algorithm/heap/%E5%A0%86","/article/algorithm/heap/堆.md","/article/algorithm/heap/%E5%A0%86.md"]],
  ["v-55292859","/article/algorithm/linkedlist/1171.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-zero-sum-consecutive-nodes-from-linked-list/\" target=\"_blank\" rel=\"noopener noreferrer\">1171. 从链表中删去总和值为零的连续节点</a></h4>\n<p>难度中等177</p>\n<p>给你一个链表的头节点 <code>head</code>，请你编写代码，反复删去链表中由 <strong>总和</strong> 值为 <code>0</code> 的连续节点组成的序列，直到不存在这样的序列为止。</p>\n","y":"a","title":"1171. 从链表中删去总和值为零的连续节点"},["/article/algorithm/linkedlist/1171","/article/algorithm/linkedlist/1171.md"]],
  ["v-c0858e6e","/article/algorithm/linkedlist/138.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/copy-list-with-random-pointer/\" target=\"_blank\" rel=\"noopener noreferrer\">138. 复制带随机指针的链表</a></h4>\n<p>难度中等991</p>\n<p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。</p>\n<p>构造这个链表的 <strong><a href=\"https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin\" target=\"_blank\" rel=\"noopener noreferrer\">深拷贝</a></strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点</strong> 。</p>","y":"a","title":"138. 复制带随机指针的链表"},["/article/algorithm/linkedlist/138","/article/algorithm/linkedlist/138.md"]],
  ["v-6e9cf09e","/article/algorithm/linkedlist/141.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener noreferrer\">141. 环形链表</a></h4>\n<p>难度简单1613</p>\n<p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p>","y":"a","title":"141. 环形链表"},["/article/algorithm/linkedlist/141","/article/algorithm/linkedlist/141.md"]],
  ["v-6b333f60","/article/algorithm/linkedlist/142.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">142. 环形链表 II</a></h4>\n<p>难度中等1715</p>\n<p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>","y":"a","title":"142. 环形链表 II"},["/article/algorithm/linkedlist/142","/article/algorithm/linkedlist/142.md"]],
  ["v-30c92594","/article/algorithm/linkedlist/160.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/intersection-of-two-linked-lists/\" target=\"_blank\" rel=\"noopener noreferrer\">160. 相交链表</a></h4>\n<p>难度简单1863</p>\n<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p>\n<p>图示两个链表在节点 <code>c1</code> 开始相交**：**</p>","y":"a","title":"160. 相交链表"},["/article/algorithm/linkedlist/160","/article/algorithm/linkedlist/160.md"]],
  ["v-61867a6b","/article/algorithm/linkedlist/19.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener noreferrer\">19. 删除链表的倒数第 N 个结点</a></h4>\n<p>难度中等2212</p>\n<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"19. 删除链表的倒数第 N 个结点"},["/article/algorithm/linkedlist/19","/article/algorithm/linkedlist/19.md"]],
  ["v-8bf1ac26","/article/algorithm/linkedlist/2.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/add-two-numbers/\" target=\"_blank\" rel=\"noopener noreferrer\">2. 两数相加</a></h4>\n<p>难度中等8644</p>\n<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>","y":"a","title":"2. 两数相加"},["/article/algorithm/linkedlist/2","/article/algorithm/linkedlist/2.md"]],
  ["v-606378ca","/article/algorithm/linkedlist/203.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-linked-list-elements/\" target=\"_blank\" rel=\"noopener noreferrer\">203. 移除链表元素</a></h4>\n<p>难度简单1025</p>\n<p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"203. 移除链表元素"},["/article/algorithm/linkedlist/203","/article/algorithm/linkedlist/203.md"]],
  ["v-658202a7","/article/algorithm/linkedlist/206.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener noreferrer\">206. 反转链表</a></h4>\n<p>难度简单2756</p>\n<p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"206. 反转链表"},["/article/algorithm/linkedlist/206","/article/algorithm/linkedlist/206.md"]],
  ["v-ee741e98","/article/algorithm/linkedlist/21.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener noreferrer\">21. 合并两个有序链表</a></h4>\n<p>难度简单2673</p>\n<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"21. 合并两个有序链表"},["/article/algorithm/linkedlist/21","/article/algorithm/linkedlist/21.md"]],
  ["v-e7a0bc1c","/article/algorithm/linkedlist/23.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener noreferrer\">23. 合并K个升序链表</a></h4>\n<p>难度困难2168</p>\n<p>给你一个链表数组，每个链表都已经按升序排列。</p>\n<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：lists = [[1,4,5],[1,3,4],[2,6]]\n输出：[1,1,2,3,4,4,5,6]\n解释：链表数组如下：\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n将它们合并到一个有序链表中得到。\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"23. 合并K个升序链表"},["/article/algorithm/linkedlist/23","/article/algorithm/linkedlist/23.md"]],
  ["v-00cb032c","/article/algorithm/linkedlist/234.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/palindrome-linked-list/\" target=\"_blank\" rel=\"noopener noreferrer\">234. 回文链表</a></h4>\n<p>难度简单1518</p>\n<p>给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"234. 回文链表"},["/article/algorithm/linkedlist/234","/article/algorithm/linkedlist/234.md"]],
  ["v-e0cd59a0","/article/algorithm/linkedlist/25.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener noreferrer\">25. K 个一组翻转链表</a></h4>\n<p>难度困难1796</p>\n<p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p>\n<p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>","y":"a","title":"25. K 个一组翻转链表"},["/article/algorithm/linkedlist/25","/article/algorithm/linkedlist/25.md"]],
  ["v-0e68b54e","/article/algorithm/linkedlist/287.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/find-the-duplicate-number/\" target=\"_blank\" rel=\"noopener noreferrer\">287. 寻找重复数</a></h4>\n<p>难度中等1888</p>\n<p>给定一个包含 <code>n + 1</code> 个整数的数组 <code>nums</code> ，其数字都在 <code>[1, n]</code> 范围内（包括 <code>1</code> 和 <code>n</code>），可知至少存在一个重复的整数。</p>\n<p>假设 <code>nums</code> 只有 <strong>一个重复的整数</strong> ，返回 <strong>这个重复的数</strong> 。</p>","y":"a","title":"287. 寻找重复数"},["/article/algorithm/linkedlist/287","/article/algorithm/linkedlist/287.md"]],
  ["v-c1de5a32","/article/algorithm/linkedlist/426.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/\" target=\"_blank\" rel=\"noopener noreferrer\">426. 将二叉搜索树转化为排序的双向链表</a></h4>\n<p>难度中等187</p>\n<p>将一个 <strong>二叉搜索树</strong> 就地转化为一个 <strong>已排序的双向循环链表</strong> 。</p>\n<p>对于双向循环列表，你可以将左右孩子指针作为双向循环链表的前驱和后继指针，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>","y":"a","title":"426. 将二叉搜索树转化为排序的双向链表"},["/article/algorithm/linkedlist/426","/article/algorithm/linkedlist/426.md"]],
  ["v-072870ca","/article/algorithm/linkedlist/445.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/add-two-numbers-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">445. 两数相加 II</a></h4>\n<p>难度中等555</p>\n<p>给你两个 <strong>非空</strong> 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n<p><strong>示例1：</strong></p>\n<figure><img src=\"https://pic.leetcode-cn.com/1626420025-fZfzMX-image.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"445. 两数相加 II"},["/article/algorithm/linkedlist/445","/article/algorithm/linkedlist/445.md"]],
  ["v-31b5b631","/article/algorithm/linkedlist/57.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/insert-interval/\" target=\"_blank\" rel=\"noopener noreferrer\">57. 插入区间</a></h4>\n<p>难度中等642</p>\n<p>给你一个 <strong>无重叠的</strong> *，*按照区间起始端点排序的区间列表。</p>\n<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：intervals = [[1,3],[6,9]], newInterval = [2,5]\n输出：[[1,5],[6,9]]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"57. 插入区间"},["/article/algorithm/linkedlist/57","/article/algorithm/linkedlist/57.md"]],
  ["v-703fa64e","/article/algorithm/linkedlist/82.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">82. 删除排序链表中的重复元素 II</a></h4>\n<p>难度中等983</p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除原始链表中所有重复数字的节点，只留下不同的数字</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"82. 删除排序链表中的重复元素 II"},["/article/algorithm/linkedlist/82","/article/algorithm/linkedlist/82.md"]],
  ["v-6cd5f510","/article/algorithm/linkedlist/83.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/\" target=\"_blank\" rel=\"noopener noreferrer\">83. 删除排序链表中的重复元素</a></h4>\n<p>难度简单854</p>\n<p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/01/04/list1.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"83. 删除排序链表中的重复元素"},["/article/algorithm/linkedlist/83","/article/algorithm/linkedlist/83.md"]],
  ["v-06732fcc","/article/algorithm/linkedlist/92.html",{"c":["算法"],"g":["数据结构"],"e":"<h4> <a href=\"https://leetcode.cn/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">92. 反转链表 II</a></h4>\n<p>难度中等1366</p>\n<p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p>","y":"a","title":"92. 反转链表 II"},["/article/algorithm/linkedlist/92","/article/algorithm/linkedlist/92.md"]],
  ["v-fa967652","/article/algorithm/monotonicqueue/239.html",{"c":["算法"],"g":["单调队列"],"e":"<h4> <a href=\"https://leetcode.cn/problems/sliding-window-maximum/\" target=\"_blank\" rel=\"noopener noreferrer\">239. 滑动窗口最大值</a></h4>\n<p>难度困难1786</p>\n<p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p>\n<p>返回 <em>滑动窗口中的最大值</em> 。</p>","y":"a","title":"239. 滑动窗口最大值"},["/article/algorithm/monotonicqueue/239","/article/algorithm/monotonicqueue/239.md"]],
  ["v-91490784","/article/algorithm/monotonicqueue/375.html",{"c":["算法"],"g":["单调队列"],"e":"<h4> <a href=\"https://leetcode.cn/problems/guess-number-higher-or-lower-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">375. 猜数字大小 II</a></h4>\n<p>难度中等498</p>\n<p>我们正在玩一个猜数游戏，游戏规则如下：</p>\n<ol>\n<li>我从 <code>1</code> 到 <code>n</code> 之间选择一个数字。</li>\n<li>你来猜我选了哪个数字。</li>\n<li>如果你猜到正确的数字，就会 <strong>赢得游戏</strong> 。</li>\n<li>如果你猜错了，那么我会告诉你，我选的数字比你的 <strong>更大或者更小</strong> ，并且你需要继续猜数。</li>\n<li>每当你猜了数字 <code>x</code> 并且猜错了的时候，你需要支付金额为 <code>x</code> 的现金。如果你花光了钱，就会 <strong>输掉游戏</strong> 。</li>\n</ol>","y":"a","title":"375. 猜数字大小 II"},["/article/algorithm/monotonicqueue/375","/article/algorithm/monotonicqueue/375.md"]],
  ["v-704dfdd7","/article/algorithm/monotonicqueue/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97.html",{"e":"<h1> 单调队列 Monotone Queue</h1>\n<p>需要不断维护队列的单调性，时刻保证队列元素从大到小或从小到大\n前置知识：双指针\n以固定窗口大小的区间最大值为例（此时维护的是一个从大到小的单调队列）：\n每次向右移动一格左指针，在移动前，如果左指针指向的元素在队首左侧，说明左指针指向的元素小于队首，移动左指针不会改变区间最大值，直接移动左指针即可；\n如果左指针指向的就是队首，那么移动左指针会使区间最大值变小（变为单调队列队首之后的那个元素），我们要弹出队首。\n这样无论是何种情况，都保证了在移动左指针后，单调队列的队首始终为当前区间的最大值。</p>\n<ul>\n<li><a href=\"https://oi-wiki.org/ds/monotonous-queue/\" target=\"_blank\" rel=\"noopener noreferrer\">https://oi-wiki.org/ds/monotonous-queue/</a></li>\n<li><a href=\"https://oi-wiki.org/dp/opt/monotonous-queue-stack/\" target=\"_blank\" rel=\"noopener noreferrer\">https://oi-wiki.org/dp/opt/monotonous-queue-stack/</a></li>\n<li><a href=\"https://cp-algorithms.com/data_structures/stack_queue_modification.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://cp-algorithms.com/data_structures/stack_queue_modification.html</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_43914593/article/details/105791217\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/weixin_43914593/article/details/105791217</a> 算法竞赛专题解析（13）：DP优化(3)--单调队列优化</li>\n<li>todo <a href=\"https://xyzl.blog.luogu.org/DQ-OP-DP\" target=\"_blank\" rel=\"noopener noreferrer\">https://xyzl.blog.luogu.org/DQ-OP-DP</a></li>\n<li><a href=\"https://leetcode.cn/tag/monotonic-queue/problemset/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/tag/monotonic-queue/problemset/</a></li>\n<li>todo <a href=\"https://www.luogu.com.cn/problem/P2627\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.luogu.com.cn/problem/P2627</a></li>\n<li>todo <a href=\"http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1070\" target=\"_blank\" rel=\"noopener noreferrer\">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1070</a></li>\n<li>LC375 猜数字大小 II <a href=\"https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode-cn.com/problems/guess-number-higher-or-lower-ii/</a></li>\n<li>​      <a href=\"https://leetcode.cn/problems/guess-number-higher-or-lower-ii/solution/cong-ji-yi-hua-sou-suo-on3-dao-dong-tai-q13g9/\" target=\"_blank\" rel=\"noopener noreferrer\">https://leetcode.cn/problems/guess-number-higher-or-lower-ii/solution/cong-ji-yi-hua-sou-suo-on3-dao-dong-tai-q13g9/</a></li>\n</ul>","y":"a","title":"单调队列 Monotone Queue"},["/article/algorithm/monotonicqueue/单调队列.html","/article/algorithm/monotonicqueue/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97","/article/algorithm/monotonicqueue/单调队列.md","/article/algorithm/monotonicqueue/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97.md"]],
  ["v-4a84e9bc","/article/algorithm/monotonicstack/42.html",{"c":["算法"],"g":["单调栈"],"e":"<h4> <a href=\"https://leetcode.cn/problems/trapping-rain-water/\" target=\"_blank\" rel=\"noopener noreferrer\">42. 接雨水</a></h4>\n<p>难度困难3691</p>\n<p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<p><strong>示例 1：</strong></p>\n<figure><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"42. 接雨水"},["/article/algorithm/monotonicstack/42","/article/algorithm/monotonicstack/42.md"]],
  ["v-fb9e9cca","/article/algorithm/monotonicstack/739.html",{"c":["算法"],"g":["单调栈"],"e":"<h4> <a href=\"https://leetcode.cn/problems/daily-temperatures/\" target=\"_blank\" rel=\"noopener noreferrer\">739. 每日温度</a></h4>\n<p>难度中等1256</p>\n<p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p>","y":"a","title":"739. 每日温度"},["/article/algorithm/monotonicstack/739","/article/algorithm/monotonicstack/739.md"]],
  ["v-218787fe","/article/algorithm/monotonicstack/84.html",{"c":["算法"],"g":["单调栈"],"e":"<h4> <a href=\"https://leetcode.cn/problems/largest-rectangle-in-histogram/\" target=\"_blank\" rel=\"noopener noreferrer\">84. 柱状图中最大的矩形</a></h4>\n<p>难度困难2105</p>\n<p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>\n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>\n<p><strong>示例 1:</strong></p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"84. 柱状图中最大的矩形"},["/article/algorithm/monotonicstack/84","/article/algorithm/monotonicstack/84.md"]],
  ["v-18684931","/article/algorithm/monotonicstack/%E5%8D%95%E8%B0%83%E6%A0%88.html",{"e":"<h1> 单调栈 Monotone Stack</h1>\n<p>举例：返回每个元素两侧严格大于它的元素位置（不存在则为 -1 或 n）</p>\n<p>如何理解：把数组想象成一列山峰，站在 a[i] 的山顶仰望两侧的山峰，是看不到高山背后的矮山的，只能看到一座座更高的山峰</p>\n<p>这就启发我们引入一个底大顶小的单调栈，入栈时不断比较栈顶元素直到找到一个比当前元素大的</p>\n<p>技巧：事先压入一个边界元素到栈底，这样保证循环时栈一定不会为空，从而简化逻辑</p>\n<p>一些转换：</p>\n<ol>\n<li>​    若区间 [l,r] 的最大值等于 a[r]，则 l 必须 &gt; left[r]</li>\n<li>​    若区间 [l,r] 的最大值等于 a[l]，则 r 必须 &lt; right[l]</li>\n<li>​    这一结论可以用于思考一些双变量的题目</li>\n</ol>","y":"a","title":"单调栈 Monotone Stack"},["/article/algorithm/monotonicstack/单调栈.html","/article/algorithm/monotonicstack/%E5%8D%95%E8%B0%83%E6%A0%88","/article/algorithm/monotonicstack/单调栈.md","/article/algorithm/monotonicstack/%E5%8D%95%E8%B0%83%E6%A0%88.md"]],
  ["v-81744c8c","/article/algorithm/order/bubble.html",{"c":["算法"],"g":["排序"],"e":"<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度</th>\n<th>是否稳定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n\n","y":"a","title":"冒泡排序"},["/article/algorithm/order/bubble","/article/algorithm/order/bubble.md"]],
  ["v-d3e398cc","/article/algorithm/order/heap.html",{"c":["算法"],"g":["排序"],"e":"<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度</th>\n<th>是否稳定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(N2)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"堆排序"},["/article/algorithm/order/heap","/article/algorithm/order/heap.md"]],
  ["v-ea9cc0a6","/article/algorithm/order/insert.html",{"c":["算法"],"g":["排序"],"e":"<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度</th>\n<th>是否稳定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(N2)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"插入排序"},["/article/algorithm/order/insert","/article/algorithm/order/insert.md"]],
  ["v-55a73814","/article/algorithm/order/merge.html",{"c":["算法"],"g":["排序"],"e":"<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度</th>\n<th>是否稳定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(N2)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"归并排序"},["/article/algorithm/order/merge","/article/algorithm/order/merge.md"]],
  ["v-0a650102","/article/algorithm/order/quick.html",{"c":["算法"],"g":["排序"],"e":"<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度</th>\n<th>是否稳定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(N2)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"快速排序"},["/article/algorithm/order/quick","/article/algorithm/order/quick.md"]],
  ["v-c4a1c16c","/article/algorithm/order/select.html",{"c":["算法"],"g":["排序"],"e":"<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度</th>\n<th>是否稳定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(N2)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"选择排序"},["/article/algorithm/order/select","/article/algorithm/order/select.md"]],
  ["v-304cbb5d","/article/algorithm/order/topological.html",{"c":["算法"],"g":["排序"],"e":"\n","y":"a","title":"拓扑排序"},["/article/algorithm/order/topological","/article/algorithm/order/topological.md"]],
  ["v-4674e404","/article/algorithm/order/%E6%8E%92%E5%BA%8F.html",{"e":"<h1> 排序</h1>\n<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度</th>\n<th>是否稳定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(N2)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(N2)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"排序"},["/article/algorithm/order/排序.html","/article/algorithm/order/%E6%8E%92%E5%BA%8F","/article/algorithm/order/排序.md","/article/algorithm/order/%E6%8E%92%E5%BA%8F.md"]],
  ["v-447c492c","/article/algorithm/pow/pow.html",{"c":["算法"],"g":["快速幂"],"e":"\n","y":"a","title":"快速幂"},["/article/algorithm/pow/pow","/article/algorithm/pow/pow.md"]],
  ["v-797d88b6","/article/algorithm/scanline/1229.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/meeting-scheduler/\" target=\"_blank\" rel=\"noopener noreferrer\">1229. 安排会议日程</a></h4>\n<p>难度中等59</p>\n<p>给定两个人的空闲时间表：<code>slots1</code> 和 <code>slots2</code>，以及会议的预计持续时间 <code>duration</code>，请你为他们安排 <strong>时间段最早 且</strong>合适的会议时间。</p>\n<p>如果没有满足要求的会议时间，就请返回一个 <strong>空数组</strong>。</p>","y":"a","title":"1229. 安排会议日程"},["/article/algorithm/scanline/1229","/article/algorithm/scanline/1229.md"]],
  ["v-806310de","/article/algorithm/scanline/1272.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-interval/\" target=\"_blank\" rel=\"noopener noreferrer\">1272. 删除区间</a></h4>\n<p>难度中等33</p>\n<p>实数集合可以表示为若干不相交区间的并集，其中每个区间的形式为 <code>[a, b)</code>（左闭右开），表示满足 <code>a &lt;= x &lt; b</code> 的所有实数 <code>x</code> 的集合。如果某个区间 <code>[a, b)</code> 中包含实数 <code>x</code> ，则称实数 <code>x</code> 在集合中。</p>","y":"a","title":"1272. 删除区间"},["/article/algorithm/scanline/1272","/article/algorithm/scanline/1272.md"]],
  ["v-021c72e8","/article/algorithm/scanline/1288.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/remove-covered-intervals/\" target=\"_blank\" rel=\"noopener noreferrer\">1288. 删除被覆盖区间</a></h4>\n<p>难度中等85</p>\n<p>给你一个区间列表，请你删除列表中被其他区间所覆盖的区间。</p>\n<p>只有当 <code>c &lt;= a</code> 且 <code>b &lt;= d</code> 时，我们才认为区间 <code>[a,b)</code> 被区间 <code>[c,d)</code> 覆盖。</p>\n","y":"a","title":"1288. 删除被覆盖区间"},["/article/algorithm/scanline/1288","/article/algorithm/scanline/1288.md"]],
  ["v-0935862c","/article/algorithm/scanline/218.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/the-skyline-problem/\" target=\"_blank\" rel=\"noopener noreferrer\">218. 天际线问题</a></h4>\n<p>难度困难</p>\n<p>城市的 <strong>天际线</strong> 是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。给你所有建筑物的位置和高度，请返回 <em>由这些建筑物形成的 <strong>天际线</strong></em> 。</p>\n<p>每个建筑物的几何信息由数组 <code>buildings</code> 表示，其中三元组 <code>buildings[i] = [lefti, righti, heighti]</code> 表示：</p>","y":"a","title":"218. 天际线问题"},["/article/algorithm/scanline/218","/article/algorithm/scanline/218.md"]],
  ["v-5add4114","/article/algorithm/scanline/252.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/meeting-rooms/\" target=\"_blank\" rel=\"noopener noreferrer\">252. 会议室</a></h4>\n<p>难度简单129</p>\n<p>给定一个会议时间安排的数组 <code>intervals</code> ，每个会议时间都会包括开始和结束的时间 <code>intervals[i] = [starti, endi]</code> ，请你判断一个人是否能够参加这里面的全部会议。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：intervals = [[0,30],[5,10],[15,20]]\n输出：false\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"252. 会议室"},["/article/algorithm/scanline/252","/article/algorithm/scanline/252.md"]],
  ["v-57738fd6","/article/algorithm/scanline/253.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/meeting-rooms-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">253. 会议室 II</a></h4>\n<p>难度中等457</p>\n<p>给你一个会议时间安排的数组 <code>intervals</code> ，每个会议时间都会包括开始和结束的时间 <code>intervals[i] = [starti, endi]</code> ，返回 <em>所需会议室的最小数量</em> 。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"253. 会议室 II"},["/article/algorithm/scanline/253","/article/algorithm/scanline/253.md"]],
  ["v-3a728c55","/article/algorithm/scanline/352.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/data-stream-as-disjoint-intervals/\" target=\"_blank\" rel=\"noopener noreferrer\">352. 将数据流变为多个不相交区间</a></h4>\n<p>难度困难173</p>\n<p>给你一个由非负整数 <code>a1, a2, ..., an</code> 组成的数据流输入，请你将到目前为止看到的数字总结为不相交的区间列表。</p>\n<p>实现 <code>SummaryRanges</code> 类：</p>\n<ul>\n<li><code>SummaryRanges()</code> 使用一个空数据流初始化对象。</li>\n<li><code>void addNum(int val)</code> 向数据流中加入整数 <code>val</code> 。</li>\n<li><code>int[][] getIntervals()</code> 以不相交区间 <code>[starti, endi]</code> 的列表形式返回对数据流中整数的总结。</li>\n</ul>","y":"a","title":"352. 将数据流变为多个不相交区间"},["/article/algorithm/scanline/352","/article/algorithm/scanline/352.md"]],
  ["v-3da5cc8f","/article/algorithm/scanline/435.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/non-overlapping-intervals/\" target=\"_blank\" rel=\"noopener noreferrer\">435. 无重叠区间</a></h4>\n<p>难度中等  770</p>\n<p>给定一个区间的集合 <code>intervals</code> ，其中 <code>intervals[i] = [starti, endi]</code> 。返回 <em>需要移除区间的最小数量，使剩余区间互不重叠</em> 。</p>\n<p><strong>示例 1:</strong></p>","y":"a","title":"435. 无重叠区间"},["/article/algorithm/scanline/435","/article/algorithm/scanline/435.md"]],
  ["v-01eb4dcc","/article/algorithm/scanline/56.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/merge-intervals/\" target=\"_blank\" rel=\"noopener noreferrer\">56. 合并区间</a></h4>\n<p>难度中等1611</p>\n<p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"56. 合并区间"},["/article/algorithm/scanline/56","/article/algorithm/scanline/56.md"]],
  ["v-03a0266b","/article/algorithm/scanline/57.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/insert-interval/\" target=\"_blank\" rel=\"noopener noreferrer\">57. 插入区间</a></h4>\n<p>难度中等642</p>\n<p>给你一个 <strong>无重叠的</strong> *，*按照区间起始端点排序的区间列表。</p>\n<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入：intervals = [[1,3],[6,9]], newInterval = [2,5]\n输出：[[1,5],[6,9]]\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"57. 插入区间"},["/article/algorithm/scanline/57","/article/algorithm/scanline/57.md"]],
  ["v-342da7ac","/article/algorithm/scanline/759.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/employee-free-time/\" target=\"_blank\" rel=\"noopener noreferrer\">759. 员工空闲时间</a></h4>\n<p>难度困难90</p>\n<p>给定员工的 <code>schedule</code> 列表，表示每个员工的工作时间。</p>\n<p>每个员工都有一个非重叠的时间段 <code>Intervals</code> 列表，这些时间段已经排好序。</p>\n<p>返回表示 <em>所有</em> 员工的 <strong>共同，正数长度的空闲时间</strong> 的有限时间段的列表，同样需要排好序。</p>","y":"a","title":"759. 员工空闲时间"},["/article/algorithm/scanline/759","/article/algorithm/scanline/759.md"]],
  ["v-4f3fadce","/article/algorithm/scanline/986.html",{"c":["算法"],"g":["扫描线"],"e":"<h4> <a href=\"https://leetcode.cn/problems/interval-list-intersections/\" target=\"_blank\" rel=\"noopener noreferrer\">986. 区间列表的交集</a></h4>\n<p>难度中等331</p>\n<p>给定两个由一些 <strong>闭区间</strong> 组成的列表，<code>firstList</code> 和 <code>secondList</code> ，其中 <code>firstList[i] = [starti, endi]</code> 而 <code>secondList[j] = [startj, endj]</code> 。每个区间列表都是成对 <strong>不相交</strong> 的，并且 <strong>已经排序</strong> 。</p>","y":"a","title":"986. 区间列表的交集"},["/article/algorithm/scanline/986","/article/algorithm/scanline/986.md"]],
  ["v-3547bd2c","/article/algorithm/scanline/LintCode391.html",{"c":["算法"],"g":["扫描线"],"e":"<p>391 · 数飞机</p>\n<p>算法</p>\n<p>中等</p>\n<p>通过率38%</p>\n<p>描述</p>\n<p>给出飞机的起飞和降落时间的列表，用序列 <code>interval</code> 表示. 请计算出天上同时最多有多少架飞机？</p>\n<p>如果多架飞机降落和起飞在同一时刻，我们认为降落有优先权。</p>\n<p>样例</p>\n<p><strong>样例 1:</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入: [(1, 10), (2, 3), (5, 8), (4, 7)]\n输出: 3\n解释: \n第一架飞机在1时刻起飞, 10时刻降落.\n第二架飞机在2时刻起飞, 3时刻降落.\n第三架飞机在5时刻起飞, 8时刻降落.\n第四架飞机在4时刻起飞, 7时刻降落.\n在5时刻到6时刻之间, 天空中有三架飞机.\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"LintCode391-数飞机"},["/article/algorithm/scanline/LintCode391","/article/algorithm/scanline/LintCode391.md"]],
  ["v-50bc06dc","/article/algorithm/simulate/59.html",{"c":["算法"],"g":["模拟"],"e":"<h4> <a href=\"https://leetcode.cn/problems/spiral-matrix-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">59. 螺旋矩阵 II</a></h4>\n<p>难度中等803</p>\n<p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"59. 螺旋矩阵 II"},["/article/algorithm/simulate/59","/article/algorithm/simulate/59.md"]],
  ["v-c464e772","/article/algorithm/slidingwindow/159.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-substring-with-at-most-two-distinct-characters/\" target=\"_blank\" rel=\"noopener noreferrer\">159. 至多包含两个不同字符的最长子串</a></h4>\n<p>难度中等183</p>\n<p>给你一个字符串 <code>s</code> ，请你找出 <strong>至多</strong> 包含 <strong>两个不同字符</strong> 的最长子串，并返回该子串的长度。</p>\n<p><strong>示例 1：</strong></p>","y":"a","title":"159. 至多包含两个不同字符的最长子串"},["/article/algorithm/slidingwindow/159","/article/algorithm/slidingwindow/159.md"]],
  ["v-05a0de3e","/article/algorithm/slidingwindow/209.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">209. 长度最小的子数组</a></h4>\n<p>难度中等</p>\n<p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p>\n<p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度**。**如果不存在符合条件的子数组，返回 <code>0</code> 。</p>","y":"a","title":"209. 长度最小的子数组"},["/article/algorithm/slidingwindow/209","/article/algorithm/slidingwindow/209.md"]],
  ["v-280a7a29","/article/algorithm/slidingwindow/3.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener noreferrer\">3. 无重复字符的最长子串</a></h4>\n<p>难度中等8214</p>\n<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n<p><strong>示例 1:</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>输入: s = \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"3. 无重复字符的最长子串"},["/article/algorithm/slidingwindow/3","/article/algorithm/slidingwindow/3.md"]],
  ["v-294e0d2d","/article/algorithm/slidingwindow/340.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-substring-with-at-most-k-distinct-characters/\" target=\"_blank\" rel=\"noopener noreferrer\">340. 至多包含 K 个不同字符的最长子串</a></h4>\n<p>难度中等207</p>\n<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> ，请你找出 <strong>至多</strong> 包含 <em><code>k</code></em> 个 <strong>不同</strong> 字符的最长子串，并返回该子串的长度。</p>","y":"a","title":"340. 至多包含 K 个不同字符的最长子串"},["/article/algorithm/slidingwindow/340","/article/algorithm/slidingwindow/340.md"]],
  ["v-3a55708d","/article/algorithm/slidingwindow/395.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-substring-with-at-least-k-repeating-characters/\" target=\"_blank\" rel=\"noopener noreferrer\">395. 至少有 K 个重复字符的最长子串</a></h4>\n<p>难度中等751</p>\n<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> ，请你找出 <code>s</code> 中的最长子串， 要求该子串中的每一字符出现次数都不少于 <code>k</code> 。返回这一子串的长度。</p>","y":"a","title":"395. 至少有 K 个重复字符的最长子串"},["/article/algorithm/slidingwindow/395","/article/algorithm/slidingwindow/395.md"]],
  ["v-2e362606","/article/algorithm/slidingwindow/424.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-repeating-character-replacement/\" target=\"_blank\" rel=\"noopener noreferrer\">424. 替换后的最长重复字符</a></h4>\n<p>难度中等698</p>\n<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 <code>k</code> 次。</p>\n<p>在执行上述操作后，返回包含相同字母的最长子字符串的长度。</p>","y":"a","title":"424. 替换后的最长重复字符"},["/article/algorithm/slidingwindow/424","/article/algorithm/slidingwindow/424.md"]],
  ["v-69efc3c3","/article/algorithm/slidingwindow/438.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/find-all-anagrams-in-a-string/\" target=\"_blank\" rel=\"noopener noreferrer\">438. 找到字符串中所有字母异位词</a></h4>\n<p>难度中等1016</p>\n<p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的 <strong>异位词</strong> 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>\n<p><strong>异位词</strong> 指由相同字母重排列形成的字符串（包括相同的字符串）。</p>","y":"a","title":"438. 找到字符串中所有字母异位词"},["/article/algorithm/slidingwindow/438","/article/algorithm/slidingwindow/438.md"]],
  ["v-6ecec9c6","/article/algorithm/slidingwindow/567.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/permutation-in-string/\" target=\"_blank\" rel=\"noopener noreferrer\">567. 字符串的排列</a></h4>\n<p>难度中等769</p>\n<p>给你两个字符串 <code>s1</code> 和 <code>s2</code> ，写一个函数来判断 <code>s2</code> 是否包含 <code>s1</code> 的排列。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>换句话说，<code>s1</code> 的排列之一是 <code>s2</code> 的 <strong>子串</strong> 。</p>","y":"a","title":"567. 字符串的排列"},["/article/algorithm/slidingwindow/567","/article/algorithm/slidingwindow/567.md"]],
  ["v-91645fd2","/article/algorithm/slidingwindow/76.html",{"c":["算法"],"g":["滑动窗口"],"e":"<h4> <a href=\"https://leetcode.cn/problems/minimum-window-substring/\" target=\"_blank\" rel=\"noopener noreferrer\">76. 最小覆盖子串</a></h4>\n<p>难度困难2092</p>\n<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>\"\"</code> 。</p>","y":"a","title":"76. 最小覆盖子串"},["/article/algorithm/slidingwindow/76","/article/algorithm/slidingwindow/76.md"]],
  ["v-81d48686","/article/algorithm/slidingwindow/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html",{"c":["算法"],"g":["滑动窗口"],"e":"滑动窗口题目","y":"a","title":"滑动窗口"},["/article/algorithm/slidingwindow/滑动窗口.html","/article/algorithm/slidingwindow/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3","/article/algorithm/slidingwindow/滑动窗口.md","/article/algorithm/slidingwindow/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.md"]],
  ["v-35375369","/article/algorithm/trie/212.html",{"c":["算法"],"g":["字典树"],"e":"<h4> <a href=\"https://leetcode.cn/problems/word-search-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">212. 单词搜索 II</a></h4>\n<p>难度困难689</p>\n<p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个单词（字符串）列表 <code>words</code>， <em>返回所有二维网格上的单词</em> 。</p>\n<p>单词必须按照字母顺序，通过 <strong>相邻的单元格</strong> 内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</p>","y":"a","title":"212. 单词搜索 II"},["/article/algorithm/trie/212","/article/algorithm/trie/212.md"]],
  ["v-33e59c22","/article/algorithm/unionfind/%E5%B9%B6%E6%9F%A5%E9%9B%86.html",{"e":"<h1> 并查集基本模板</h1>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFindModel</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DSU</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DSU</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>x<span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n           parent<span class=\"token punctuation\">[</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DSUWithMaxSize</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">DSUWithMaxSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>x<span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> <span class=\"token class-name\">RootX</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">RootY</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootX</span><span class=\"token operator\">==</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>size<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                parent<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">;</span>\n                size<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>size<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                parent<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">;</span>\n                size<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>size<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span>  <span class=\"token keyword\">int</span> <span class=\"token function\">findMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token operator\">:</span>size<span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DSUwithRank</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//rank表示树的高度或深度 深度低</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rank<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">DSUwithRank</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            rank <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>x<span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> <span class=\"token class-name\">RootX</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">RootY</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RootX</span><span class=\"token operator\">==</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                parent<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>rank<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                parent<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>                                 <span class=\"token comment\">//只有在深度一样的时候才需要维护</span>\n                parent<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootX</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">;</span>\n                rank<span class=\"token punctuation\">[</span><span class=\"token class-name\">RootY</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span>  <span class=\"token keyword\">int</span> <span class=\"token function\">findMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token operator\">:</span> rank<span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"并查集基本模板"},["/article/algorithm/unionfind/并查集.html","/article/algorithm/unionfind/%E5%B9%B6%E6%9F%A5%E9%9B%86","/article/algorithm/unionfind/并查集.md","/article/algorithm/unionfind/%E5%B9%B6%E6%9F%A5%E9%9B%86.md"]],
  ["v-02e28fae","/article/algorithm/week/308week1.html",{"c":["算法"],"g":["周赛","二分法","前缀和","子序列"],"e":"<h4> <a href=\"https://leetcode.cn/problems/longest-subsequence-with-limited-sum/\" target=\"_blank\" rel=\"noopener noreferrer\">2389. 和有限的最长子序列</a></h4>\n<p>难度简单12</p>\n<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，和一个长度为 <code>m</code> 的整数数组 <code>queries</code> 。</p>\n<p>返回一个长度为 <code>m</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是 <code>nums</code> 中 元素之和小于等于 <code>queries[i]</code> 的 <strong>子序列</strong> 的 <strong>最大</strong> 长度 。</p>","y":"a","title":"2389. 和有限的最长子序列"},["/article/algorithm/week/308week1","/article/algorithm/week/308week1.md"]],
  ["v-0497684d","/article/algorithm/week/308week2.html",{"c":["算法"],"g":["周赛","栈","字符串"],"e":"<h4> <a href=\"https://leetcode.cn/problems/removing-stars-from-a-string/\" target=\"_blank\" rel=\"noopener noreferrer\">2390. 从字符串中移除星号</a></h4>\n<p>难度中等5</p>\n<p>给你一个包含若干星号 <code>*</code> 的字符串 <code>s</code> 。</p>\n<p>在一步操作中，你可以：</p>\n<ul>\n<li>选中 <code>s</code> 中的一个星号。</li>\n<li>移除星号 <strong>左侧</strong> 最近的那个 <strong>非星号</strong> 字符，并移除该星号自身。</li>\n</ul>","y":"a","title":"2390. 从字符串中移除星号"},["/article/algorithm/week/308week2","/article/algorithm/week/308week2.md"]],
  ["v-064c40ec","/article/algorithm/week/308week3.html",{"c":["算法"],"g":["周赛","模拟"],"e":"<h4> <a href=\"https://leetcode.cn/problems/minimum-amount-of-time-to-collect-garbage/\" target=\"_blank\" rel=\"noopener noreferrer\">2391. 收集垃圾的最少总时间</a></h4>\n<p>难度中等7</p>\n<p>给你一个下标从 <strong>0</strong> 开始的字符串数组 <code>garbage</code> ，其中 <code>garbage[i]</code> 表示第 <code>i</code> 个房子的垃圾集合。<code>garbage[i]</code> 只包含字符 <code>'M'</code> ，<code>'P'</code> 和 <code>'G'</code> ，但可能包含多个相同字符，每个字符分别表示一单位的金属、纸和玻璃。垃圾车收拾 <strong>一</strong> 单位的任何一种垃圾都需要花费 <code>1</code> 分钟。</p>","y":"a","title":"2391. 收集垃圾的最少总时间"},["/article/algorithm/week/308week3","/article/algorithm/week/308week3.md"]],
  ["v-0801198b","/article/algorithm/week/308week4.html",{"c":["算法"],"g":["周赛","栈","字符串"],"e":"<h4> <a href=\"https://leetcode.cn/problems/build-a-matrix-with-conditions/\" target=\"_blank\" rel=\"noopener noreferrer\">2392. 给定条件下构造矩阵</a></h4>\n<p>难度困难24</p>\n<p>给你一个 <strong>正</strong> 整数 <code>k</code> ，同时给你：</p>\n<ul>\n<li>一个大小为 <code>n</code> 的二维整数数组 <code>rowConditions</code> ，其中 <code>rowConditions[i] = [abovei, belowi]</code> 和</li>\n<li>一个大小为 <code>m</code> 的二维整数数组 <code>colConditions</code> ，其中 <code>colConditions[i] = [lefti, righti]</code> 。</li>\n</ul>","y":"a","title":"2392. 给定条件下构造矩阵"},["/article/algorithm/week/308week4","/article/algorithm/week/308week4.md"]],
  ["v-356c085c","/article/distrubutedsystem/papers/gfs.html",{"c":["Paper","gfs"],"g":["Distrubuted System"],"e":"Paper","y":"a","title":"gfs"},["/article/distrubutedsystem/papers/gfs","/article/distrubutedsystem/papers/gfs.md"]],
  ["v-34ad4084","/article/distrubutedsystem/papers/mapreduce.html",{"c":["Paper","gfs"],"g":["Distrubuted System"],"e":"Paper","y":"a","title":"mapreduce"},["/article/distrubutedsystem/papers/mapreduce","/article/distrubutedsystem/papers/mapreduce.md"]],
  ["v-23f7fa5d","/article/distrubutedsystem/papers/raft-extended.html",{"c":["Paper","gfs"],"g":["Distrubuted System"],"e":"Paper","y":"a","title":"raft"},["/article/distrubutedsystem/papers/raft-extended","/article/distrubutedsystem/papers/raft-extended.md"]],
  ["v-2681feed","/article/distrubutedsystem/papers/",{"y":"h","title":"Paper"},["/article/distrubutedsystem/papers/index.html","/article/distrubutedsystem/papers/README.md"]],
  ["v-544f4a62","/article/distrubutedsystem/papers/vm-ft.html",{"c":["Paper","gfs"],"g":["Distrubuted System"],"e":"Paper","y":"a","title":"vm-ft"},["/article/distrubutedsystem/papers/vm-ft","/article/distrubutedsystem/papers/vm-ft.md"]],
  ["v-a9fb558c","/article/distrubutedsystem/papers/zookeeper.html",{"c":["Paper","gfs"],"g":["Distrubuted System"],"e":"Paper","y":"a","title":"zookeeper"},["/article/distrubutedsystem/papers/zookeeper","/article/distrubutedsystem/papers/zookeeper.md"]],
  ["v-605dc8b6","/article/distrubutedsystem/project/rpc.html",{"e":"<h1> RPC框架</h1>\n<h2> 1.RPC简介</h2>\n<figure><figcaption>image-20221021203931934</figcaption></figure>\n<p>RPC是不同JVM之间的方法调用过程。</p>\n<p>通过RPC将调用过程封装为黑盒，供服务使用方使用。</p>\n<p>为了达到最终的调用目的，需要具体实现几个模块</p>\n<p>序列化模块：将java pojo对象转化为json格式 字节数组，或其他的方便</p>\n<h3> 1.1 Dubbo如何实现RPC</h3>\n<figure><figcaption>image-20221031212018616</figcaption></figure>","y":"a","title":"RPC框架"},["/article/distrubutedsystem/project/rpc","/article/distrubutedsystem/project/rpc.md"]],
  ["v-0331ffe4","/article/interview/exp/dajiang87.html",{"c":["笔试"],"g":["大疆","笔试"],"e":"<p>简答题</p>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">写RPC实现的框架和解决的问题</p>\n</div>\n<p>略</p>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">大疆的无人机可以在一排的物品中取物品，但是取一个后需要冷却取一个的时间，问对于输入的数组，最多能拿到多少价值的物品</p>\n</div>\n\n","y":"a","title":"大疆2022.08.07笔试记录"},["/article/interview/exp/dajiang87","/article/interview/exp/dajiang87.md"]],
  ["v-6b17ce6e","/article/interview/exp/meituan86.html",{"c":["笔试"],"g":["美团","笔试"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">1.给定a、b两种点心的数量，每个礼盒放3个点心，a、b至少各有一个，求最多能包多少个礼盒</p>\n</div>\n<div class=\"custom-container note\">\n<p class=\"custom-container-title\">例</p>\n<p>输入 2 2</p>\n<p>输出 1</p>\n</div>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>public class Test01 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        for(int i=0;i&lt;num;i++){\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            int min = Math.min(a,b);\n            int max = Math.max(a,b);\n            if(max&gt;=min*2){   //如果max&gt;=2*min 由于每一份都至少需要一个min 所以答案就是min种（一个min，两个max）\n                System.out.println(min);\n            }\n            else{       //如果  min&lt;=max&lt;2*min 那么此时肯定凑不够 一个min配2个max\n                // 此时需要有min填补max的位置 答案从min开始减小 每次减小有两重效果\n                // 例如 44 85  min=44 max=85  min = 44 max =44+41 不够\n                // 当min取43时 min减少1 同时有多余的一个min和一个max可以补充 所以min-1的效果相当于补充了3个max\n                //min=43 max = 43+42+1\n                //本方法会TLE 因此需要优化\n                //将此处的两种情况总结 可以发现答案要么是min 要么是 a+b//3\n                for(int k=min;k&gt;=0;k--){\n                    if(k&lt;=(min-k)+(max-k)){\n                        System.out.println(k);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"美团2022.08.06笔试记录"},["/article/interview/exp/meituan86","/article/interview/exp/meituan86.md"]],
  ["v-538c2ffc","/article/interview/exp/mihayou87.html",{"c":["笔试"],"g":["米哈游","笔试"],"e":"<p>米哈游有点坑 只能用CPP 导致Java选手全程都在回忆CPP的API 浪费了很长时间 CPP不太会写 大佬勿喷 之后更新Java版本的题解</p>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">1.有七种不同类型的怪物用七个不同字母表示（w,i,t,f,g,s,b），随后输入第一个数字表示查询的数目，在查询中，1表示往队列中加入一个类型的怪兽，2表示从队首弹出该怪兽，3表示返回该队列中不同怪兽类型的数量；</p>\n<blockquote>\n<p>例：\n输入\n2\n1 b\n3\n输出\n1</p>\n</blockquote>\n</div>","y":"a","title":"米哈游2022.08.07笔试记录"},["/article/interview/exp/mihayou87","/article/interview/exp/mihayou87.md"]],
  ["v-c94828c4","/article/javastack/javaadvance/base.html",{"c":["Java"],"g":["Java"],"e":"<h2> 1.Java基础概念</h2>\n<h3> 1.Java 语言有哪些特点?</h3>\n<ol>\n<li>简单易学；</li>\n<li>面向对象（封装，继承，多态）；</li>\n<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>\n<li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li>\n<li>可靠性；</li>\n<li>安全性；</li>\n<li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li>\n<li>编译与解释并存；</li>\n</ol>","y":"a","title":"基础概念"},["/article/javastack/javaadvance/base","/article/javastack/javaadvance/base.md"]],
  ["v-79aae91e","/article/javastack/javaadvance/collection.html",{"c":["Java"],"g":["Java"],"e":"<h3> Java 集合概览</h3>\n<p>Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 <code>Collection</code>接口，主要用于存放单一元素；另一个是 <code>Map</code> 接口，主要用于存放键值对。对于<code>Collection</code> 接口，下面又有三个主要的子接口：<code>List</code>、<code>Set</code> 和 <code>Queue</code>。</p>\n<p>Java 集合框架如下图所示：</p>\n<figure><img src=\"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/collection/java-collection-hierarchy.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","y":"a","title":"集合"},["/article/javastack/javaadvance/collection","/article/javastack/javaadvance/collection.md"]],
  ["v-7927482e","/article/javastack/javaadvance/IO.html",{"c":["Java"],"g":["Java"],"e":"Java面试","y":"a","title":"IO"},["/article/javastack/javaadvance/IO","/article/javastack/javaadvance/IO.md"]],
  ["v-450f9a85","/article/javastack/javaadvance/thread.html",{"e":"<h1> Chapter 17. Threads and Locks</h1>\n<p>While most of the discussion in the preceding chapters is concerned only with the behavior of code as executed a single statement or expression at a time, that is, by a single <em>thread</em>, the Java Virtual Machine can support many threads of execution at once. These threads independently execute code that operates on values and objects residing in a shared main memory. Threads may be supported by having many hardware processors, by time-slicing a single hardware processor, or by time-slicing many hardware processors.</p>","y":"a","title":"Chapter 17. Threads and Locks"},["/article/javastack/javaadvance/thread","/article/javastack/javaadvance/thread.md"]],
  ["v-ed754880","/article/javastack/javaSE/array.html",{"c":["Java"],"g":["JavaSE"],"e":"<h2> 数组</h2>\n<p>指的是一种容器，可以同来存储同种数据类型的多个值。</p>\n<p>但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p>\n<p>容器的类，和存储的数据类型保持一致。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>数据类型 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 数组名\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">//JAVA Syntax</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"数组"},["/article/javastack/javaSE/array","/article/javastack/javaSE/array.md"]],
  ["v-e2e851ea","/article/javastack/javaSE/basic.html",{"c":["Java"],"g":["JavaSE"],"e":"<h2> Java概述</h2>\n<h3> Java是什么？</h3>\n<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">Java</p>\n<p><strong>Java</strong> is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers <em><strong>write once, run anywhere</strong></em> (WORA),meaning that compiled Java code can run on all platforms that support Java without the need to recompile.</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>——Wikipedia</strong></p>\n<p>Java秉持\"一切皆对象\"的原则，在Java中，一切都是对象。</p>\n</div>","y":"a","title":"基础概念"},["/article/javastack/javaSE/basic","/article/javastack/javaSE/basic.md"]],
  ["v-231a1261","/article/javastack/javaSE/function.html",{"c":["Java"],"g":["JavaSE"],"e":"<p>​\t方法（method）是程序中最小的执行单元</p>\n<ul>\n<li>注意：\n<ul>\n<li>方法必须先创建才可以使用，该过程成为方法定义</li>\n<li>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> 方法名 <span class=\"token punctuation\">(</span>   <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 方法体;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"方法"},["/article/javastack/javaSE/function","/article/javastack/javaSE/function.md"]],
  ["v-71e8831d","/article/javastack/javaSE/inter.html",{"c":["Java"],"g":["JavaSE"],"e":"<h2> 1.Java语言特点</h2>\n<ol>\n<li>简单易学；</li>\n<li>面向对象（封装，继承，多态）；</li>\n<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>\n<li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li>\n<li>可靠性；</li>\n<li>安全性；</li>\n<li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li>\n<li>编译与解释并存；</li>\n</ol>","y":"a","title":"Java常见面试题"},["/article/javastack/javaSE/inter","/article/javastack/javaSE/inter.md"]],
  ["v-683661d6","/article/javastack/javaSE/loop.html",{"c":["Java"],"g":["JavaSE"],"e":"<h2> if</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    statement<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"流程控制"},["/article/javastack/javaSE/loop","/article/javastack/javaSE/loop.md"]],
  ["v-763311e9","/article/javastack/javaSE/oop.html",{"c":["Java"],"g":["JavaSE"],"e":"<h2> 类和对象</h2>\n<h3> 类和对象的理解</h3>\n<p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p>\n<ul>\n<li>类\n<ul>\n<li>类的理解\n<ul>\n<li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li>\n<li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li>\n<li>简单理解：类就是对现实事物的一种描述</li>\n</ul>\n</li>\n<li>类的组成\n<ul>\n<li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li>\n<li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>类和对象的关系\n<ul>\n<li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li>\n<li>对象：是能够看得到摸的着的真实存在的实体</li>\n<li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li>\n</ul>\n</li>\n</ul>","y":"a","title":"类与对象"},["/article/javastack/javaSE/oop","/article/javastack/javaSE/oop.md"]],
  ["v-357485a0","/article/javastack/javaSE/",{"y":"h","title":"Java基础"},["/article/javastack/javaSE/index.html","/article/javastack/javaSE/README.md"]],
  ["v-573ff9c8","/article/javastack/javaSE/string.html",{"c":["Java"],"g":["JavaSE"],"e":"<h2> 1.API</h2>\n<h3> 1.1API概述</h3>\n<ul>\n<li>\n<p>什么是API</p>\n<p>​\tAPI (Application Programming Interface) ：应用程序编程接口</p>\n</li>\n<li>\n<p>java中的API</p>\n<p>​\t指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p>\n</li>\n</ul>\n<h3> 1.2如何使用API帮助文档</h3>\n<ul>\n<li>打开帮助文档</li>\n</ul>","y":"a","title":"字符串"},["/article/javastack/javaSE/string","/article/javastack/javaSE/string.md"]],
  ["v-a0c87d94","/article/javastack/javaSE/syntax.html",{"c":["Java"],"g":["JavaSE"],"e":"<h2> 注释</h2>\n<p>注释是对代码的解释和说明文字。</p>\n<ul>\n<li>单行注释：</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 这是单行注释文字</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","title":"基础语法"},["/article/javastack/javaSE/syntax","/article/javastack/javaSE/syntax.md"]],
  ["v-4cc909d1","/article/javastack/juc/JUC-01.html",{"c":["Java"],"g":["JUC"],"e":"<h1> 基础篇</h1>\n<h2> 进程与线程</h2>\n<p><strong>进程</strong></p>\n<ul>\n<li>\n<p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU,数据加载至内</p>\n<p>存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的</p>\n</li>\n<li>\n<p>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</p>\n</li>\n<li>\n<p>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器</p>\n<p>等），也有的程序只能启动一个实例进程(例如网易云音乐、360安全卫士等)</p>\n</li>\n</ul>","y":"a","title":"JUC基础"},["/article/javastack/juc/JUC-01","/article/javastack/juc/JUC-01.md"]],
  ["v-4e7de270","/article/javastack/juc/JUC-02.html",{"c":["Java"],"g":["JUC"],"e":"<h1> synchronized</h1>\n<p><strong>Java对象头 monitor</strong></p>\n<p>普通对象数据结构</p>\n<table>\n<thead>\n<tr>\n<th>Object header</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MarkWord（32bits）</td>\n<td>class word（32bits）</td>\n</tr>\n</tbody>\n</table>\n<p>有Object Header 其中有32bit（32bit JVM）为MarkWord （标记位）</p>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th>MarkWord（32bit）</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Normal</td>\n<td><em><strong>Hashcode</strong></em>  25bit                  标识该对象的类名的hash</td>\n<td><em><strong>age</strong></em>   4bit 垃圾回收代</td>\n<td><em><strong>biased_lock</strong></em> 1bit  偏向锁标识**（0）**无偏向</td>\n<td><em><strong>状态位</strong></em>  2bit（01）</td>\n</tr>\n<tr>\n<td>Biased</td>\n<td>**thread **（23bit）标识偏向的线程+<em><strong>epoch</strong></em>（2bit）</td>\n<td><strong>age</strong>   4bit</td>\n<td><strong>（1）</strong>（表示有偏向）</td>\n<td>（01）</td>\n</tr>\n<tr>\n<td>Lightweight_locked</td>\n<td>ptr_to_lock_record（30bit）</td>\n<td></td>\n<td></td>\n<td>（00）</td>\n</tr>\n<tr>\n<td>Heavyweight_locked</td>\n<td>ptr_to_heavyweight_monitor (30bit)</td>\n<td></td>\n<td></td>\n<td>（10）</td>\n</tr>\n<tr>\n<td>Marked for GC</td>\n<td></td>\n<td></td>\n<td></td>\n<td>(11)</td>\n</tr>\n</tbody>\n</table>","y":"a","title":"Synchronized"},["/article/javastack/juc/JUC-02","/article/javastack/juc/JUC-02.md"]],
  ["v-5032bb0f","/article/javastack/juc/JUC-03.html",{"c":["Java"],"g":["JUC"],"e":"<h1> ReentantLock</h1>\n<ul>\n<li>可以中断</li>\n<li>可以设置超时时间</li>\n<li>可以设置为公平锁</li>\n<li>支持多个条件变量</li>\n<li>可重入</li>\n</ul>\n<h4> AQS结构</h4>\n<figure><figcaption>image-20220829181059334</figcaption></figure>\n<h4> 源码</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7373984872572414699L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token doc-comment comment\">/** Synchronizer providing all implementation mechanics */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Sync</span> sync<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//锁对象</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Base of synchronization control for this lock. Subclassed\n     * into fair and nonfair versions below. Uses AQS state to\n     * represent the number of holds on the lock.\n     */</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">//抽象类 继承了AQS</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5179523762034025860L</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * Performs non-fair tryLock.\n         */</span>\n        <span class=\"token annotation punctuation\">@ReservedStackAccess</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \t\t\t\t\t\t\t\t<span class=\"token comment\">//如果state为0 表示没有锁 </span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t   <span class=\"token comment\">//那么通过cas将0改为1 表示当前线程占有锁</span>\n                    <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将owner设置为当前线程</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//可重入实现</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// overflow      //如果加到了Integer.maxvalue 可能变为负数</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//cas设置state</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//获取锁成功 返回true</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * Checks for reentrancy and acquires if lock immediately\n         * available under fair vs nonfair rules. Locking methods\n         * perform initialTryLock check before relaying to\n         * corresponding AQS acquire methods.\n         */</span>\n        <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">initialTryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token annotation punctuation\">@ReservedStackAccess</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">initialTryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@ReservedStackAccess</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">initialTryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">acquireInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@ReservedStackAccess</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLockNanos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> nanos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">initialTryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">tryAcquireNanos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@ReservedStackAccess</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> releases<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> releases<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalMonitorStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> free <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>free<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> free<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// While we must in general read state before owner,</span>\n            <span class=\"token comment\">// we don't need to do so to check if current thread is owner</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConditionObject</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConditionObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Methods relayed from outer class</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">getOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * Reconstitutes the instance from a stream (that is, deserializes it).\n         */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span> s<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// reset to unlocked state</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Sync object for non-fair locks\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NonfairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7316153563782823691L</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">initialTryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// first attempt is unguarded</span>\n                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// overflow</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * Acquire for non-reentrant cases after initialTryLock prescreen\n         */</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Sync object for fair locks\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3000897897090466540L</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * Acquires only if reentrant or queue is empty.\n         */</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">initialTryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasQueuedThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>c <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// overflow</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token doc-comment comment\">/**\n         * Acquires only if thread is first waiter or empty\n         */</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n                <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sync <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Creates an instance of <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token class-name\">ReentrantLock</span></span></span><span class=\"token punctuation\">}</span> with the\n     * given fairness policy.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">fair</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if this lock should use a fair ordering policy\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> fair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sync <span class=\"token operator\">=</span> fair <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Acquires the lock.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Acquires the lock if it is not held by another thread and returns\n     * immediately, setting the lock hold count to one.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the current thread already holds the lock then the hold\n     * count is incremented by one and the method returns immediately.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the lock is held by another thread then the\n     * current thread becomes disabled for thread scheduling\n     * purposes and lies dormant until the lock has been acquired,\n     * at which time the lock hold count is set to one.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sync<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Acquires the lock unless the current thread is\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">interrupt</span></span> interrupted<span class=\"token punctuation\">}</span>.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Acquires the lock if it is not held by another thread and returns\n     * immediately, setting the lock hold count to one.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the current thread already holds this lock then the hold count\n     * is incremented by one and the method returns immediately.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the lock is held by another thread then the\n     * current thread becomes disabled for thread scheduling\n     * purposes and lies dormant until one of two things happens:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>The lock is acquired by the current thread; or\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Some other thread <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">interrupt</span></span> interrupts<span class=\"token punctuation\">}</span> the\n     * current thread.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the lock is acquired by the current thread then the lock hold\n     * count is set to one.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the current thread:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>has its interrupted status set on entry to this method; or\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>is <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">interrupt</span></span> interrupted<span class=\"token punctuation\">}</span> while acquiring\n     * the lock,\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * then <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">InterruptedException</span></span><span class=\"token punctuation\">}</span> is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>In this implementation, as this method is an explicit\n     * interruption point, preference is given to responding to the\n     * interrupt over normal or reentrant acquisition of the lock.\n     *\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">InterruptedException</span></span> if the current thread is interrupted\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        sync<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Acquires the lock only if it is not held by another thread at the time\n     * of invocation.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Acquires the lock if it is not held by another thread and\n     * returns immediately with the value <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span>, setting the\n     * lock hold count to one. Even when this lock has been set to use a\n     * fair ordering policy, a call to <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">}</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>will<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>\n     * immediately acquire the lock if it is available, whether or not\n     * other threads are currently waiting for the lock.\n     * This <span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>barging<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span> behavior can be useful in certain\n     * circumstances, even though it breaks fairness. If you want to honor\n     * the fairness setting for this lock, then use\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token punctuation\">#</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">)</span></span> tryLock(0, TimeUnit.SECONDS)<span class=\"token punctuation\">}</span>\n     * which is almost equivalent (it also detects interruption).\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the current thread already holds this lock then the hold\n     * count is incremented by one and the method returns <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span>.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the lock is held by another thread then this method will return\n     * immediately with the value <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span>.\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if the lock was free and was acquired by the\n     *         current thread, or the lock was already held by the current\n     *         thread; and <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span> otherwise\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Acquires the lock if it is not held by another thread within the given\n     * waiting time and the current thread has not been\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">interrupt</span></span> interrupted<span class=\"token punctuation\">}</span>.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Acquires the lock if it is not held by another thread and returns\n     * immediately with the value <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span>, setting the lock hold count\n     * to one. If this lock has been set to use a fair ordering policy then\n     * an available lock <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>will not<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span> be acquired if any other threads\n     * are waiting for the lock. This is in contrast to the <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token punctuation\">#</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span>\n     * method. If you want a timed <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">tryLock</span></span><span class=\"token punctuation\">}</span> that does permit barging on\n     * a fair lock then combine the timed and un-timed forms together:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span>\n     <span class=\"token code-section\">* <span class=\"token code language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></span>\n     *     <span class=\"token code language-java\">lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span>\n     * <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the current thread\n     * already holds this lock then the hold count is incremented by one and\n     * the method returns <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span>.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the lock is held by another thread then the\n     * current thread becomes disabled for thread scheduling\n     * purposes and lies dormant until one of three things happens:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>The lock is acquired by the current thread; or\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Some other thread <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">interrupt</span></span> interrupts<span class=\"token punctuation\">}</span>\n     * the current thread; or\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>The specified waiting time elapses\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the lock is acquired then the value <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> is returned and\n     * the lock hold count is set to one.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the current thread:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>has its interrupted status set on entry to this method; or\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>is <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">interrupt</span></span> interrupted<span class=\"token punctuation\">}</span> while\n     * acquiring the lock,\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     * then <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">InterruptedException</span></span><span class=\"token punctuation\">}</span> is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the specified waiting time elapses then the value <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span>\n     * is returned.  If the time is less than or equal to zero, the method\n     * will not wait at all.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>In this implementation, as this method is an explicit\n     * interruption point, preference is given to responding to the\n     * interrupt over normal or reentrant acquisition of the lock, and\n     * over reporting the elapse of the waiting time.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">timeout</span> the time to wait for the lock\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">unit</span> the time unit of the timeout argument\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if the lock was free and was acquired by the\n     *         current thread, or the lock was already held by the current\n     *         thread; and <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span> if the waiting time elapsed before\n     *         the lock could be acquired\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">InterruptedException</span></span> if the current thread is interrupted\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">NullPointerException</span></span> if the time unit is null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockNanos</span><span class=\"token punctuation\">(</span>unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Attempts to release this lock.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>If the current thread is the holder of this lock then the hold\n     * count is decremented.  If the hold count is now zero then the lock\n     * is released.  If the current thread is not the holder of this\n     * lock then <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalMonitorStateException</span></span><span class=\"token punctuation\">}</span> is thrown.\n     *\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalMonitorStateException</span></span> if the current thread does not\n     *         hold this lock\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sync<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns a <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">}</span> instance for use with this\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">}</span> instance.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>The returned <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">}</span> instance supports the same\n     * usages as do the <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">Object</span></span><span class=\"token punctuation\">}</span> monitor methods (<span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span>\n     * <span class=\"token reference\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">#</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span> wait<span class=\"token punctuation\">}</span>, <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">#</span><span class=\"token field\">notify</span></span> notify<span class=\"token punctuation\">}</span>, and <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span>\n     * <span class=\"token reference\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">#</span><span class=\"token field\">notifyAll</span></span> notifyAll<span class=\"token punctuation\">}</span>) when used with the built-in\n     * monitor lock.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>If this lock is not held when any of the <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">}</span>\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Condition</span><span class=\"token punctuation\">#</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span> waiting<span class=\"token punctuation\">}</span> or <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span>\n     * <span class=\"token reference\"><span class=\"token class-name\">Condition</span><span class=\"token punctuation\">#</span><span class=\"token field\">signal</span></span> signalling<span class=\"token punctuation\">}</span> methods are called, then an <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span>\n     * <span class=\"token reference\"><span class=\"token class-name\">IllegalMonitorStateException</span></span><span class=\"token punctuation\">}</span> is thrown.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>When the condition <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Condition</span><span class=\"token punctuation\">#</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span> waiting<span class=\"token punctuation\">}</span>\n     * methods are called the lock is released and, before they\n     * return, the lock is reacquired and the lock hold count restored\n     * to what it was when the method was called.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>If a thread is <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">interrupt</span></span> interrupted<span class=\"token punctuation\">}</span>\n     * while waiting then the wait will terminate, an <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span>\n     * <span class=\"token reference\"><span class=\"token class-name\">InterruptedException</span></span><span class=\"token punctuation\">}</span> will be thrown, and the thread's\n     * interrupted status will be cleared.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Waiting threads are signalled in FIFO order.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>The ordering of lock reacquisition for threads returning\n     * from waiting methods is the same as for threads initially\n     * acquiring the lock, which is in the default case not specified,\n     * but for <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>fair<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span> locks favors those threads that have been\n     * waiting the longest.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token keyword\">@return</span> the Condition object\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Condition</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Queries the number of holds on this lock by the current thread.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>A thread has a hold on a lock for each lock action that is not\n     * matched by an unlock action.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>The hold count information is typically only used for testing and\n     * debugging purposes. For example, if a certain section of code should\n     * not be entered with the lock already held then we can assert that\n     * fact:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span>\n     <span class=\"token code-section\">* <span class=\"token code language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token comment\">// ...</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n     *     <span class=\"token code language-java\"><span class=\"token keyword\">assert</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span>\n     *     <span class=\"token code language-java\">lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *     <span class=\"token code language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n     *       <span class=\"token code language-java\"><span class=\"token comment\">// ... method body</span></span>\n     *     <span class=\"token code language-java\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span></span>\n     *       <span class=\"token code language-java\">lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *     <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span>\n     * <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token keyword\">@return</span> the number of holds on this lock by the current thread,\n     *         or zero if this lock is not held by the current thread\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Queries if this lock is held by the current thread.\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Analogous to the <span class=\"token punctuation\">{</span><span class=\"token keyword\">@link</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token function\">holdsLock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span> method for\n     * built-in monitor locks, this method is typically used for\n     * debugging and testing. For example, a method that should only be\n     * called while a lock is held can assert that this is the case:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span>\n     <span class=\"token code-section\">* <span class=\"token code language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token comment\">// ...</span></span>\n     *\n     *   <span class=\"token code language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n     *       <span class=\"token code language-java\"><span class=\"token keyword\">assert</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isHeldByCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *       <span class=\"token code language-java\"><span class=\"token comment\">// ... method body</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span>\n     * <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>It can also be used to ensure that a reentrant lock is used\n     * in a non-reentrant manner, for example:\n     *\n     * <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span>\n     <span class=\"token code-section\">* <span class=\"token code language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token comment\">// ...</span></span>\n     *\n     *   <span class=\"token code language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n     *       <span class=\"token code language-java\"><span class=\"token keyword\">assert</span> <span class=\"token operator\">!</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">isHeldByCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *       <span class=\"token code language-java\">lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *       <span class=\"token code language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span>\n     *           <span class=\"token code language-java\"><span class=\"token comment\">// ... method body</span></span>\n     *       <span class=\"token code language-java\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span></span>\n     *           <span class=\"token code language-java\">lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n     *       <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span>\n     *   <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span>\n     * <span class=\"token code language-java\"><span class=\"token punctuation\">}</span></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">&gt;</span></span>\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if current thread holds this lock and\n     *         <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span> otherwise\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldByCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Queries if this lock is held by any thread. This method is\n     * designed for use in monitoring of the system state,\n     * not for synchronization control.\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if any thread holds this lock and\n     *         <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">false</span></span></span><span class=\"token punctuation\">}</span> otherwise\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">isLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if this lock has fairness set true.\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if this lock has fairness set true\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FairSync</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns the thread that currently owns this lock, or\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token keyword\">null</span></span></span><span class=\"token punctuation\">}</span> if not owned. When this method is called by a\n     * thread that is not the owner, the return value reflects a\n     * best-effort approximation of current lock status. For example,\n     * the owner may be momentarily <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token keyword\">null</span></span></span><span class=\"token punctuation\">}</span> even if there are\n     * threads trying to acquire the lock but have not yet done so.\n     * This method is designed to facilitate construction of\n     * subclasses that provide more extensive lock monitoring\n     * facilities.\n     *\n     * <span class=\"token keyword\">@return</span> the owner, or <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token keyword\">null</span></span></span><span class=\"token punctuation\">}</span> if not owned\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">getOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">getOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Queries whether any threads are waiting to acquire this lock. Note that\n     * because cancellations may occur at any time, a <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span>\n     * return does not guarantee that any other thread will ever\n     * acquire this lock.  This method is designed primarily for use in\n     * monitoring of the system state.\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if there may be other threads waiting to\n     *         acquire the lock\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasQueuedThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">hasQueuedThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Queries whether the given thread is waiting to acquire this\n     * lock. Note that because cancellations may occur at any time, a\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> return does not guarantee that this thread\n     * will ever acquire this lock.  This method is designed primarily for use\n     * in monitoring of the system state.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">thread</span> the thread\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if the given thread is queued waiting for this lock\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">NullPointerException</span></span> if the thread is null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasQueuedThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">isQueued</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns an estimate of the number of threads waiting to acquire\n     * this lock.  The value is only an estimate because the number of\n     * threads may change dynamically while this method traverses\n     * internal data structures.  This method is designed for use in\n     * monitoring system state, not for synchronization control.\n     *\n     * <span class=\"token keyword\">@return</span> the estimated number of threads waiting for this lock\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getQueueLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">getQueueLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns a collection containing threads that may be waiting to\n     * acquire this lock.  Because the actual set of threads may change\n     * dynamically while constructing this result, the returned\n     * collection is only a best-effort estimate.  The elements of the\n     * returned collection are in no particular order.  This method is\n     * designed to facilitate construction of subclasses that provide\n     * more extensive monitoring facilities.\n     *\n     * <span class=\"token keyword\">@return</span> the collection of threads\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getQueuedThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">getQueuedThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Queries whether any threads are waiting on the given condition\n     * associated with this lock. Note that because timeouts and\n     * interrupts may occur at any time, a <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> return does\n     * not guarantee that a future <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\">signal</span></span><span class=\"token punctuation\">}</span> will awaken any\n     * threads.  This method is designed primarily for use in\n     * monitoring of the system state.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">condition</span> the condition\n     * <span class=\"token keyword\">@return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token boolean\">true</span></span></span><span class=\"token punctuation\">}</span> if there are any waiting threads\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalMonitorStateException</span></span> if this lock is not held\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalArgumentException</span></span> if the given condition is\n     *         not associated with this lock\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">NullPointerException</span></span> if the condition is null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasWaiters</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Condition</span> condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>condition <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AbstractQueuedSynchronizer<span class=\"token punctuation\">.</span>ConditionObject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">hasWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer<span class=\"token punctuation\">.</span>ConditionObject</span><span class=\"token punctuation\">)</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns an estimate of the number of threads waiting on the\n     * given condition associated with this lock. Note that because\n     * timeouts and interrupts may occur at any time, the estimate\n     * serves only as an upper bound on the actual number of waiters.\n     * This method is designed for use in monitoring of the system\n     * state, not for synchronization control.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">condition</span> the condition\n     * <span class=\"token keyword\">@return</span> the estimated number of waiting threads\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalMonitorStateException</span></span> if this lock is not held\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalArgumentException</span></span> if the given condition is\n     *         not associated with this lock\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">NullPointerException</span></span> if the condition is null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWaitQueueLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Condition</span> condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>condition <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AbstractQueuedSynchronizer<span class=\"token punctuation\">.</span>ConditionObject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">getWaitQueueLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer<span class=\"token punctuation\">.</span>ConditionObject</span><span class=\"token punctuation\">)</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns a collection containing those threads that may be\n     * waiting on the given condition associated with this lock.\n     * Because the actual set of threads may change dynamically while\n     * constructing this result, the returned collection is only a\n     * best-effort estimate. The elements of the returned collection\n     * are in no particular order.  This method is designed to\n     * facilitate construction of subclasses that provide more\n     * extensive condition monitoring facilities.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">condition</span> the condition\n     * <span class=\"token keyword\">@return</span> the collection of threads\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalMonitorStateException</span></span> if this lock is not held\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">IllegalArgumentException</span></span> if the given condition is\n     *         not associated with this lock\n     * <span class=\"token keyword\">@throws</span> <span class=\"token reference\"><span class=\"token class-name\">NullPointerException</span></span> if the condition is null\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getWaitingThreads</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Condition</span> condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>condition <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AbstractQueuedSynchronizer<span class=\"token punctuation\">.</span>ConditionObject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">getWaitingThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer<span class=\"token punctuation\">.</span>ConditionObject</span><span class=\"token punctuation\">)</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * Returns a string identifying this lock, as well as its lock state.\n     * The state, in brackets, includes either the String <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token string\">\"Unlocked\"</span></span></span><span class=\"token punctuation\">}</span>\n     * or the String <span class=\"token punctuation\">{</span><span class=\"token keyword\">@code</span> <span class=\"token code-section\"><span class=\"token code language-java\"><span class=\"token string\">\"Locked by\"</span></span></span><span class=\"token punctuation\">}</span> followed by the\n     * <span class=\"token punctuation\">{</span><span class=\"token keyword\">@linkplain</span> <span class=\"token reference\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">#</span><span class=\"token field\">getName</span></span> name<span class=\"token punctuation\">}</span> of the owning thread.\n     *\n     * <span class=\"token keyword\">@return</span> a string identifying this lock, as well as its lock state\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span> o <span class=\"token operator\">=</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">getOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span>\n                                   <span class=\"token string\">\"[Unlocked]\"</span> <span class=\"token operator\">:</span>\n                                   <span class=\"token string\">\"[Locked by thread \"</span> <span class=\"token operator\">+</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"ReentantLock"},["/article/javastack/juc/JUC-03","/article/javastack/juc/JUC-03.md"]],
  ["v-51e793ae","/article/javastack/juc/JUC-04.html",{"c":["Java"],"g":["JUC"],"e":"<h1> AbstractQueuedSynchronizer</h1>\n<p>全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架</p>\n<ul>\n<li>\n<p>用 state 属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取</p>\n<p>锁和释放锁</p>\n<ul>\n<li>getState - 获取 state 状态</li>\n<li>setState - 设置 state 状态</li>\n<li>compareAndSetState - cas 机制设置 state 状态</li>\n<li>独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源</li>\n</ul>\n</li>\n<li>\n<p>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList</p>\n</li>\n<li>\n<p>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</p>\n</li>\n</ul>","y":"a","title":"AQS"},["/article/javastack/juc/JUC-04","/article/javastack/juc/JUC-04.md"]],
  ["v-2720ac1c","/article/javastack/juc/",{"y":"h","title":"JVM"},["/article/javastack/juc/index.html","/article/javastack/juc/README.md"]],
  ["v-1d9eb914","/article/javastack/jvm/basic.html",{"c":["Java"],"g":["JVM"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">什么是虚拟机</p>\n<p>In computing, a <strong>virtual machine</strong> (<strong>VM</strong>) is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.</p>\n</div>","y":"a","title":"概述"},["/article/javastack/jvm/basic","/article/javastack/jvm/basic.md"]],
  ["v-54a5ca8a","/article/javastack/jvm/bytecode.html",{"c":["Java"],"g":["JVM"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">Java 字节码</p>\n<p>In computing, <strong>Java bytecode</strong> is the bytecode-structured instruction set of the Java virtual machine (JVM), a virtual machine that enables a computer to run programs written in the Java programming language and several other programming languages, see List of JVM languages.</p>\n<p><a href=\"https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-6.html#jvms-6.5\" target=\"_blank\" rel=\"noopener noreferrer\">Java字节码规范</a></p>\n</div>","y":"a","title":"字节码"},["/article/javastack/jvm/bytecode","/article/javastack/jvm/bytecode.md"]],
  ["v-fa2dc5d2","/article/javastack/jvm/classloader.html",{"c":["Java"],"g":["JVM"],"e":"<p>虚拟机已经定义好了，现在要运行一个java程序，就需要有人把该运行的程序从硬盘或者是网络搬运到我们的虚拟机环境的内存中，把准备工作做好。这个过程就是jvm的类加载过程。类加载过程通常是依靠ClassLoader实现的。</p>\n<h2> Java的基本类型的加载</h2>\n<p>Java 语言的类型可以分为两大类：<strong>基本类型</strong>（primitive types）和<strong>引用类型</strong>（reference types）。</p>\n<p>基本类型是由JVM预先定义好的类型，在 Java 虚拟机规范中，局部变量区等价于一个数组，并且可以用正整数来索引。除了 long、double 值需要用两个数组单元来存储之外，其他基本类型以及引用类型的值均占用一个数组单元。</p>","y":"a","title":"类加载"},["/article/javastack/jvm/classloader","/article/javastack/jvm/classloader.md"]],
  ["v-7bb9590c","/article/javastack/jvm/error.html",{"c":["Java"],"g":["JVM"],"e":"<h2> Java中的异常处理</h2>\n<p>ava 的异常分为 Exception 和 Error 两种，而 Exception 又分为 RuntimeException 和其他类型。RuntimeException 和 Error 属于非检查异常。其他的 Exception 皆属于检查异常，在触发时需要显式捕获，或者在方法头用 throws 关键字声明。Java 字节码中，每个方法对应一个异常表。当程序触发异常时，Java 虚拟机将查找异常表，并依此决定需要将控制流转移至哪个异常处理器之中。Java 代码中的 catch 代码块和 finally 代码块都会生成异常表条目。Java 7 引入了 Suppressed 异常、try-with-resources，以及多异常捕获。后两者属于语法糖，能够极大地精简我们的代码。</p>","y":"a","title":"异常处理"},["/article/javastack/jvm/error","/article/javastack/jvm/error.md"]],
  ["v-43aa4b2d","/article/javastack/jvm/garbage.html",{"c":["Java"],"g":["JVM"],"e":"<blockquote>\n<p>垃圾回收</p>\n<ol>\n<li>如何判断对象可以回收</li>\n<li>垃圾回收算法</li>\n<li>分代垃圾回收</li>\n<li>垃圾回收器</li>\n<li>垃圾回收调优</li>\n</ol>\n</blockquote>\n<h2> 1.如何判断垃圾可以回收</h2>\n<h3> 1.1引用计数法</h3>\n<p>一个对象被其他对象引用时，计数器+1；</p>\n<p>取消引用时，则-1；</p>\n<p>当引用为0时则回收；</p>\n<p>缺点</p>\n<p>循环引用时 就会无法回收</p>\n<h3> 1.2可达性分析算法</h3>\n<ol>\n<li>\n<p>Java 虚拟机中的垃圾回收器采用可达性分析来探索所有存活的对象</p>\n</li>\n<li>\n<p>扫描堆中的对象，看是否能够沿着 GC Root对象 为起点的引用链找到该对象，找不到，表示可以回收</p>\n</li>\n<li>\n<p>哪些对象可以作为 GC Root ?</p>\n<p>Busy Monitor-&gt;锁对象</p>\n<p>Thread-&gt;被引用的堆内存的对象</p>\n</li>\n</ol>","y":"a","title":"垃圾回收"},["/article/javastack/jvm/garbage","/article/javastack/jvm/garbage.md"]],
  ["v-ba452952","/article/javastack/jvm/inline.html",{"c":["Java"],"g":["JVM"],"e":"JVM","y":"a","title":"内联方法"},["/article/javastack/jvm/inline","/article/javastack/jvm/inline.md"]],
  ["v-3e1e1cd8","/article/javastack/jvm/invoke.html",{"c":["Java"],"g":["JVM"],"e":"<p>做好了准备工作，现在该运行一个Java程序了。那么JVM是如何实现OOP程序的特点 封装、继承、多态的？ 一个方法是如何调用的？重载和重写是如何实现的？</p>\n<p>这就是本章需要解决的内容。</p>\n<h2> JVM怎样认识一个方法</h2>\n<p>我们知道重载是可以有相同的方法名，但是有不同的参数列表。</p>\n<p>那么JVM是怎样识别一个方法呢？</p>\n<p>Java 虚拟机识别方法的关键在于类名、方法名以及方法描述符（method descriptor）方法描述符是由方法的参数类型以及返回类型所构成。</p>\n<p>我们可以在反编译中查看一个方法描述符</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    descriptor<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span>\n    <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n       <span class=\"token number\">0</span><span class=\"token operator\">:</span> iconst_4\n       <span class=\"token number\">1</span><span class=\"token operator\">:</span> newarray       <span class=\"token keyword\">int</span>\n       <span class=\"token number\">3</span><span class=\"token operator\">:</span> dup\n       <span class=\"token number\">4</span><span class=\"token operator\">:</span> iconst_0\n       <span class=\"token number\">5</span><span class=\"token operator\">:</span> iconst_1\n       <span class=\"token number\">6</span><span class=\"token operator\">:</span> iastore\n       <span class=\"token number\">7</span><span class=\"token operator\">:</span> dup\n       <span class=\"token number\">8</span><span class=\"token operator\">:</span> iconst_1\n       <span class=\"token number\">9</span><span class=\"token operator\">:</span> iconst_3\n      <span class=\"token number\">10</span><span class=\"token operator\">:</span> iastore\n      <span class=\"token number\">11</span><span class=\"token operator\">:</span> dup\n      <span class=\"token number\">12</span><span class=\"token operator\">:</span> iconst_2\n      <span class=\"token number\">13</span><span class=\"token operator\">:</span> iconst_5\n      <span class=\"token number\">14</span><span class=\"token operator\">:</span> iastore\n      <span class=\"token number\">15</span><span class=\"token operator\">:</span> dup\n      <span class=\"token number\">16</span><span class=\"token operator\">:</span> iconst_3\n      <span class=\"token number\">17</span><span class=\"token operator\">:</span> bipush        <span class=\"token number\">7</span>\n      <span class=\"token number\">19</span><span class=\"token operator\">:</span> iastore\n      <span class=\"token number\">20</span><span class=\"token operator\">:</span> astore_1\n      <span class=\"token number\">21</span><span class=\"token operator\">:</span> iconst_2\n      <span class=\"token number\">22</span><span class=\"token operator\">:</span> istore_2\n      <span class=\"token number\">23</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n    <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span>\n      line <span class=\"token number\">9</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n      line <span class=\"token number\">10</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span>\n      line <span class=\"token number\">11</span><span class=\"token operator\">:</span> <span class=\"token number\">23</span>\n    <span class=\"token class-name\">LocalVariableTable</span><span class=\"token operator\">:</span>\n      <span class=\"token class-name\">Start</span>  <span class=\"token class-name\">Length</span>  <span class=\"token class-name\">Slot</span>  <span class=\"token class-name\">Name</span>   <span class=\"token class-name\">Signature</span>\n          <span class=\"token number\">0</span>      <span class=\"token number\">24</span>     <span class=\"token number\">0</span>  args   <span class=\"token punctuation\">[</span><span class=\"token class-name\">Ljava</span><span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n         <span class=\"token number\">21</span>       <span class=\"token number\">3</span>     <span class=\"token number\">1</span>     a   <span class=\"token punctuation\">[</span><span class=\"token class-name\">I</span>\n         <span class=\"token number\">23</span>       <span class=\"token number\">1</span>     <span class=\"token number\">2</span>     b   <span class=\"token class-name\">I</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","title":"调用篇"},["/article/javastack/jvm/invoke","/article/javastack/jvm/invoke.md"]],
  ["v-018100cd","/article/javastack/jvm/jit.html",{"c":["Java"],"g":["JVM"],"e":"<p>HotSpot 虚拟机包含多个即时编译器 C1、C2 和 Graal。</p>\n<p>其中，Graal 是一个实验性质的即时编译器，可以通过参数 -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler 启用，并且替换 C2。</p>\n<p>在 Java 7 以前，我们需要根据程序的特性选择对应的即时编译器。对于执行时间较短的，或者对启动性能有要求的程序，我们采用编译效率较快的 C1，对应参数 -client。对于执行时间较长的，或者对峰值性能有要求的程序，我们采用生成代码执行效率较快的 C2，对应参数 -server。Java 7 引入了分层编译（对应参数 -XX:+TieredCompilation）的概念，综合了 C1 的启动性能优势和 C2 的峰值性能优势。分层编译将 Java 虚拟机的执行状态分为了五个层次。为了方便阐述，我用“C1 代码”来指代由 C1 生成的机器码，“C2 代码”来指代由 C2 生成的机器码。五个层级分别是：解释执行；执行不带 profiling 的 C1 代码；执行仅带方法调用次数以及循环回边执行次数 profiling 的 C1 代码；执行带所有 profiling 的 C1 代码；执行 C2 代码。</p>","y":"a","title":"即时编译篇"},["/article/javastack/jvm/jit","/article/javastack/jvm/jit.md"]],
  ["v-592091ef","/article/javastack/jvm/memory.html",{"c":["Java"],"g":["JVM"],"e":"<div class=\"custom-container tip\">\n<p class=\"custom-container-title\">JMM</p>\n<p>The <strong>Java memory model</strong> describes how <a href=\"https://en.wikipedia.org/wiki/Thread_(computer_science)\" target=\"_blank\" rel=\"noopener noreferrer\">threads</a> in the <a href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\" target=\"_blank\" rel=\"noopener noreferrer\">Java programming language</a> interact through memory. Together with the description of single-threaded execution of code, the memory model provides the <a href=\"https://en.wikipedia.org/wiki/Formal_semantics_of_programming_languages\" target=\"_blank\" rel=\"noopener noreferrer\">semantics</a> of the Java programming language.</p>\n<p>——Wikipedia</p>\n<p><a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5\" target=\"_blank\" rel=\"noopener noreferrer\">Java runtime data area</a></p>\n<p><a href=\"http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/hotspot/share/memory\" target=\"_blank\" rel=\"noopener noreferrer\">JDK11 Memory 源码</a></p>\n</div>","y":"a","title":"内存篇"},["/article/javastack/jvm/memory","/article/javastack/jvm/memory.md"]],
  ["v-2720a22e","/article/javastack/jvm/",{"y":"h","title":"JVM"},["/article/javastack/jvm/index.html","/article/javastack/jvm/README.md"]],
  ["v-5961e79b","/article/javastack/jvm/struct.html",{"c":["Java"],"g":["JVM"],"e":"<figure><img src=\"/javastack/jvm/image-20220823220237424.png\" alt=\"image-20220823220237424\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220823220237424</figcaption></figure>\n<blockquote>\n<p><strong>内存结构</strong></p>\n<ol>\n<li>\n<p><strong>程序计数器</strong></p>\n</li>\n<li>\n<p><strong>虚拟机栈</strong></p>\n</li>\n<li>\n<p><strong>本地方法栈</strong></p>\n</li>\n<li>\n<p><strong>堆</strong></p>\n</li>\n<li>\n<p><strong>方法区</strong></p>\n</li>\n</ol>\n</blockquote>","y":"a","title":"内存结构"},["/article/javastack/jvm/struct","/article/javastack/jvm/struct.md"]],
  ["v-370ed27e","/article/spring/springadvance/AOP.html",{"c":["Spring"],"g":["Spring","Advanced"],"e":"<h2> AOP</h2>\n<p>AOP 底层实现方式之一是代理，由代理结合通知和目标，提供增强功能</p>\n<p>除此以外，aspectj 提供了两种另外的 AOP 底层实现：</p>\n<ul>\n<li>\n<p>第一种是通过 ajc 编译器在<strong>编译</strong> class 类文件时，就把通知的增强功能，织入到目标类的字节码中</p>\n</li>\n<li>\n<p>第二种是通过 agent 在<strong>加载</strong>目标类时，修改目标类的字节码，织入增强功能</p>\n</li>\n<li>\n<p>作为对比，之前学习的代理是<strong>运行</strong>时生成新的字节码</p>\n</li>\n</ul>","y":"a","title":"AOP"},["/article/spring/springadvance/AOP","/article/spring/springadvance/AOP.md"]],
  ["v-172207bd","/article/spring/springadvance/Boot.html",{"c":["Spring"],"g":["Spring","Advanced"],"e":"<h2> Boot</h2>\n<h3> 37) Boot 骨架项目</h3>\n<p>如果是 linux 环境，用以下命令即可获取 spring boot 的骨架 pom.xml</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-G</span> https://start.spring.io/pom.xml <span class=\"token parameter variable\">-d</span> <span class=\"token assign-left variable\">dependencies</span><span class=\"token operator\">=</span>web,mysql,mybatis <span class=\"token parameter variable\">-o</span> pom.xml\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","title":"Boot底层源码解析"},["/article/spring/springadvance/Boot","/article/spring/springadvance/Boot.md"]],
  ["v-baf78cd2","/article/spring/springadvance/contextandbean.html",{"c":["Spring"],"g":["Spring","Advanced"],"e":"<h2> 容器与 bean</h2>\n<h3> 1) 容器接口</h3>\n<ul>\n<li>\n<p>BeanFactory 接口，典型功能有：</p>\n<ul>\n<li>getBean</li>\n</ul>\n</li>\n<li>\n<p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>\n<ul>\n<li>国际化</li>\n<li>通配符方式获取一组 Resource 资源</li>\n<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>\n<li>事件发布与监听，实现组件之间的解耦</li>\n</ul>\n</li>\n</ul>","y":"a","title":"容器与bean"},["/article/spring/springadvance/contextandbean","/article/spring/springadvance/contextandbean.md"]],
  ["v-c1d2aee6","/article/spring/springadvance/spring-advance.html",{"c":["Spring"],"g":["Spring","Advanced"],"e":"<h2> 容器与 bean</h2>\n<h3> 1) 容器接口</h3>\n<ul>\n<li>\n<p>BeanFactory 接口，典型功能有：</p>\n<ul>\n<li>getBean</li>\n</ul>\n</li>\n<li>\n<p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>\n<ul>\n<li>国际化</li>\n<li>通配符方式获取一组 Resource 资源</li>\n<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>\n<li>事件发布与监听，实现组件之间的解耦</li>\n</ul>\n</li>\n</ul>","y":"a","title":"Springadvance"},["/article/spring/springadvance/spring-advance","/article/spring/springadvance/spring-advance.md"]],
  ["v-90926a22","/article/spring/springadvance/Springinterview.html",{"c":["Spring"],"g":["Spring","Advanced"],"e":"<h2> 1.ApplicationContext的refresh方法干了什么？</h2>\n<h3> 1.1prepareRefresh</h3>\n<p>创建准备Environment环境</p>\n<p>systemProperties、systemEnvironment、PropertySource里的键值信息</p>\n<h3> 1.2 obtainFreshBeanFactory</h3>\n<figure><img src=\"/spring/springadvance/image-20220825123019978.png\" alt=\"image-20220825123019978\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220825123019978</figcaption></figure>","y":"a","title":"Spring面试常考题目"},["/article/spring/springadvance/Springinterview","/article/spring/springadvance/Springinterview.md"]],
  ["v-ee2b9cd4","/article/spring/springadvance/SpringMVC.html",{"c":["Spring"],"g":["Spring","Advanced"],"e":"<h2> WEB</h2>\n<h3> 20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter</h3>\n<p>RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 俩是一对，分别用来</p>\n<ul>\n<li>处理 @RequestMapping 映射</li>\n<li>调用控制器方法、并处理方法参数与方法返回值</li>\n</ul>\n<h4> 演示1 - DispatcherServlet 初始化</h4>\n<h4> 收获💡</h4>\n<ol>\n<li>DispatcherServlet 是在第一次被访问时执行初始化, 也可以通过配置修改为 Tomcat 启动后就初始化</li>\n<li>在初始化时会从 Spring 容器中找一些 Web 需要的组件, 如 HandlerMapping、HandlerAdapter 等，并逐一调用它们的初始化</li>\n<li>RequestMappingHandlerMapping 初始化时，会收集所有 @RequestMapping 映射信息，封装为 Map，其中\n<ul>\n<li>key 是 RequestMappingInfo 类型，包括请求路径、请求方法等信息</li>\n<li>value 是 HandlerMethod 类型，包括控制器方法对象、控制器对象</li>\n<li>有了这个 Map，就可以在请求到达时，快速完成映射，找到 HandlerMethod 并与匹配的拦截器一起返回给 DispatcherServlet</li>\n</ul>\n</li>\n<li>RequestMappingHandlerAdapter 初始化时，会准备 HandlerMethod 调用时需要的各个组件，如：\n<ul>\n<li>HandlerMethodArgumentResolver 解析控制器方法参数</li>\n<li>HandlerMethodReturnValueHandler 处理控制器方法返回值</li>\n</ul>\n</li>\n</ol>","y":"a","title":"SpringMVC"},["/article/spring/springadvance/SpringMVC","/article/spring/springadvance/SpringMVC.md"]],
  ["v-3706649a","/404.html",{"y":"p","title":""},["/404"]],
  ["v-5bc93818","/category/",{"y":"p","title":"分类"},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","title":"标签"},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","title":"文章"},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","title":"收藏"},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","title":"时间轴"},["/timeline/index.html"]],
  ["v-9c48d85a","/category/linux/",{"y":"p","title":"Linux 分类"},["/category/linux/index.html"]],
  ["v-0da0e1bd","/tag/os/",{"y":"p","title":"OS 标签"},["/tag/os/index.html"]],
  ["v-2712bfbe","/category/computer-concept/",{"y":"p","title":"Computer Concept 分类"},["/category/computer-concept/index.html"]],
  ["v-b315ff3c","/tag/asm/",{"y":"p","title":"asm 标签"},["/tag/asm/index.html"]],
  ["v-7adec75c","/category/computer/",{"y":"p","title":"Computer 分类"},["/category/computer/index.html"]],
  ["v-0da0e350","/tag/pa/",{"y":"p","title":"Pa 标签"},["/tag/pa/index.html"]],
  ["v-e348c378","/category/c/",{"y":"p","title":"C 分类"},["/category/c/index.html"]],
  ["v-d5d49a0c","/tag/c/",{"y":"p","title":"C 标签"},["/tag/c/index.html"]],
  ["v-3d18412f","/category/go/",{"y":"p","title":"Go 分类"},["/category/go/index.html"]],
  ["v-0da0c339","/tag/go/",{"y":"p","title":"Go 标签"},["/tag/go/index.html"]],
  ["v-9717cc36","/category/mysql/",{"y":"p","title":"MySQL 分类"},["/category/mysql/index.html"]],
  ["v-3c55768a","/tag/mysql%E8%BF%9B%E9%98%B6/",{"y":"p","title":"MySQL进阶 标签"},["/tag/mysql进阶/","/tag/mysql%E8%BF%9B%E9%98%B6/index.html"]],
  ["v-a074e84e","/category/network/",{"y":"p","title":"Network 分类"},["/category/network/index.html"]],
  ["v-0f7cde43","/tag/mysql%E5%9F%BA%E7%A1%80/",{"y":"p","title":"MySQL基础 标签"},["/tag/mysql基础/","/tag/mysql%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-78cbe7bb","/category/python/",{"y":"p","title":"Python 分类"},["/category/python/index.html"]],
  ["v-1bee38ca","/tag/mysql/",{"y":"p","title":"MySQL 标签"},["/tag/mysql/index.html"]],
  ["v-8848dfa8","/category/redis/",{"y":"p","title":"Redis 分类"},["/category/redis/index.html"]],
  ["v-7812146a","/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{"y":"p","title":"计算机网络 标签"},["/tag/计算机网络/","/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.html"]],
  ["v-06be9332","/category/%E7%AE%97%E6%B3%95/",{"y":"p","title":"算法 分类"},["/category/算法/","/category/%E7%AE%97%E6%B3%95/index.html"]],
  ["v-5e043973","/tag/%E7%BA%BF%E7%A8%8B/",{"y":"p","title":"线程 标签"},["/tag/线程/","/tag/%E7%BA%BF%E7%A8%8B/index.html"]],
  ["v-8f82338a","/category/paper/",{"y":"p","title":"Paper 分类"},["/category/paper/index.html"]],
  ["v-245f5676","/tag/python/",{"y":"p","title":"Python 标签"},["/tag/python/index.html"]],
  ["v-65efcb53","/category/gfs/",{"y":"p","title":"gfs 分类"},["/category/gfs/index.html"]],
  ["v-0d1f4c3c","/tag/redis/",{"y":"p","title":"Redis 标签"},["/tag/redis/index.html"]],
  ["v-49504a98","/category/%E7%AC%94%E8%AF%95/",{"y":"p","title":"笔试 分类"},["/category/笔试/","/category/%E7%AC%94%E8%AF%95/index.html"]],
  ["v-b31576a4","/tag/bfs/",{"y":"p","title":"BFS 标签"},["/tag/bfs/index.html"]],
  ["v-5831b135","/category/java/",{"y":"p","title":"Java 分类"},["/category/java/index.html"]],
  ["v-3606a93d","/tag/%E5%9B%9E%E6%BA%AF/",{"y":"p","title":"回溯 标签"},["/tag/回溯/","/tag/%E5%9B%9E%E6%BA%AF/index.html"]],
  ["v-08073caa","/category/spring/",{"y":"p","title":"Spring 分类"},["/category/spring/index.html"]],
  ["v-313e0f22","/tag/graph/",{"y":"p","title":"graph 标签"},["/tag/graph/index.html"]],
  ["v-a754eee2","/tag/%E4%BA%8C%E5%88%86%E6%B3%95/",{"y":"p","title":"二分法 标签"},["/tag/二分法/","/tag/%E4%BA%8C%E5%88%86%E6%B3%95/index.html"]],
  ["v-32bc6259","/tag/%E4%BD%8D%E8%BF%90%E7%AE%97/",{"y":"p","title":"位运算 标签"},["/tag/位运算/","/tag/%E4%BD%8D%E8%BF%90%E7%AE%97/index.html"]],
  ["v-13770b26","/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{"y":"p","title":"数据结构 标签"},["/tag/数据结构/","/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.html"]],
  ["v-b313a528","/tag/dfs/",{"y":"p","title":"DFS 标签"},["/tag/dfs/index.html"]],
  ["v-4795e2ce","/tag/%E5%88%86%E6%B2%BB/",{"y":"p","title":"分治 标签"},["/tag/分治/","/tag/%E5%88%86%E6%B2%BB/index.html"]],
  ["v-0b674df5","/tag/%E5%8F%8C%E6%8C%87%E9%92%88/",{"y":"p","title":"双指针 标签"},["/tag/双指针/","/tag/%E5%8F%8C%E6%8C%87%E9%92%88/index.html"]],
  ["v-2bb96006","/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",{"y":"p","title":"动态规划 标签"},["/tag/动态规划/","/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.html"]],
  ["v-10860a48","/tag/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91(mst)/",{"y":"p","title":"最小生成树(MST) 标签"},["/tag/最小生成树(mst)/","/tag/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91(mst)/index.html"]],
  ["v-71e745c1","/tag/%E6%89%AB%E6%8F%8F%E7%BA%BF/",{"y":"p","title":"扫描线 标签"},["/tag/扫描线/","/tag/%E6%89%AB%E6%8F%8F%E7%BA%BF/index.html"]],
  ["v-e0510c16","/tag/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/",{"y":"p","title":"单调队列 标签"},["/tag/单调队列/","/tag/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/index.html"]],
  ["v-88f0f054","/tag/%E5%8D%95%E8%B0%83%E6%A0%88/",{"y":"p","title":"单调栈 标签"},["/tag/单调栈/","/tag/%E5%8D%95%E8%B0%83%E6%A0%88/index.html"]],
  ["v-5d93e6df","/tag/%E6%8E%92%E5%BA%8F/",{"y":"p","title":"排序 标签"},["/tag/排序/","/tag/%E6%8E%92%E5%BA%8F/index.html"]],
  ["v-65e204be","/tag/%E5%BF%AB%E9%80%9F%E5%B9%82/",{"y":"p","title":"快速幂 标签"},["/tag/快速幂/","/tag/%E5%BF%AB%E9%80%9F%E5%B9%82/index.html"]],
  ["v-0d8eb037","/tag/%E6%A8%A1%E6%8B%9F/",{"y":"p","title":"模拟 标签"},["/tag/模拟/","/tag/%E6%A8%A1%E6%8B%9F/index.html"]],
  ["v-cf2ceaf0","/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",{"y":"p","title":"滑动窗口 标签"},["/tag/滑动窗口/","/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/index.html"]],
  ["v-ddf33f48","/tag/%E5%AD%97%E5%85%B8%E6%A0%91/",{"y":"p","title":"字典树 标签"},["/tag/字典树/","/tag/%E5%AD%97%E5%85%B8%E6%A0%91/index.html"]],
  ["v-995503f2","/tag/%E5%91%A8%E8%B5%9B/",{"y":"p","title":"周赛 标签"},["/tag/周赛/","/tag/%E5%91%A8%E8%B5%9B/index.html"]],
  ["v-4ffacb24","/tag/%E5%89%8D%E7%BC%80%E5%92%8C/",{"y":"p","title":"前缀和 标签"},["/tag/前缀和/","/tag/%E5%89%8D%E7%BC%80%E5%92%8C/index.html"]],
  ["v-95533e36","/tag/%E5%AD%90%E5%BA%8F%E5%88%97/",{"y":"p","title":"子序列 标签"},["/tag/子序列/","/tag/%E5%AD%90%E5%BA%8F%E5%88%97/index.html"]],
  ["v-b6d14f14","/tag/%E6%A0%88/",{"y":"p","title":"栈 标签"},["/tag/栈/","/tag/%E6%A0%88/index.html"]],
  ["v-93cb9d6e","/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",{"y":"p","title":"字符串 标签"},["/tag/字符串/","/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/index.html"]],
  ["v-75227d1c","/tag/distrubuted-system/",{"y":"p","title":"Distrubuted System 标签"},["/tag/distrubuted-system/index.html"]],
  ["v-1bb6c201","/tag/%E5%A4%A7%E7%96%86/",{"y":"p","title":"大疆 标签"},["/tag/大疆/","/tag/%E5%A4%A7%E7%96%86/index.html"]],
  ["v-733778a2","/tag/%E7%AC%94%E8%AF%95/",{"y":"p","title":"笔试 标签"},["/tag/笔试/","/tag/%E7%AC%94%E8%AF%95/index.html"]],
  ["v-26ca23a5","/tag/%E7%BE%8E%E5%9B%A2/",{"y":"p","title":"美团 标签"},["/tag/美团/","/tag/%E7%BE%8E%E5%9B%A2/index.html"]],
  ["v-2d3a9649","/tag/%E7%B1%B3%E5%93%88%E6%B8%B8/",{"y":"p","title":"米哈游 标签"},["/tag/米哈游/","/tag/%E7%B1%B3%E5%93%88%E6%B8%B8/index.html"]],
  ["v-28a1d8bf","/tag/java/",{"y":"p","title":"Java 标签"},["/tag/java/index.html"]],
  ["v-f0e09ea6","/tag/javase/",{"y":"p","title":"JavaSE 标签"},["/tag/javase/index.html"]],
  ["v-b30dc3f6","/tag/juc/",{"y":"p","title":"JUC 标签"},["/tag/juc/index.html"]],
  ["v-b30dba08","/tag/jvm/",{"y":"p","title":"JVM 标签"},["/tag/jvm/index.html"]],
  ["v-7d0ba9b4","/tag/spring/",{"y":"p","title":"Spring 标签"},["/tag/spring/index.html"]],
  ["v-39495c82","/tag/advanced/",{"y":"p","title":"Advanced 标签"},["/tag/advanced/index.html"]],
]
